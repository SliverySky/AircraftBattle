
qian_pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df50  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a98  0800e138  0800e138  0001e138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbd0  0800fbd0  00020470  2**0
                  CONTENTS
  4 .ARM          00000000  0800fbd0  0800fbd0  00020470  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fbd0  0800fbd0  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800fbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd4  20000470  08010048  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005444  08010048  00025444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0c0  00000000  00000000  00020499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002004  00000000  00000000  0002d559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f58  00000000  00000000  00030ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8f4  00000000  00000000  00047f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000810cf  00000000  00000000  00052844  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  000d3990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000470 	.word	0x20000470
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e120 	.word	0x0800e120

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000474 	.word	0x20000474
 8000224:	0800e120 	.word	0x0800e120

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__aeabi_f2iz>:
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30f      	bcc.n	800104a <__aeabi_f2iz+0x2a>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d90d      	bls.n	8001050 <__aeabi_f2iz+0x30>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	bf18      	it	ne
 8001046:	4240      	negne	r0, r0
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr
 8001050:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001054:	d101      	bne.n	800105a <__aeabi_f2iz+0x3a>
 8001056:	0242      	lsls	r2, r0, #9
 8001058:	d105      	bne.n	8001066 <__aeabi_f2iz+0x46>
 800105a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105e:	bf08      	it	eq
 8001060:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x28>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f945 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f00b f8c6 	bl	800c218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f95d 	bl	8001376 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f925 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x20>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000004 	.word	0x20000004
 8001118:	200004a8 	.word	0x200004a8

0800111c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	200004a8 	.word	0x200004a8

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffe0 	bl	800111c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4906      	ldr	r1, [pc, #24]	; (800120c <__NVIC_EnableIRQ+0x34>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff90 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff2d 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff42 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff35 	bl	80011d8 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e133      	b.n	800160c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a4:	2201      	movs	r2, #1
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8122 	bne.w	8001606 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d034      	beq.n	8001434 <HAL_GPIO_Init+0xa4>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d80d      	bhi.n	80013ea <HAL_GPIO_Init+0x5a>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x9a>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d804      	bhi.n	80013e0 <HAL_GPIO_Init+0x50>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d031      	beq.n	800143e <HAL_GPIO_Init+0xae>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d01c      	beq.n	8001418 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013de:	e048      	b.n	8001472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d043      	beq.n	800146c <HAL_GPIO_Init+0xdc>
 80013e4:	2b11      	cmp	r3, #17
 80013e6:	d01b      	beq.n	8001420 <HAL_GPIO_Init+0x90>
          break;
 80013e8:	e043      	b.n	8001472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013ea:	4a8f      	ldr	r2, [pc, #572]	; (8001628 <HAL_GPIO_Init+0x298>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d026      	beq.n	800143e <HAL_GPIO_Init+0xae>
 80013f0:	4a8d      	ldr	r2, [pc, #564]	; (8001628 <HAL_GPIO_Init+0x298>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d806      	bhi.n	8001404 <HAL_GPIO_Init+0x74>
 80013f6:	4a8d      	ldr	r2, [pc, #564]	; (800162c <HAL_GPIO_Init+0x29c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d020      	beq.n	800143e <HAL_GPIO_Init+0xae>
 80013fc:	4a8c      	ldr	r2, [pc, #560]	; (8001630 <HAL_GPIO_Init+0x2a0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01d      	beq.n	800143e <HAL_GPIO_Init+0xae>
          break;
 8001402:	e036      	b.n	8001472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001404:	4a8b      	ldr	r2, [pc, #556]	; (8001634 <HAL_GPIO_Init+0x2a4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0xae>
 800140a:	4a8b      	ldr	r2, [pc, #556]	; (8001638 <HAL_GPIO_Init+0x2a8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d016      	beq.n	800143e <HAL_GPIO_Init+0xae>
 8001410:	4a8a      	ldr	r2, [pc, #552]	; (800163c <HAL_GPIO_Init+0x2ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0xae>
          break;
 8001416:	e02c      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e028      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	3304      	adds	r3, #4
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e023      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	3308      	adds	r3, #8
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e01e      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	330c      	adds	r3, #12
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e019      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001446:	2304      	movs	r3, #4
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e012      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	611a      	str	r2, [r3, #16]
          break;
 800145e:	e008      	b.n	8001472 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	615a      	str	r2, [r3, #20]
          break;
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d801      	bhi.n	800147c <HAL_GPIO_Init+0xec>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	e001      	b.n	8001480 <HAL_GPIO_Init+0xf0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3304      	adds	r3, #4
 8001480:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d802      	bhi.n	800148e <HAL_GPIO_Init+0xfe>
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x104>
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3b08      	subs	r3, #8
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	210f      	movs	r1, #15
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	401a      	ands	r2, r3
 80014a6:	6a39      	ldr	r1, [r7, #32]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a2 	beq.w	8001606 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014da:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x2b4>)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x1b6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x2bc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x1b2>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x2c0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1ae>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x2c4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1aa>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x2c8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1a6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x2cc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1a2>
 800152e:	2305      	movs	r3, #5
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 8001532:	2306      	movs	r3, #6
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x1b8>
 8001546:	2300      	movs	r3, #0
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001558:	493a      	ldr	r1, [pc, #232]	; (8001644 <HAL_GPIO_Init+0x2b4>)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	493a      	ldr	r1, [pc, #232]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001580:	4b37      	ldr	r3, [pc, #220]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 800158a:	4013      	ands	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4930      	ldr	r1, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e006      	b.n	80015b6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	492b      	ldr	r1, [pc, #172]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4926      	ldr	r1, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
 80015ce:	e006      	b.n	80015de <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	4921      	ldr	r1, [pc, #132]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015da:	4013      	ands	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	491c      	ldr	r1, [pc, #112]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60cb      	str	r3, [r1, #12]
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	43db      	mvns	r3, r3
 8001600:	4917      	ldr	r1, [pc, #92]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001602:	4013      	ands	r3, r2
 8001604:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f aec4 	bne.w	80013a4 <HAL_GPIO_Init+0x14>
  }
}
 800161c:	bf00      	nop
 800161e:	372c      	adds	r7, #44	; 0x2c
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	10210000 	.word	0x10210000
 800162c:	10110000 	.word	0x10110000
 8001630:	10120000 	.word	0x10120000
 8001634:	10310000 	.word	0x10310000
 8001638:	10320000 	.word	0x10320000
 800163c:	10220000 	.word	0x10220000
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	40010800 	.word	0x40010800
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40011000 	.word	0x40011000
 8001654:	40011400 	.word	0x40011400
 8001658:	40011800 	.word	0x40011800
 800165c:	40011c00 	.word	0x40011c00
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a2:	787b      	ldrb	r3, [r7, #1]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ae:	e003      	b.n	80016b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	611a      	str	r2, [r3, #16]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f009 fff4 	bl	800b700 <HAL_GPIO_EXTI_Callback>
  }
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e26c      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8087 	beq.w	8001852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001744:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	d00c      	beq.n	800176a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d112      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
 800175c:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d10b      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d06c      	beq.n	8001850 <HAL_RCC_OscConfig+0x12c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d168      	bne.n	8001850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e246      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x76>
 800178c:	4b80      	ldr	r3, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e02e      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0xbc>
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a71      	ldr	r2, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017e0:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a6a      	ldr	r2, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc8c 	bl	800111c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fc88 	bl	800111c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1fa      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xe4>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc78 	bl	800111c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc74 	bl	800111c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1e6      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x10c>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1ba      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4939      	ldr	r1, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fc2d 	bl	800111c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc29 	bl	800111c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e19b      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc0c 	bl	800111c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fc08 	bl	800111c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e17a      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03a      	beq.n	80019a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff fbec 	bl	800111c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fbe8 	bl	800111c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e15a      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 fada 	bl	8001f20 <RCC_Delay>
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff fbd2 	bl	800111c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	e00f      	b.n	800199c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fbce 	bl	800111c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d908      	bls.n	800199c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e140      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	42420000 	.word	0x42420000
 8001998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	4b9e      	ldr	r3, [pc, #632]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e9      	bne.n	800197c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a6 	beq.w	8001b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b97      	ldr	r3, [pc, #604]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10d      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b94      	ldr	r3, [pc, #592]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a93      	ldr	r2, [pc, #588]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b8e      	ldr	r3, [pc, #568]	; (8001c1c <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a8a      	ldr	r2, [pc, #552]	; (8001c1c <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb8f 	bl	800111c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff fb8b 	bl	800111c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0fd      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x312>
 8001a28:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e02d      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a75      	ldr	r2, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a72      	ldr	r2, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	e01c      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x356>
 8001a60:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a6c      	ldr	r2, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a69      	ldr	r2, [pc, #420]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e00b      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b64      	ldr	r3, [pc, #400]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a63      	ldr	r2, [pc, #396]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fb3f 	bl	800111c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fb3b 	bl	800111c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0ab      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ee      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x37e>
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fb29 	bl	800111c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fb25 	bl	800111c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e095      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8081 	beq.w	8001c0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d061      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d146      	bne.n	8001bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_RCC_OscConfig+0x4fc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff faf9 	bl	800111c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff faf5 	bl	800111c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e067      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	492d      	ldr	r1, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a19      	ldr	r1, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_OscConfig+0x4fc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fac9 	bl	800111c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff fac5 	bl	800111c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e037      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x46a>
 8001bac:	e02f      	b.n	8001c0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_RCC_OscConfig+0x4fc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fab2 	bl	800111c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff faae 	bl	800111c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e020      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x498>
 8001bda:	e018      	b.n	8001c0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e013      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	42420060 	.word	0x42420060

08001c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d0      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4965      	ldr	r1, [pc, #404]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d040      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e073      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4936      	ldr	r1, [pc, #216]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fa02 	bl	800111c <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f9fe 	bl	800111c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e053      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d210      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4922      	ldr	r1, [pc, #136]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4601      	mov	r1, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f960 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	0800f9ac 	.word	0x0800f9ac
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b490      	push	{r4, r7}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e00:	1d3c      	adds	r4, r7, #4
 8001e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x40>
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x46>
 8001e36:	e02d      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3a:	623b      	str	r3, [r7, #32]
      break;
 8001e3c:	e02d      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	0c9b      	lsrs	r3, r3, #18
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c5b      	lsrs	r3, r3, #17
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e76:	fb02 f203 	mul.w	r2, r2, r3
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	e004      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	623b      	str	r3, [r7, #32]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e96:	623b      	str	r3, [r7, #32]
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc90      	pop	{r4, r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	0800e138 	.word	0x0800e138
 8001eac:	0800e148 	.word	0x0800e148
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	003d0900 	.word	0x003d0900

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff2 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4a03      	ldr	r2, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	0800f9bc 	.word	0x0800f9bc

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f00:	4601      	mov	r1, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	0800f9bc 	.word	0x0800f9bc

08001f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <RCC_Delay+0x34>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <RCC_Delay+0x38>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a5b      	lsrs	r3, r3, #9
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f3c:	bf00      	nop
  }
  while (Delay --);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f9      	bne.n	8001f3c <RCC_Delay+0x1c>
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01d      	b.n	8001faa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f00a faa0 	bl	800c4c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f000 f966 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb76 	bl	80026b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <HAL_TIM_PWM_Start+0x74>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_PWM_Start+0x2c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_TIM_PWM_Start+0x78>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIM_PWM_Start+0x30>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b06      	cmp	r3, #6
 800200a:	d007      	beq.n	800201c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40013400 	.word	0x40013400

08002030 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fb38 	bl	80026b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <HAL_TIM_PWM_Stop+0xa8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_PWM_Stop+0x2c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_TIM_PWM_Stop+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_TIM_PWM_Stop+0x30>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_TIM_PWM_Stop+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_TIM_PWM_Stop+0x66>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	f240 4344 	movw	r3, #1092	; 0x444
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d107      	bne.n	8002096 <HAL_TIM_PWM_Stop+0x66>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	f241 1311 	movw	r3, #4369	; 0x1111
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_TIM_PWM_Stop+0x96>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	f240 4344 	movw	r3, #1092	; 0x444
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_TIM_PWM_Stop+0x96>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40013400 	.word	0x40013400

080020e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0b4      	b.n	8002264 <HAL_TIM_PWM_ConfigChannel+0x184>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f200 809f 	bhi.w	8002250 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002251 	.word	0x08002251
 8002120:	08002251 	.word	0x08002251
 8002124:	08002251 	.word	0x08002251
 8002128:	0800218d 	.word	0x0800218d
 800212c:	08002251 	.word	0x08002251
 8002130:	08002251 	.word	0x08002251
 8002134:	08002251 	.word	0x08002251
 8002138:	080021cf 	.word	0x080021cf
 800213c:	08002251 	.word	0x08002251
 8002140:	08002251 	.word	0x08002251
 8002144:	08002251 	.word	0x08002251
 8002148:	0800220f 	.word	0x0800220f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f904 	bl	8002360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
      break;
 800218a:	e062      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f954 	bl	8002440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6999      	ldr	r1, [r3, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
      break;
 80021cc:	e041      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f9a7 	bl	8002528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      break;
 800220c:	e021      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9fb 	bl	8002610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
      break;
 800224e:	e000      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002250:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a33      	ldr	r2, [pc, #204]	; (800234c <TIM_Base_SetConfig+0xe0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <TIM_Base_SetConfig+0xe8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <TIM_Base_SetConfig+0xec>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a2d      	ldr	r2, [pc, #180]	; (800235c <TIM_Base_SetConfig+0xf0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <TIM_Base_SetConfig+0xe0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <TIM_Base_SetConfig+0xe8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <TIM_Base_SetConfig+0xec>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <TIM_Base_SetConfig+0xf0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <TIM_Base_SetConfig+0xe0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40013400 	.word	0x40013400
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00

08002360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 0302 	bic.w	r3, r3, #2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <TIM_OC1_SetConfig+0xd8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_OC1_SetConfig+0x64>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <TIM_OC1_SetConfig+0xdc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10c      	bne.n	80023de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0308 	bic.w	r3, r3, #8
 80023ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <TIM_OC1_SetConfig+0xd8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_OC1_SetConfig+0x8e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <TIM_OC1_SetConfig+0xdc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40013400 	.word	0x40013400

08002440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f023 0210 	bic.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0320 	bic.w	r3, r3, #32
 800248a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <TIM_OC2_SetConfig+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_OC2_SetConfig+0x68>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <TIM_OC2_SetConfig+0xe4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10d      	bne.n	80024c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <TIM_OC2_SetConfig+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_OC2_SetConfig+0x94>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <TIM_OC2_SetConfig+0xe4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d113      	bne.n	80024fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40013400 	.word	0x40013400

08002528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <TIM_OC3_SetConfig+0xe0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_OC3_SetConfig+0x66>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <TIM_OC3_SetConfig+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10d      	bne.n	80025aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <TIM_OC3_SetConfig+0xe0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_OC3_SetConfig+0x92>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <TIM_OC3_SetConfig+0xe4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d113      	bne.n	80025e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	621a      	str	r2, [r3, #32]
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40013400 	.word	0x40013400

08002610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <TIM_OC4_SetConfig+0xa0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_OC4_SetConfig+0x68>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <TIM_OC4_SetConfig+0xa4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d109      	bne.n	800268c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40013400 	.word	0x40013400

080026b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2201      	movs	r2, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002714:	2302      	movs	r3, #2
 8002716:	e032      	b.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002750:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4313      	orrs	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e03f      	b.n	800281a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f009 ff7e 	bl	800c6b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f829 	bl	8002824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800285e:	f023 030c 	bic.w	r3, r3, #12
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	430b      	orrs	r3, r1
 800286a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <UART_SetConfig+0x1ac>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d14e      	bne.n	800292a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800288c:	f7ff fb34 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8002890:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009a      	lsls	r2, r3, #2
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <UART_SetConfig+0x1b0>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	0119      	lsls	r1, r3, #4
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <UART_SetConfig+0x1b0>)
 80028ca:	fba3 0302 	umull	r0, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	fb00 f303 	mul.w	r3, r0, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	3332      	adds	r3, #50	; 0x32
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <UART_SetConfig+0x1b0>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e8:	4419      	add	r1, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	009a      	lsls	r2, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <UART_SetConfig+0x1b0>)
 8002902:	fba3 0302 	umull	r0, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	fb00 f303 	mul.w	r3, r0, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <UART_SetConfig+0x1b0>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	440a      	add	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002928:	e04d      	b.n	80029c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800292a:	f7ff fad1 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 800292e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	441a      	add	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <UART_SetConfig+0x1b0>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	0119      	lsls	r1, r3, #4
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	fbb2 f2f3 	udiv	r2, r2, r3
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <UART_SetConfig+0x1b0>)
 8002968:	fba3 0302 	umull	r0, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2064      	movs	r0, #100	; 0x64
 8002970:	fb00 f303 	mul.w	r3, r0, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <UART_SetConfig+0x1b0>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002986:	4419      	add	r1, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009a      	lsls	r2, r3, #2
 8002992:	441a      	add	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fbb2 f2f3 	udiv	r2, r2, r3
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <UART_SetConfig+0x1b0>)
 80029a0:	fba3 0302 	umull	r0, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2064      	movs	r0, #100	; 0x64
 80029a8:	fb00 f303 	mul.w	r3, r0, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	3332      	adds	r3, #50	; 0x32
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <UART_SetConfig+0x1b0>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	440a      	add	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40013800 	.word	0x40013800
 80029d4:	51eb851f 	.word	0x51eb851f

080029d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ec:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <MX_GPIO_Init+0x130>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <MX_GPIO_Init+0x130>)
 80029f2:	f043 0320 	orr.w	r3, r3, #32
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <MX_GPIO_Init+0x130>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4a39      	ldr	r2, [pc, #228]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a22:	f043 0310 	orr.w	r3, r3, #16
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <MX_GPIO_Init+0x130>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3a:	4834      	ldr	r0, [pc, #208]	; (8002b0c <MX_GPIO_Init+0x134>)
 8002a3c:	f7fe fe29 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2104      	movs	r1, #4
 8002a44:	4832      	ldr	r0, [pc, #200]	; (8002b10 <MX_GPIO_Init+0x138>)
 8002a46:	f7fe fe24 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <MX_GPIO_Init+0x13c>)
 8002a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002a56:	f107 0310 	add.w	r3, r7, #16
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	482b      	ldr	r0, [pc, #172]	; (8002b0c <MX_GPIO_Init+0x134>)
 8002a5e:	f7fe fc97 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002a62:	2320      	movs	r3, #32
 8002a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <MX_GPIO_Init+0x13c>)
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4619      	mov	r1, r3
 8002a74:	4828      	ldr	r0, [pc, #160]	; (8002b18 <MX_GPIO_Init+0x140>)
 8002a76:	f7fe fc8b 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	f107 0310 	add.w	r3, r7, #16
 8002a90:	4619      	mov	r1, r3
 8002a92:	481e      	ldr	r0, [pc, #120]	; (8002b0c <MX_GPIO_Init+0x134>)
 8002a94:	f7fe fc7c 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <MX_GPIO_Init+0x13c>)
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4817      	ldr	r0, [pc, #92]	; (8002b0c <MX_GPIO_Init+0x134>)
 8002aae:	f7fe fc6f 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4811      	ldr	r0, [pc, #68]	; (8002b10 <MX_GPIO_Init+0x138>)
 8002aca:	f7fe fc61 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2006      	movs	r0, #6
 8002ad4:	f7fe fc25 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f7fe fc3e 	bl	800135a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2017      	movs	r0, #23
 8002ae4:	f7fe fc1d 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ae8:	2017      	movs	r0, #23
 8002aea:	f7fe fc36 	bl	800135a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
 8002aee:	2202      	movs	r2, #2
 8002af0:	2102      	movs	r1, #2
 8002af2:	2028      	movs	r0, #40	; 0x28
 8002af4:	f7fe fc15 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002af8:	2028      	movs	r0, #40	; 0x28
 8002afa:	f7fe fc2e 	bl	800135a <HAL_NVIC_EnableIRQ>

}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40011400 	.word	0x40011400
 8002b14:	10210000 	.word	0x10210000
 8002b18:	40011000 	.word	0x40011000

08002b1c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <LCD_WR_REG+0x40>)
 8002b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <LCD_WR_REG+0x40>)
 8002b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b34:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <LCD_WR_REG+0x44>)
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <LCD_WR_REG+0x40>)
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <LCD_WR_REG+0x40>)
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <LCD_WR_REG+0x40>)
 8002b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4e:	611a      	str	r2, [r3, #16]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40010c00 	.word	0x40010c00

08002b64 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <LCD_WR_DATAX+0x40>)
 8002b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b74:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <LCD_WR_DATAX+0x40>)
 8002b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <LCD_WR_DATAX+0x44>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <LCD_WR_DATAX+0x40>)
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <LCD_WR_DATAX+0x40>)
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <LCD_WR_DATAX+0x40>)
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	611a      	str	r2, [r3, #16]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40010c00 	.word	0x40010c00

08002bac <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002bb4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002bb8:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002bbc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002bc0:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8002bc2:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <LCD_RD_DATA+0x80>)
 8002bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bce:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <LCD_RD_DATA+0x80>)
 8002bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd6:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <LCD_RD_DATA+0x80>)
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <LCD_RD_DATA+0x84>)
 8002be0:	889b      	ldrh	r3, [r3, #4]
 8002be2:	f648 1289 	movw	r2, #35209	; 0x8989
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d102      	bne.n	8002bf0 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7fe faa0 	bl	8001130 <HAL_Delay>
	t = DATAIN
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <LCD_RD_DATA+0x80>)
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <LCD_RD_DATA+0x80>)
 8002bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c02:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002c06:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002c0a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002c0e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002c12:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <LCD_RD_DATA+0x7c>)
 8002c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1a:	60da      	str	r2, [r3, #12]
	return t;
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	200004ac 	.word	0x200004ac

08002c34 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	80fb      	strh	r3, [r7, #6]
 8002c40:	4613      	mov	r3, r2
 8002c42:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff68 	bl	8002b1c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <LCD_WriteReg+0x4c>)
 8002c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c52:	611a      	str	r2, [r3, #16]
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <LCD_WriteReg+0x4c>)
 8002c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <LCD_WriteReg+0x50>)
 8002c5e:	88bb      	ldrh	r3, [r7, #4]
 8002c60:	60d3      	str	r3, [r2, #12]
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <LCD_WriteReg+0x4c>)
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	615a      	str	r2, [r3, #20]
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <LCD_WriteReg+0x4c>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <LCD_WriteReg+0x4c>)
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	611a      	str	r2, [r3, #16]
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40011000 	.word	0x40011000
 8002c84:	40010c00 	.word	0x40010c00

08002c88 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff41 	bl	8002b1c <LCD_WR_REG>
	return LCD_RD_DATA();
 8002c9a:	f7ff ff87 	bl	8002bac <LCD_RD_DATA>
 8002c9e:	4603      	mov	r3, r0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <LCD_WriteRAM_Prepare+0x14>)
 8002cae:	891b      	ldrh	r3, [r3, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff33 	bl	8002b1c <LCD_WR_REG>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200004ac 	.word	0x200004ac

08002cc0 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460a      	mov	r2, r1
 8002cca:	80fb      	strh	r3, [r7, #6]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002cd0:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002cd2:	889b      	ldrh	r3, [r3, #4]
 8002cd4:	f249 3241 	movw	r2, #37697	; 0x9341
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d005      	beq.n	8002ce8 <LCD_SetCursor+0x28>
 8002cdc:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002cde:	889b      	ldrh	r3, [r3, #4]
 8002ce0:	f245 3210 	movw	r2, #21264	; 0x5310
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d164      	bne.n	8002db2 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8002ce8:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002cea:	895b      	ldrh	r3, [r3, #10]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff15 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002cf2:	4b6c      	ldr	r3, [pc, #432]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d00:	615a      	str	r2, [r3, #20]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	615a      	str	r2, [r3, #20]
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	611a      	str	r2, [r3, #16]
 8002d18:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002d20:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d26:	611a      	str	r2, [r3, #16]
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	4a5d      	ldr	r2, [pc, #372]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	4b5a      	ldr	r3, [pc, #360]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	615a      	str	r2, [r3, #20]
 8002d3e:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002d4e:	899b      	ldrh	r3, [r3, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fee3 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002d56:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d64:	615a      	str	r2, [r3, #20]
 8002d66:	88bb      	ldrh	r3, [r7, #4]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	4a44      	ldr	r2, [pc, #272]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	60d3      	str	r3, [r2, #12]
 8002d9c:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	615a      	str	r2, [r3, #20]
 8002da2:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	611a      	str	r2, [r3, #16]
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002db0:	e248      	b.n	8003244 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002db4:	889b      	ldrh	r3, [r3, #4]
 8002db6:	f646 0204 	movw	r2, #26628	; 0x6804
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d176      	bne.n	8002eac <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002dc0:	799b      	ldrb	r3, [r3, #6]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002dd6:	895b      	ldrh	r3, [r3, #10]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe9f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	615a      	str	r2, [r3, #20]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e12:	611a      	str	r2, [r3, #16]
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1a:	615a      	str	r2, [r3, #20]
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	60d3      	str	r3, [r2, #12]
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <LCD_SetCursor+0x1e0>)
 8002e3a:	899b      	ldrh	r3, [r3, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe6d 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	615a      	str	r2, [r3, #20]
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002e5a:	60da      	str	r2, [r3, #12]
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	611a      	str	r2, [r3, #16]
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e76:	611a      	str	r2, [r3, #16]
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <LCD_SetCursor+0x1e8>)
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	611a      	str	r2, [r3, #16]
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <LCD_SetCursor+0x1e4>)
 8002e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9a:	611a      	str	r2, [r3, #16]
}
 8002e9c:	e1d2      	b.n	8003244 <LCD_SetCursor+0x584>
 8002e9e:	bf00      	nop
 8002ea0:	200004ac 	.word	0x200004ac
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002eac:	4b99      	ldr	r3, [pc, #612]	; (8003114 <LCD_SetCursor+0x454>)
 8002eae:	889b      	ldrh	r3, [r3, #4]
 8002eb0:	f641 1263 	movw	r2, #6499	; 0x1963
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	f040 8133 	bne.w	8003120 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8002eba:	4b96      	ldr	r3, [pc, #600]	; (8003114 <LCD_SetCursor+0x454>)
 8002ebc:	799b      	ldrb	r3, [r3, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d163      	bne.n	8002f8a <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8002ec2:	4b94      	ldr	r3, [pc, #592]	; (8003114 <LCD_SetCursor+0x454>)
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002ed0:	4b90      	ldr	r3, [pc, #576]	; (8003114 <LCD_SetCursor+0x454>)
 8002ed2:	895b      	ldrh	r3, [r3, #10]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fe21 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002eda:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <LCD_SetCursor+0x458>)
 8002edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee0:	611a      	str	r2, [r3, #16]
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <LCD_SetCursor+0x458>)
 8002ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	4b8c      	ldr	r3, [pc, #560]	; (800311c <LCD_SetCursor+0x45c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	4b89      	ldr	r3, [pc, #548]	; (8003118 <LCD_SetCursor+0x458>)
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	615a      	str	r2, [r3, #20]
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <LCD_SetCursor+0x458>)
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	611a      	str	r2, [r3, #16]
 8002efc:	4b86      	ldr	r3, [pc, #536]	; (8003118 <LCD_SetCursor+0x458>)
 8002efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f02:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <LCD_SetCursor+0x458>)
 8002f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f0a:	611a      	str	r2, [r3, #16]
 8002f0c:	4b82      	ldr	r3, [pc, #520]	; (8003118 <LCD_SetCursor+0x458>)
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	615a      	str	r2, [r3, #20]
 8002f14:	4b81      	ldr	r3, [pc, #516]	; (800311c <LCD_SetCursor+0x45c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <LCD_SetCursor+0x458>)
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	615a      	str	r2, [r3, #20]
 8002f20:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <LCD_SetCursor+0x458>)
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <LCD_SetCursor+0x458>)
 8002f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <LCD_SetCursor+0x458>)
 8002f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	4b78      	ldr	r3, [pc, #480]	; (8003118 <LCD_SetCursor+0x458>)
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	615a      	str	r2, [r3, #20]
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b75      	ldr	r3, [pc, #468]	; (800311c <LCD_SetCursor+0x45c>)
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	4b73      	ldr	r3, [pc, #460]	; (8003118 <LCD_SetCursor+0x458>)
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	615a      	str	r2, [r3, #20]
 8002f4e:	4b72      	ldr	r3, [pc, #456]	; (8003118 <LCD_SetCursor+0x458>)
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	4b70      	ldr	r3, [pc, #448]	; (8003118 <LCD_SetCursor+0x458>)
 8002f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002f5c:	4b6e      	ldr	r3, [pc, #440]	; (8003118 <LCD_SetCursor+0x458>)
 8002f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <LCD_SetCursor+0x458>)
 8002f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4a6b      	ldr	r2, [pc, #428]	; (800311c <LCD_SetCursor+0x45c>)
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	60d3      	str	r3, [r2, #12]
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <LCD_SetCursor+0x458>)
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	615a      	str	r2, [r3, #20]
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <LCD_SetCursor+0x458>)
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	611a      	str	r2, [r3, #16]
 8002f80:	4b65      	ldr	r3, [pc, #404]	; (8003118 <LCD_SetCursor+0x458>)
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	e061      	b.n	800304e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8002f8a:	4b62      	ldr	r3, [pc, #392]	; (8003114 <LCD_SetCursor+0x454>)
 8002f8c:	895b      	ldrh	r3, [r3, #10]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fdc4 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <LCD_SetCursor+0x458>)
 8002f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <LCD_SetCursor+0x458>)
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	615a      	str	r2, [r3, #20]
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b5c      	ldr	r3, [pc, #368]	; (800311c <LCD_SetCursor+0x45c>)
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <LCD_SetCursor+0x458>)
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <LCD_SetCursor+0x458>)
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <LCD_SetCursor+0x458>)
 8002fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <LCD_SetCursor+0x458>)
 8002fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	4b53      	ldr	r3, [pc, #332]	; (8003118 <LCD_SetCursor+0x458>)
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	615a      	str	r2, [r3, #20]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	4a51      	ldr	r2, [pc, #324]	; (800311c <LCD_SetCursor+0x45c>)
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	60d3      	str	r3, [r2, #12]
 8002fda:	4b4f      	ldr	r3, [pc, #316]	; (8003118 <LCD_SetCursor+0x458>)
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <LCD_SetCursor+0x458>)
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <LCD_SetCursor+0x458>)
 8002fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fec:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <LCD_SetCursor+0x458>)
 8002ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <LCD_SetCursor+0x458>)
 8002ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffc:	615a      	str	r2, [r3, #20]
 8002ffe:	4b45      	ldr	r3, [pc, #276]	; (8003114 <LCD_SetCursor+0x454>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	121a      	asrs	r2, r3, #8
 8003006:	4b45      	ldr	r3, [pc, #276]	; (800311c <LCD_SetCursor+0x45c>)
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	4b43      	ldr	r3, [pc, #268]	; (8003118 <LCD_SetCursor+0x458>)
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	615a      	str	r2, [r3, #20]
 8003010:	4b41      	ldr	r3, [pc, #260]	; (8003118 <LCD_SetCursor+0x458>)
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <LCD_SetCursor+0x458>)
 8003018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <LCD_SetCursor+0x458>)
 8003020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <LCD_SetCursor+0x458>)
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	615a      	str	r2, [r3, #20]
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <LCD_SetCursor+0x454>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	3b01      	subs	r3, #1
 8003034:	4a39      	ldr	r2, [pc, #228]	; (800311c <LCD_SetCursor+0x45c>)
 8003036:	b2db      	uxtb	r3, r3
 8003038:	60d3      	str	r3, [r2, #12]
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <LCD_SetCursor+0x458>)
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <LCD_SetCursor+0x458>)
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <LCD_SetCursor+0x458>)
 8003048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <LCD_SetCursor+0x454>)
 8003050:	899b      	ldrh	r3, [r3, #12]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fd62 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <LCD_SetCursor+0x458>)
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <LCD_SetCursor+0x458>)
 8003062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003066:	615a      	str	r2, [r3, #20]
 8003068:	88bb      	ldrh	r3, [r7, #4]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b29a      	uxth	r2, r3
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <LCD_SetCursor+0x45c>)
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <LCD_SetCursor+0x458>)
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <LCD_SetCursor+0x458>)
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	611a      	str	r2, [r3, #16]
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <LCD_SetCursor+0x458>)
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <LCD_SetCursor+0x458>)
 8003088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308c:	611a      	str	r2, [r3, #16]
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <LCD_SetCursor+0x458>)
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	615a      	str	r2, [r3, #20]
 8003096:	88bb      	ldrh	r3, [r7, #4]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <LCD_SetCursor+0x45c>)
 800309a:	b2db      	uxtb	r3, r3
 800309c:	60d3      	str	r3, [r2, #12]
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <LCD_SetCursor+0x458>)
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	615a      	str	r2, [r3, #20]
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <LCD_SetCursor+0x458>)
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <LCD_SetCursor+0x458>)
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <LCD_SetCursor+0x458>)
 80030b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <LCD_SetCursor+0x458>)
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	615a      	str	r2, [r3, #20]
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <LCD_SetCursor+0x454>)
 80030c4:	885b      	ldrh	r3, [r3, #2]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	121a      	asrs	r2, r3, #8
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <LCD_SetCursor+0x45c>)
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <LCD_SetCursor+0x458>)
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <LCD_SetCursor+0x458>)
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <LCD_SetCursor+0x458>)
 80030dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <LCD_SetCursor+0x458>)
 80030e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e8:	611a      	str	r2, [r3, #16]
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <LCD_SetCursor+0x458>)
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	615a      	str	r2, [r3, #20]
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <LCD_SetCursor+0x454>)
 80030f4:	885b      	ldrh	r3, [r3, #2]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <LCD_SetCursor+0x45c>)
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	60d3      	str	r3, [r2, #12]
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <LCD_SetCursor+0x458>)
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	615a      	str	r2, [r3, #20]
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <LCD_SetCursor+0x458>)
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	4b03      	ldr	r3, [pc, #12]	; (8003118 <LCD_SetCursor+0x458>)
 800310c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003110:	611a      	str	r2, [r3, #16]
}
 8003112:	e097      	b.n	8003244 <LCD_SetCursor+0x584>
 8003114:	200004ac 	.word	0x200004ac
 8003118:	40011000 	.word	0x40011000
 800311c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8003120:	4b4a      	ldr	r3, [pc, #296]	; (800324c <LCD_SetCursor+0x58c>)
 8003122:	889b      	ldrh	r3, [r3, #4]
 8003124:	f245 5210 	movw	r2, #21776	; 0x5510
 8003128:	4293      	cmp	r3, r2
 800312a:	d172      	bne.n	8003212 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <LCD_SetCursor+0x58c>)
 800312e:	895b      	ldrh	r3, [r3, #10]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fcf3 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003136:	4b46      	ldr	r3, [pc, #280]	; (8003250 <LCD_SetCursor+0x590>)
 8003138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <LCD_SetCursor+0x590>)
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	615a      	str	r2, [r3, #20]
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <LCD_SetCursor+0x594>)
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <LCD_SetCursor+0x590>)
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	615a      	str	r2, [r3, #20]
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <LCD_SetCursor+0x590>)
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	611a      	str	r2, [r3, #16]
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <LCD_SetCursor+0x590>)
 800315e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003162:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <LCD_SetCursor+0x58c>)
 8003166:	895b      	ldrh	r3, [r3, #10]
 8003168:	3301      	adds	r3, #1
 800316a:	b29b      	uxth	r3, r3
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fcd5 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <LCD_SetCursor+0x590>)
 8003174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <LCD_SetCursor+0x590>)
 800317c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003180:	615a      	str	r2, [r3, #20]
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	4a33      	ldr	r2, [pc, #204]	; (8003254 <LCD_SetCursor+0x594>)
 8003186:	b2db      	uxtb	r3, r3
 8003188:	60d3      	str	r3, [r2, #12]
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <LCD_SetCursor+0x590>)
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	615a      	str	r2, [r3, #20]
 8003190:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <LCD_SetCursor+0x590>)
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <LCD_SetCursor+0x590>)
 8003198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <LCD_SetCursor+0x58c>)
 80031a0:	899b      	ldrh	r3, [r3, #12]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fcba 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <LCD_SetCursor+0x590>)
 80031aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ae:	611a      	str	r2, [r3, #16]
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <LCD_SetCursor+0x590>)
 80031b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b6:	615a      	str	r2, [r3, #20]
 80031b8:	88bb      	ldrh	r3, [r7, #4]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b25      	ldr	r3, [pc, #148]	; (8003254 <LCD_SetCursor+0x594>)
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <LCD_SetCursor+0x590>)
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <LCD_SetCursor+0x590>)
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	611a      	str	r2, [r3, #16]
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <LCD_SetCursor+0x590>)
 80031d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <LCD_SetCursor+0x58c>)
 80031d8:	899b      	ldrh	r3, [r3, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fc9c 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <LCD_SetCursor+0x590>)
 80031e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ea:	611a      	str	r2, [r3, #16]
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <LCD_SetCursor+0x590>)
 80031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <LCD_SetCursor+0x594>)
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	60d3      	str	r3, [r2, #12]
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <LCD_SetCursor+0x590>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	615a      	str	r2, [r3, #20]
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <LCD_SetCursor+0x590>)
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <LCD_SetCursor+0x590>)
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	611a      	str	r2, [r3, #16]
}
 8003210:	e018      	b.n	8003244 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <LCD_SetCursor+0x58c>)
 8003214:	799b      	ldrb	r3, [r3, #6]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d106      	bne.n	8003228 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <LCD_SetCursor+0x58c>)
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <LCD_SetCursor+0x58c>)
 800322a:	895b      	ldrh	r3, [r3, #10]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fcff 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <LCD_SetCursor+0x58c>)
 8003238:	899b      	ldrh	r3, [r3, #12]
 800323a:	88ba      	ldrh	r2, [r7, #4]
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fcf8 	bl	8002c34 <LCD_WriteReg>
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200004ac 	.word	0x200004ac
 8003250:	40011000 	.word	0x40011000
 8003254:	40010c00 	.word	0x40010c00

08003258 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800326a:	4b78      	ldr	r3, [pc, #480]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800326c:	799b      	ldrb	r3, [r3, #6]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10b      	bne.n	800328a <LCD_Scan_Dir+0x32>
 8003272:	4b76      	ldr	r3, [pc, #472]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003274:	889b      	ldrh	r3, [r3, #4]
 8003276:	f646 0204 	movw	r2, #26628	; 0x6804
 800327a:	4293      	cmp	r3, r2
 800327c:	d005      	beq.n	800328a <LCD_Scan_Dir+0x32>
 800327e:	4b73      	ldr	r3, [pc, #460]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003280:	889b      	ldrh	r3, [r3, #4]
 8003282:	f641 1263 	movw	r2, #6499	; 0x1963
 8003286:	4293      	cmp	r3, r2
 8003288:	d109      	bne.n	800329e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800328c:	799b      	ldrb	r3, [r3, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d134      	bne.n	80032fc <LCD_Scan_Dir+0xa4>
 8003292:	4b6e      	ldr	r3, [pc, #440]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003294:	889b      	ldrh	r3, [r3, #4]
 8003296:	f641 1263 	movw	r2, #6499	; 0x1963
 800329a:	4293      	cmp	r3, r2
 800329c:	d12e      	bne.n	80032fc <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2b07      	cmp	r3, #7
 80032a2:	d82b      	bhi.n	80032fc <LCD_Scan_Dir+0xa4>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <LCD_Scan_Dir+0x54>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032cd 	.word	0x080032cd
 80032b0:	080032d3 	.word	0x080032d3
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032df 	.word	0x080032df
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	080032f7 	.word	0x080032f7
		{
		case 0:
			dir = 6;
 80032cc:	2306      	movs	r3, #6
 80032ce:	71fb      	strb	r3, [r7, #7]
			break;
 80032d0:	e014      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80032d2:	2307      	movs	r3, #7
 80032d4:	71fb      	strb	r3, [r7, #7]
			break;
 80032d6:	e011      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80032d8:	2304      	movs	r3, #4
 80032da:	71fb      	strb	r3, [r7, #7]
			break;
 80032dc:	e00e      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80032de:	2305      	movs	r3, #5
 80032e0:	71fb      	strb	r3, [r7, #7]
			break;
 80032e2:	e00b      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80032e4:	2301      	movs	r3, #1
 80032e6:	71fb      	strb	r3, [r7, #7]
			break;
 80032e8:	e008      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	71fb      	strb	r3, [r7, #7]
			break;
 80032ee:	e005      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80032f0:	2303      	movs	r3, #3
 80032f2:	71fb      	strb	r3, [r7, #7]
			break;
 80032f4:	e002      	b.n	80032fc <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80032f6:	2302      	movs	r3, #2
 80032f8:	71fb      	strb	r3, [r7, #7]
			break;
 80032fa:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80032fe:	889b      	ldrh	r3, [r3, #4]
 8003300:	f249 3241 	movw	r2, #37697	; 0x9341
 8003304:	4293      	cmp	r3, r2
 8003306:	d018      	beq.n	800333a <LCD_Scan_Dir+0xe2>
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800330a:	889b      	ldrh	r3, [r3, #4]
 800330c:	f646 0204 	movw	r2, #26628	; 0x6804
 8003310:	4293      	cmp	r3, r2
 8003312:	d012      	beq.n	800333a <LCD_Scan_Dir+0xe2>
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003316:	889b      	ldrh	r3, [r3, #4]
 8003318:	f245 3210 	movw	r2, #21264	; 0x5310
 800331c:	4293      	cmp	r3, r2
 800331e:	d00c      	beq.n	800333a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8003320:	4b4a      	ldr	r3, [pc, #296]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003322:	889b      	ldrh	r3, [r3, #4]
 8003324:	f245 5210 	movw	r2, #21776	; 0x5510
 8003328:	4293      	cmp	r3, r2
 800332a:	d006      	beq.n	800333a <LCD_Scan_Dir+0xe2>
 800332c:	4b47      	ldr	r3, [pc, #284]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800332e:	889b      	ldrh	r3, [r3, #4]
 8003330:	f641 1263 	movw	r2, #6499	; 0x1963
 8003334:	4293      	cmp	r3, r2
 8003336:	f040 8250 	bne.w	80037da <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	2b07      	cmp	r3, #7
 800333e:	d836      	bhi.n	80033ae <LCD_Scan_Dir+0x156>
 8003340:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <LCD_Scan_Dir+0xf0>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	080033af 	.word	0x080033af
 800334c:	08003369 	.word	0x08003369
 8003350:	08003373 	.word	0x08003373
 8003354:	0800337d 	.word	0x0800337d
 8003358:	08003387 	.word	0x08003387
 800335c:	08003391 	.word	0x08003391
 8003360:	0800339b 	.word	0x0800339b
 8003364:	080033a5 	.word	0x080033a5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336e:	81fb      	strh	r3, [r7, #14]
			break;
 8003370:	e01d      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003378:	81fb      	strh	r3, [r7, #14]
			break;
 800337a:	e018      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003382:	81fb      	strh	r3, [r7, #14]
			break;
 8003384:	e013      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003386:	89fb      	ldrh	r3, [r7, #14]
 8003388:	f043 0320 	orr.w	r3, r3, #32
 800338c:	81fb      	strh	r3, [r7, #14]
			break;
 800338e:	e00e      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003390:	89fb      	ldrh	r3, [r7, #14]
 8003392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003396:	81fb      	strh	r3, [r7, #14]
			break;
 8003398:	e009      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80033a0:	81fb      	strh	r3, [r7, #14]
			break;
 80033a2:	e004      	b.n	80033ae <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80033a4:	89fb      	ldrh	r3, [r7, #14]
 80033a6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80033aa:	81fb      	strh	r3, [r7, #14]
			break;
 80033ac:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	f245 5210 	movw	r2, #21776	; 0x5510
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d103      	bne.n	80033c2 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80033ba:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80033be:	81bb      	strh	r3, [r7, #12]
 80033c0:	e001      	b.n	80033c6 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80033c2:	2336      	movs	r3, #54	; 0x36
 80033c4:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80033c8:	889b      	ldrh	r3, [r3, #4]
 80033ca:	f245 3210 	movw	r2, #21264	; 0x5310
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00f      	beq.n	80033f2 <LCD_Scan_Dir+0x19a>
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80033d4:	889b      	ldrh	r3, [r3, #4]
 80033d6:	f245 5210 	movw	r2, #21776	; 0x5510
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <LCD_Scan_Dir+0x19a>
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80033e0:	889b      	ldrh	r3, [r3, #4]
 80033e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <LCD_Scan_Dir+0x1f4>)
 80033f4:	889b      	ldrh	r3, [r3, #4]
 80033f6:	f646 0204 	movw	r2, #26628	; 0x6804
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d103      	bne.n	8003406 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003406:	89fa      	ldrh	r2, [r7, #14]
 8003408:	89bb      	ldrh	r3, [r7, #12]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fc11 	bl	8002c34 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003414:	889b      	ldrh	r3, [r3, #4]
 8003416:	f641 1263 	movw	r2, #6499	; 0x1963
 800341a:	4293      	cmp	r3, r2
 800341c:	d028      	beq.n	8003470 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800342e:	885b      	ldrh	r3, [r3, #2]
 8003430:	429a      	cmp	r2, r3
 8003432:	d21d      	bcs.n	8003470 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <LCD_Scan_Dir+0x1f4>)
 800343c:	885a      	ldrh	r2, [r3, #2]
 800343e:	4b03      	ldr	r3, [pc, #12]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003440:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003442:	4a02      	ldr	r2, [pc, #8]	; (800344c <LCD_Scan_Dir+0x1f4>)
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	8053      	strh	r3, [r2, #2]
 8003448:	e012      	b.n	8003470 <LCD_Scan_Dir+0x218>
 800344a:	bf00      	nop
 800344c:	200004ac 	.word	0x200004ac
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8003450:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	4b7e      	ldr	r3, [pc, #504]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003456:	885b      	ldrh	r3, [r3, #2]
 8003458:	429a      	cmp	r2, r3
 800345a:	d909      	bls.n	8003470 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800345c:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003462:	4b7b      	ldr	r3, [pc, #492]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003464:	885a      	ldrh	r2, [r3, #2]
 8003466:	4b7a      	ldr	r3, [pc, #488]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003468:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800346a:	4a79      	ldr	r2, [pc, #484]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 800346c:	897b      	ldrh	r3, [r7, #10]
 800346e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8003470:	4b77      	ldr	r3, [pc, #476]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003472:	889b      	ldrh	r3, [r3, #4]
 8003474:	f245 5210 	movw	r2, #21776	; 0x5510
 8003478:	4293      	cmp	r3, r2
 800347a:	f040 80ef 	bne.w	800365c <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800347e:	4b74      	ldr	r3, [pc, #464]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003480:	895b      	ldrh	r3, [r3, #10]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fb4a 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003488:	4b72      	ldr	r3, [pc, #456]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800348a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800348e:	611a      	str	r2, [r3, #16]
 8003490:	4b70      	ldr	r3, [pc, #448]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003496:	615a      	str	r2, [r3, #20]
 8003498:	4b6f      	ldr	r3, [pc, #444]	; (8003658 <LCD_Scan_Dir+0x400>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	4b6d      	ldr	r3, [pc, #436]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	615a      	str	r2, [r3, #20]
 80034a4:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 80034b4:	895b      	ldrh	r3, [r3, #10]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fb2e 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c6:	611a      	str	r2, [r3, #16]
 80034c8:	4b62      	ldr	r3, [pc, #392]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	615a      	str	r2, [r3, #20]
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <LCD_Scan_Dir+0x400>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	615a      	str	r2, [r3, #20]
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	611a      	str	r2, [r3, #16]
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 80034ec:	895b      	ldrh	r3, [r3, #10]
 80034ee:	3302      	adds	r3, #2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fb12 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80034f8:	4b56      	ldr	r3, [pc, #344]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80034fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fe:	611a      	str	r2, [r3, #16]
 8003500:	4b54      	ldr	r3, [pc, #336]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003506:	615a      	str	r2, [r3, #20]
 8003508:	4b51      	ldr	r3, [pc, #324]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	3b01      	subs	r3, #1
 800350e:	121a      	asrs	r2, r3, #8
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <LCD_Scan_Dir+0x400>)
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	615a      	str	r2, [r3, #20]
 800351a:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003528:	4b49      	ldr	r3, [pc, #292]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 800352a:	895b      	ldrh	r3, [r3, #10]
 800352c:	3303      	adds	r3, #3
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff faf3 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	4b45      	ldr	r3, [pc, #276]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003544:	615a      	str	r2, [r3, #20]
 8003546:	4b42      	ldr	r3, [pc, #264]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a42      	ldr	r2, [pc, #264]	; (8003658 <LCD_Scan_Dir+0x400>)
 800354e:	b2db      	uxtb	r3, r3
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	615a      	str	r2, [r3, #20]
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003568:	899b      	ldrh	r3, [r3, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fad6 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003576:	611a      	str	r2, [r3, #16]
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357e:	615a      	str	r2, [r3, #20]
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <LCD_Scan_Dir+0x400>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003598:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800359a:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 800359c:	899b      	ldrh	r3, [r3, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff faba 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	611a      	str	r2, [r3, #16]
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b6:	615a      	str	r2, [r3, #20]
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <LCD_Scan_Dir+0x400>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 80035d4:	899b      	ldrh	r3, [r3, #12]
 80035d6:	3302      	adds	r3, #2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fa9e 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	611a      	str	r2, [r3, #16]
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	4b17      	ldr	r3, [pc, #92]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 80035f2:	885b      	ldrh	r3, [r3, #2]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	121a      	asrs	r2, r3, #8
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <LCD_Scan_Dir+0x400>)
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800360a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003612:	899b      	ldrh	r3, [r3, #12]
 8003614:	3303      	adds	r3, #3
 8003616:	b29b      	uxth	r3, r3
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fa7f 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362c:	615a      	str	r2, [r3, #20]
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <LCD_Scan_Dir+0x3f8>)
 8003630:	885b      	ldrh	r3, [r3, #2]
 8003632:	3b01      	subs	r3, #1
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <LCD_Scan_Dir+0x400>)
 8003636:	b2db      	uxtb	r3, r3
 8003638:	60d3      	str	r3, [r2, #12]
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	4b03      	ldr	r3, [pc, #12]	; (8003654 <LCD_Scan_Dir+0x3fc>)
 8003648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800364e:	e10a      	b.n	8003866 <LCD_Scan_Dir+0x60e>
 8003650:	200004ac 	.word	0x200004ac
 8003654:	40011000 	.word	0x40011000
 8003658:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <LCD_Scan_Dir+0x618>)
 800365e:	895b      	ldrh	r3, [r3, #10]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fa5b 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003666:	4b83      	ldr	r3, [pc, #524]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366c:	611a      	str	r2, [r3, #16]
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <LCD_Scan_Dir+0x620>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	4b7d      	ldr	r3, [pc, #500]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	615a      	str	r2, [r3, #20]
 8003682:	4b7c      	ldr	r3, [pc, #496]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	611a      	str	r2, [r3, #16]
 8003688:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003690:	4b78      	ldr	r3, [pc, #480]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003696:	611a      	str	r2, [r3, #16]
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <LCD_Scan_Dir+0x620>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	4b73      	ldr	r3, [pc, #460]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	615a      	str	r2, [r3, #20]
 80036ac:	4b71      	ldr	r3, [pc, #452]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	611a      	str	r2, [r3, #16]
 80036b2:	4b70      	ldr	r3, [pc, #448]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c0:	611a      	str	r2, [r3, #16]
 80036c2:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c8:	615a      	str	r2, [r3, #20]
 80036ca:	4b69      	ldr	r3, [pc, #420]	; (8003870 <LCD_Scan_Dir+0x618>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	121a      	asrs	r2, r3, #8
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <LCD_Scan_Dir+0x620>)
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	615a      	str	r2, [r3, #20]
 80036dc:	4b65      	ldr	r3, [pc, #404]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
 80036e2:	4b64      	ldr	r3, [pc, #400]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80036ea:	4b62      	ldr	r3, [pc, #392]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f0:	611a      	str	r2, [r3, #16]
 80036f2:	4b60      	ldr	r3, [pc, #384]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80036f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f8:	615a      	str	r2, [r3, #20]
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <LCD_Scan_Dir+0x618>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	3b01      	subs	r3, #1
 8003700:	4a5d      	ldr	r2, [pc, #372]	; (8003878 <LCD_Scan_Dir+0x620>)
 8003702:	b2db      	uxtb	r3, r3
 8003704:	60d3      	str	r3, [r2, #12]
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	615a      	str	r2, [r3, #20]
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	611a      	str	r2, [r3, #16]
 8003712:	4b58      	ldr	r3, [pc, #352]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003718:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800371a:	4b55      	ldr	r3, [pc, #340]	; (8003870 <LCD_Scan_Dir+0x618>)
 800371c:	899b      	ldrh	r3, [r3, #12]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f9fc 	bl	8002b1c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	4b51      	ldr	r3, [pc, #324]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003732:	615a      	str	r2, [r3, #20]
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <LCD_Scan_Dir+0x620>)
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	615a      	str	r2, [r3, #20]
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003754:	611a      	str	r2, [r3, #16]
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	615a      	str	r2, [r3, #20]
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <LCD_Scan_Dir+0x620>)
 8003760:	2200      	movs	r2, #0
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	615a      	str	r2, [r3, #20]
 800376a:	4b42      	ldr	r3, [pc, #264]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	611a      	str	r2, [r3, #16]
 8003770:	4b40      	ldr	r3, [pc, #256]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800377a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	615a      	str	r2, [r3, #20]
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <LCD_Scan_Dir+0x618>)
 800378a:	885b      	ldrh	r3, [r3, #2]
 800378c:	3b01      	subs	r3, #1
 800378e:	121a      	asrs	r2, r3, #8
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <LCD_Scan_Dir+0x620>)
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <LCD_Scan_Dir+0x61c>)
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	615a      	str	r2, [r3, #20]
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <LCD_Scan_Dir+0x61c>)
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ae:	611a      	str	r2, [r3, #16]
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b6:	615a      	str	r2, [r3, #20]
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <LCD_Scan_Dir+0x618>)
 80037ba:	885b      	ldrh	r3, [r3, #2]
 80037bc:	3b01      	subs	r3, #1
 80037be:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <LCD_Scan_Dir+0x620>)
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	60d3      	str	r3, [r2, #12]
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <LCD_Scan_Dir+0x61c>)
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80037d8:	e045      	b.n	8003866 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	2b07      	cmp	r3, #7
 80037de:	d836      	bhi.n	800384e <LCD_Scan_Dir+0x5f6>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <LCD_Scan_Dir+0x590>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	08003809 	.word	0x08003809
 80037ec:	08003813 	.word	0x08003813
 80037f0:	0800381d 	.word	0x0800381d
 80037f4:	0800384f 	.word	0x0800384f
 80037f8:	08003827 	.word	0x08003827
 80037fc:	08003831 	.word	0x08003831
 8003800:	0800383b 	.word	0x0800383b
 8003804:	08003845 	.word	0x08003845
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800380e:	81fb      	strh	r3, [r7, #14]
			break;
 8003810:	e01d      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8003812:	89fb      	ldrh	r3, [r7, #14]
 8003814:	f043 0310 	orr.w	r3, r3, #16
 8003818:	81fb      	strh	r3, [r7, #14]
			break;
 800381a:	e018      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800381c:	89fb      	ldrh	r3, [r7, #14]
 800381e:	f043 0320 	orr.w	r3, r3, #32
 8003822:	81fb      	strh	r3, [r7, #14]
			break;
 8003824:	e013      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800382c:	81fb      	strh	r3, [r7, #14]
			break;
 800382e:	e00e      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003836:	81fb      	strh	r3, [r7, #14]
			break;
 8003838:	e009      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	f043 0318 	orr.w	r3, r3, #24
 8003840:	81fb      	strh	r3, [r7, #14]
			break;
 8003842:	e004      	b.n	800384e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	81fb      	strh	r3, [r7, #14]
			break;
 800384c:	bf00      	nop
		}
		dirreg = 0X03;
 800384e:	2303      	movs	r3, #3
 8003850:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003858:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800385a:	89fa      	ldrh	r2, [r7, #14]
 800385c:	89bb      	ldrh	r3, [r7, #12]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f9e7 	bl	8002c34 <LCD_WriteReg>
	}
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200004ac 	.word	0x200004ac
 8003874:	40011000 	.word	0x40011000
 8003878:	40010c00 	.word	0x40010c00

0800387c <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y,uint16_t color) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
 8003886:	460b      	mov	r3, r1
 8003888:	80bb      	strh	r3, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x, y);
 800388e:	88ba      	ldrh	r2, [r7, #4]
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fa13 	bl	8002cc0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 800389a:	f7ff fa05 	bl	8002ca8 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(color); //POINT_COLOR: Color of this point
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <LCD_DrawPoint+0x54>)
 80038a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a4:	611a      	str	r2, [r3, #16]
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <LCD_DrawPoint+0x54>)
 80038a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ac:	615a      	str	r2, [r3, #20]
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <LCD_DrawPoint+0x58>)
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <LCD_DrawPoint+0x54>)
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	615a      	str	r2, [r3, #20]
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <LCD_DrawPoint+0x54>)
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	611a      	str	r2, [r3, #16]
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <LCD_DrawPoint+0x54>)
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	611a      	str	r2, [r3, #16]
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40010c00 	.word	0x40010c00

080038d8 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
 80038e2:	460b      	mov	r3, r1
 80038e4:	80bb      	strh	r3, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80038ea:	4b75      	ldr	r3, [pc, #468]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 80038ec:	889b      	ldrh	r3, [r3, #4]
 80038ee:	f249 3241 	movw	r2, #37697	; 0x9341
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d005      	beq.n	8003902 <LCD_Fast_DrawPoint+0x2a>
 80038f6:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 80038f8:	889b      	ldrh	r3, [r3, #4]
 80038fa:	f245 3210 	movw	r2, #21264	; 0x5310
 80038fe:	4293      	cmp	r3, r2
 8003900:	d164      	bne.n	80039cc <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8003902:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 8003904:	895b      	ldrh	r3, [r3, #10]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f908 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800390e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003912:	611a      	str	r2, [r3, #16]
 8003914:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391a:	615a      	str	r2, [r3, #20]
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29a      	uxth	r2, r3
 8003922:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	615a      	str	r2, [r3, #20]
 800392c:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	611a      	str	r2, [r3, #16]
 8003932:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800393c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	615a      	str	r2, [r3, #20]
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	4a5e      	ldr	r2, [pc, #376]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 800394e:	b2db      	uxtb	r3, r3
 8003950:	60d3      	str	r3, [r2, #12]
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	611a      	str	r2, [r3, #16]
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003964:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 8003968:	899b      	ldrh	r3, [r3, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f8d6 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003970:	4b54      	ldr	r3, [pc, #336]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003976:	611a      	str	r2, [r3, #16]
 8003978:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800397a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397e:	615a      	str	r2, [r3, #20]
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	615a      	str	r2, [r3, #20]
 8003990:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	611a      	str	r2, [r3, #16]
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	88bb      	ldrh	r3, [r7, #4]
 80039b0:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	60d3      	str	r3, [r2, #12]
 80039b6:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	615a      	str	r2, [r3, #20]
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	611a      	str	r2, [r3, #16]
 80039c2:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e1e6      	b.n	8003d9a <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80039cc:	4b3c      	ldr	r3, [pc, #240]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 80039ce:	889b      	ldrh	r3, [r3, #4]
 80039d0:	f245 5210 	movw	r2, #21776	; 0x5510
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d179      	bne.n	8003acc <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80039d8:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 80039da:	895b      	ldrh	r3, [r3, #10]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff f89d 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f0:	615a      	str	r2, [r3, #20]
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	615a      	str	r2, [r3, #20]
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	611a      	str	r2, [r3, #16]
 8003a08:	4b2e      	ldr	r3, [pc, #184]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a0e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 8003a12:	895b      	ldrh	r3, [r3, #10]
 8003a14:	3301      	adds	r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff f87f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2c:	615a      	str	r2, [r3, #20]
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	60d3      	str	r3, [r2, #12]
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	615a      	str	r2, [r3, #20]
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a48:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 8003a4c:	899b      	ldrh	r3, [r3, #12]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f864 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5a:	611a      	str	r2, [r3, #16]
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	615a      	str	r2, [r3, #20]
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a80:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <LCD_Fast_DrawPoint+0x1e8>)
 8003a84:	899b      	ldrh	r3, [r3, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f846 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	88bb      	ldrh	r3, [r7, #4]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <LCD_Fast_DrawPoint+0x1f0>)
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	60d3      	str	r3, [r2, #12]
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	615a      	str	r2, [r3, #20]
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	611a      	str	r2, [r3, #16]
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <LCD_Fast_DrawPoint+0x1ec>)
 8003ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aba:	611a      	str	r2, [r3, #16]
 8003abc:	e16d      	b.n	8003d9a <LCD_Fast_DrawPoint+0x4c2>
 8003abe:	bf00      	nop
 8003ac0:	200004ac 	.word	0x200004ac
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8003acc:	4b68      	ldr	r3, [pc, #416]	; (8003c70 <LCD_Fast_DrawPoint+0x398>)
 8003ace:	889b      	ldrh	r3, [r3, #4]
 8003ad0:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	f040 80d1 	bne.w	8003c7c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <LCD_Fast_DrawPoint+0x398>)
 8003adc:	799b      	ldrb	r3, [r3, #6]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8003ae2:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <LCD_Fast_DrawPoint+0x398>)
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003af0:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <LCD_Fast_DrawPoint+0x398>)
 8003af2:	895b      	ldrh	r3, [r3, #10]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f811 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003afa:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b08:	615a      	str	r2, [r3, #20]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	615a      	str	r2, [r3, #20]
 8003b1a:	4b56      	ldr	r3, [pc, #344]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2e:	611a      	str	r2, [r3, #16]
 8003b30:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	615a      	str	r2, [r3, #20]
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	4a4f      	ldr	r2, [pc, #316]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	615a      	str	r2, [r3, #20]
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	611a      	str	r2, [r3, #16]
 8003b4c:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b5a:	611a      	str	r2, [r3, #16]
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b76:	2280      	movs	r2, #128	; 0x80
 8003b78:	611a      	str	r2, [r3, #16]
 8003b7a:	4b3e      	ldr	r3, [pc, #248]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003b82:	4b3c      	ldr	r3, [pc, #240]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	615a      	str	r2, [r3, #20]
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	4a38      	ldr	r2, [pc, #224]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	60d3      	str	r3, [r2, #12]
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <LCD_Fast_DrawPoint+0x398>)
 8003bb0:	899b      	ldrh	r3, [r3, #12]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe ffb2 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	615a      	str	r2, [r3, #20]
 8003bc8:	88bb      	ldrh	r3, [r7, #4]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	615a      	str	r2, [r3, #20]
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	615a      	str	r2, [r3, #20]
 8003bf6:	88bb      	ldrh	r3, [r7, #4]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	60d3      	str	r3, [r2, #12]
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	615a      	str	r2, [r3, #20]
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c10:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c20:	615a      	str	r2, [r3, #20]
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	615a      	str	r2, [r3, #20]
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	611a      	str	r2, [r3, #16]
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c46:	611a      	str	r2, [r3, #16]
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	88bb      	ldrh	r3, [r7, #4]
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <LCD_Fast_DrawPoint+0x3a0>)
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	60d3      	str	r3, [r2, #12]
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	615a      	str	r2, [r3, #20]
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	611a      	str	r2, [r3, #16]
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <LCD_Fast_DrawPoint+0x39c>)
 8003c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6a:	611a      	str	r2, [r3, #16]
 8003c6c:	e095      	b.n	8003d9a <LCD_Fast_DrawPoint+0x4c2>
 8003c6e:	bf00      	nop
 8003c70:	200004ac 	.word	0x200004ac
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8003c7c:	4b5e      	ldr	r3, [pc, #376]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003c7e:	889b      	ldrh	r3, [r3, #4]
 8003c80:	f646 0204 	movw	r2, #26628	; 0x6804
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d16f      	bne.n	8003d68 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8003c88:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003c8a:	799b      	ldrb	r3, [r3, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003ca0:	895b      	ldrh	r3, [r3, #10]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe ff3a 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003ca8:	4b54      	ldr	r3, [pc, #336]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cae:	611a      	str	r2, [r3, #16]
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb6:	615a      	str	r2, [r3, #20]
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003cd6:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce4:	615a      	str	r2, [r3, #20]
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	4a45      	ldr	r2, [pc, #276]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	60d3      	str	r3, [r2, #12]
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	615a      	str	r2, [r3, #20]
 8003cf4:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003d04:	899b      	ldrh	r3, [r3, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe ff08 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	88bb      	ldrh	r3, [r7, #4]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	615a      	str	r2, [r3, #20]
 8003d2c:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	615a      	str	r2, [r3, #20]
 8003d4a:	88bb      	ldrh	r3, [r7, #4]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	60d3      	str	r3, [r2, #12]
 8003d52:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	615a      	str	r2, [r3, #20]
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	611a      	str	r2, [r3, #16]
 8003d66:	e018      	b.n	8003d9a <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003d6a:	799b      	ldrb	r3, [r3, #6]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003d72:	881a      	ldrh	r2, [r3, #0]
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003d80:	895b      	ldrh	r3, [r3, #10]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe ff54 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003d8e:	899b      	ldrh	r3, [r3, #12]
 8003d90:	88ba      	ldrh	r2, [r7, #4]
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe ff4d 	bl	8002c34 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003da0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8003da2:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da8:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <LCD_Fast_DrawPoint+0x520>)
 8003dac:	891a      	ldrh	r2, [r3, #8]
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003db0:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <LCD_Fast_DrawPoint+0x528>)
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	60d3      	str	r3, [r2, #12]
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	615a      	str	r2, [r3, #20]
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	611a      	str	r2, [r3, #16]
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <LCD_Fast_DrawPoint+0x524>)
 8003dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dee:	611a      	str	r2, [r3, #16]
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200004ac 	.word	0x200004ac
 8003dfc:	40011000 	.word	0x40011000
 8003e00:	40010c00 	.word	0x40010c00
 8003e04:	00000000 	.word	0x00000000

08003e08 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8003e12:	20be      	movs	r0, #190	; 0xbe
 8003e14:	f7fe fe82 	bl	8002b1c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1e:	611a      	str	r2, [r3, #16]
 8003e20:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	615a      	str	r2, [r3, #20]
 8003e28:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	611a      	str	r2, [r3, #16]
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb39 	bl	80004cc <__aeabi_i2d>
 8003e5a:	a339      	add	r3, pc, #228	; (adr r3, 8003f40 <LCD_SSD_BackLightSet+0x138>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fb9e 	bl	80005a0 <__aeabi_dmul>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	4c37      	ldr	r4, [pc, #220]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7fc fe57 	bl	8000b24 <__aeabi_d2uiz>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60e3      	str	r3, [r4, #12]
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	615a      	str	r2, [r3, #20]
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	611a      	str	r2, [r3, #16]
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e94:	611a      	str	r2, [r3, #16]
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	615a      	str	r2, [r3, #20]
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	611a      	str	r2, [r3, #16]
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebe:	611a      	str	r2, [r3, #16]
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec6:	615a      	str	r2, [r3, #20]
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003eca:	22ff      	movs	r2, #255	; 0xff
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	615a      	str	r2, [r3, #20]
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee8:	611a      	str	r2, [r3, #16]
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef0:	615a      	str	r2, [r3, #20]
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	615a      	str	r2, [r3, #20]
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	611a      	str	r2, [r3, #16]
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f12:	611a      	str	r2, [r3, #16]
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1a:	615a      	str	r2, [r3, #20]
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <LCD_SSD_BackLightSet+0x144>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	615a      	str	r2, [r3, #20]
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	611a      	str	r2, [r3, #16]
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <LCD_SSD_BackLightSet+0x140>)
 8003f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f34:	611a      	str	r2, [r3, #16]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	66666666 	.word	0x66666666
 8003f44:	40046666 	.word	0x40046666
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	40010c00 	.word	0x40010c00

08003f50 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d177      	bne.n	8004050 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8003f60:	4b80      	ldr	r3, [pc, #512]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8003f66:	4b7f      	ldr	r3, [pc, #508]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f68:	22f0      	movs	r2, #240	; 0xf0
 8003f6a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8003f6c:	4b7d      	ldr	r3, [pc, #500]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003f74:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f76:	889b      	ldrh	r3, [r3, #4]
 8003f78:	f249 3241 	movw	r2, #37697	; 0x9341
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <LCD_Display_Dir+0x48>
 8003f80:	4b78      	ldr	r3, [pc, #480]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f82:	889b      	ldrh	r3, [r3, #4]
 8003f84:	f646 0204 	movw	r2, #26628	; 0x6804
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d005      	beq.n	8003f98 <LCD_Display_Dir+0x48>
 8003f8c:	4b75      	ldr	r3, [pc, #468]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f8e:	889b      	ldrh	r3, [r3, #4]
 8003f90:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d11e      	bne.n	8003fd6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8003f98:	4b72      	ldr	r3, [pc, #456]	; (8004164 <LCD_Display_Dir+0x214>)
 8003f9a:	222c      	movs	r2, #44	; 0x2c
 8003f9c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003f9e:	4b71      	ldr	r3, [pc, #452]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fa0:	222a      	movs	r2, #42	; 0x2a
 8003fa2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fa6:	222b      	movs	r2, #43	; 0x2b
 8003fa8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003faa:	4b6e      	ldr	r3, [pc, #440]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fac:	889b      	ldrh	r3, [r3, #4]
 8003fae:	f646 0204 	movw	r2, #26628	; 0x6804
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d006      	beq.n	8003fc4 <LCD_Display_Dir+0x74>
 8003fb6:	4b6b      	ldr	r3, [pc, #428]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fb8:	889b      	ldrh	r3, [r3, #4]
 8003fba:	f245 3210 	movw	r2, #21264	; 0x5310
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f040 80c7 	bne.w	8004152 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8003fc4:	4b67      	ldr	r3, [pc, #412]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fca:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003fd2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003fd4:	e0bd      	b.n	8004152 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fd8:	889b      	ldrh	r3, [r3, #4]
 8003fda:	f245 5210 	movw	r2, #21776	; 0x5510
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d114      	bne.n	800400c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8003fe2:	4b60      	ldr	r3, [pc, #384]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fe4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003fe8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003fea:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <LCD_Display_Dir+0x214>)
 8003fec:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003ff0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <LCD_Display_Dir+0x214>)
 8003ff4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003ff8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <LCD_Display_Dir+0x214>)
 8003ffc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004000:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8004002:	4b58      	ldr	r3, [pc, #352]	; (8004164 <LCD_Display_Dir+0x214>)
 8004004:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004008:	805a      	strh	r2, [r3, #2]
 800400a:	e0a3      	b.n	8004154 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800400c:	4b55      	ldr	r3, [pc, #340]	; (8004164 <LCD_Display_Dir+0x214>)
 800400e:	889b      	ldrh	r3, [r3, #4]
 8004010:	f641 1263 	movw	r2, #6499	; 0x1963
 8004014:	4293      	cmp	r3, r2
 8004016:	d111      	bne.n	800403c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004018:	4b52      	ldr	r3, [pc, #328]	; (8004164 <LCD_Display_Dir+0x214>)
 800401a:	222c      	movs	r2, #44	; 0x2c
 800401c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800401e:	4b51      	ldr	r3, [pc, #324]	; (8004164 <LCD_Display_Dir+0x214>)
 8004020:	222b      	movs	r2, #43	; 0x2b
 8004022:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8004024:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <LCD_Display_Dir+0x214>)
 8004026:	222a      	movs	r2, #42	; 0x2a
 8004028:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <LCD_Display_Dir+0x214>)
 800402c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004030:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8004032:	4b4c      	ldr	r3, [pc, #304]	; (8004164 <LCD_Display_Dir+0x214>)
 8004034:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004038:	805a      	strh	r2, [r3, #2]
 800403a:	e08b      	b.n	8004154 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <LCD_Display_Dir+0x214>)
 800403e:	2222      	movs	r2, #34	; 0x22
 8004040:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8004042:	4b48      	ldr	r3, [pc, #288]	; (8004164 <LCD_Display_Dir+0x214>)
 8004044:	2220      	movs	r2, #32
 8004046:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <LCD_Display_Dir+0x214>)
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	819a      	strh	r2, [r3, #12]
 800404e:	e081      	b.n	8004154 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8004050:	4b44      	ldr	r3, [pc, #272]	; (8004164 <LCD_Display_Dir+0x214>)
 8004052:	2201      	movs	r2, #1
 8004054:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <LCD_Display_Dir+0x214>)
 8004058:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800405c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800405e:	4b41      	ldr	r3, [pc, #260]	; (8004164 <LCD_Display_Dir+0x214>)
 8004060:	22f0      	movs	r2, #240	; 0xf0
 8004062:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8004064:	4b3f      	ldr	r3, [pc, #252]	; (8004164 <LCD_Display_Dir+0x214>)
 8004066:	889b      	ldrh	r3, [r3, #4]
 8004068:	f249 3241 	movw	r2, #37697	; 0x9341
 800406c:	4293      	cmp	r3, r2
 800406e:	d005      	beq.n	800407c <LCD_Display_Dir+0x12c>
 8004070:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <LCD_Display_Dir+0x214>)
 8004072:	889b      	ldrh	r3, [r3, #4]
 8004074:	f245 3210 	movw	r2, #21264	; 0x5310
 8004078:	4293      	cmp	r3, r2
 800407a:	d109      	bne.n	8004090 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <LCD_Display_Dir+0x214>)
 800407e:	222c      	movs	r2, #44	; 0x2c
 8004080:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <LCD_Display_Dir+0x214>)
 8004084:	222a      	movs	r2, #42	; 0x2a
 8004086:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <LCD_Display_Dir+0x214>)
 800408a:	222b      	movs	r2, #43	; 0x2b
 800408c:	819a      	strh	r2, [r3, #12]
 800408e:	e04b      	b.n	8004128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8004090:	4b34      	ldr	r3, [pc, #208]	; (8004164 <LCD_Display_Dir+0x214>)
 8004092:	889b      	ldrh	r3, [r3, #4]
 8004094:	f646 0204 	movw	r2, #26628	; 0x6804
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800409c:	4b31      	ldr	r3, [pc, #196]	; (8004164 <LCD_Display_Dir+0x214>)
 800409e:	222c      	movs	r2, #44	; 0x2c
 80040a0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80040a2:	4b30      	ldr	r3, [pc, #192]	; (8004164 <LCD_Display_Dir+0x214>)
 80040a4:	222b      	movs	r2, #43	; 0x2b
 80040a6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <LCD_Display_Dir+0x214>)
 80040aa:	222a      	movs	r2, #42	; 0x2a
 80040ac:	819a      	strh	r2, [r3, #12]
 80040ae:	e03b      	b.n	8004128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <LCD_Display_Dir+0x214>)
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	f245 5210 	movw	r2, #21776	; 0x5510
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d114      	bne.n	80040e6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <LCD_Display_Dir+0x214>)
 80040be:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80040c2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <LCD_Display_Dir+0x214>)
 80040c6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80040ca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <LCD_Display_Dir+0x214>)
 80040ce:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80040d2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <LCD_Display_Dir+0x214>)
 80040d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040da:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <LCD_Display_Dir+0x214>)
 80040de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80040e2:	805a      	strh	r2, [r3, #2]
 80040e4:	e020      	b.n	8004128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <LCD_Display_Dir+0x214>)
 80040e8:	889b      	ldrh	r3, [r3, #4]
 80040ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <LCD_Display_Dir+0x214>)
 80040f4:	222c      	movs	r2, #44	; 0x2c
 80040f6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <LCD_Display_Dir+0x214>)
 80040fa:	222a      	movs	r2, #42	; 0x2a
 80040fc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <LCD_Display_Dir+0x214>)
 8004100:	222b      	movs	r2, #43	; 0x2b
 8004102:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <LCD_Display_Dir+0x214>)
 8004106:	f44f 7248 	mov.w	r2, #800	; 0x320
 800410a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <LCD_Display_Dir+0x214>)
 800410e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004112:	805a      	strh	r2, [r3, #2]
 8004114:	e008      	b.n	8004128 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <LCD_Display_Dir+0x214>)
 8004118:	2222      	movs	r2, #34	; 0x22
 800411a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <LCD_Display_Dir+0x214>)
 800411e:	2221      	movs	r2, #33	; 0x21
 8004120:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <LCD_Display_Dir+0x214>)
 8004124:	2220      	movs	r2, #32
 8004126:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <LCD_Display_Dir+0x214>)
 800412a:	889b      	ldrh	r3, [r3, #4]
 800412c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004130:	4293      	cmp	r3, r2
 8004132:	d005      	beq.n	8004140 <LCD_Display_Dir+0x1f0>
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <LCD_Display_Dir+0x214>)
 8004136:	889b      	ldrh	r3, [r3, #4]
 8004138:	f245 3210 	movw	r2, #21264	; 0x5310
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <LCD_Display_Dir+0x214>)
 8004142:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004146:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <LCD_Display_Dir+0x214>)
 800414a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800414e:	805a      	strh	r2, [r3, #2]
 8004150:	e000      	b.n	8004154 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004152:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8004154:	2000      	movs	r0, #0
 8004156:	f7ff f87f 	bl	8003258 <LCD_Scan_Dir>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200004ac 	.word	0x200004ac

08004168 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 800416e:	4b90      	ldr	r3, [pc, #576]	; (80043b0 <LCD_Init+0x248>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	4a8f      	ldr	r2, [pc, #572]	; (80043b0 <LCD_Init+0x248>)
 8004174:	f043 0308 	orr.w	r3, r3, #8
 8004178:	6193      	str	r3, [r2, #24]
 800417a:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <LCD_Init+0x248>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8004186:	4b8a      	ldr	r3, [pc, #552]	; (80043b0 <LCD_Init+0x248>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a89      	ldr	r2, [pc, #548]	; (80043b0 <LCD_Init+0x248>)
 800418c:	f043 0310 	orr.w	r3, r3, #16
 8004190:	6193      	str	r3, [r2, #24]
 8004192:	4b87      	ldr	r3, [pc, #540]	; (80043b0 <LCD_Init+0x248>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 800419e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80041a2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80041a4:	2301      	movs	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80041a8:	2301      	movs	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80041ac:	2303      	movs	r3, #3
 80041ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	4619      	mov	r1, r3
 80041b6:	487f      	ldr	r0, [pc, #508]	; (80043b4 <LCD_Init+0x24c>)
 80041b8:	f7fd f8ea 	bl	8001390 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80041bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4619      	mov	r1, r3
 80041c8:	487b      	ldr	r0, [pc, #492]	; (80043b8 <LCD_Init+0x250>)
 80041ca:	f7fd f8e1 	bl	8001390 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80041ce:	2032      	movs	r0, #50	; 0x32
 80041d0:	f7fc ffae 	bl	8001130 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80041d4:	2101      	movs	r1, #1
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fe fd2c 	bl	8002c34 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80041dc:	2032      	movs	r0, #50	; 0x32
 80041de:	f7fc ffa7 	bl	8001130 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7fe fd50 	bl	8002c88 <LCD_ReadReg>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b73      	ldr	r3, [pc, #460]	; (80043bc <LCD_Init+0x254>)
 80041ee:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <LCD_Init+0x254>)
 80041f2:	889b      	ldrh	r3, [r3, #4]
 80041f4:	2bfe      	cmp	r3, #254	; 0xfe
 80041f6:	d90b      	bls.n	8004210 <LCD_Init+0xa8>
 80041f8:	4b70      	ldr	r3, [pc, #448]	; (80043bc <LCD_Init+0x254>)
 80041fa:	889b      	ldrh	r3, [r3, #4]
 80041fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004200:	4293      	cmp	r3, r2
 8004202:	d005      	beq.n	8004210 <LCD_Init+0xa8>
 8004204:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <LCD_Init+0x254>)
 8004206:	889b      	ldrh	r3, [r3, #4]
 8004208:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800420c:	f040 80c8 	bne.w	80043a0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8004210:	20d3      	movs	r0, #211	; 0xd3
 8004212:	f7fe fc83 	bl	8002b1c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8004216:	f7fe fcc9 	bl	8002bac <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800421a:	f7fe fcc7 	bl	8002bac <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800421e:	f7fe fcc5 	bl	8002bac <LCD_RD_DATA>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <LCD_Init+0x254>)
 8004228:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800422a:	4b64      	ldr	r3, [pc, #400]	; (80043bc <LCD_Init+0x254>)
 800422c:	889b      	ldrh	r3, [r3, #4]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b62      	ldr	r3, [pc, #392]	; (80043bc <LCD_Init+0x254>)
 8004234:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8004236:	f7fe fcb9 	bl	8002bac <LCD_RD_DATA>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <LCD_Init+0x254>)
 8004240:	889b      	ldrh	r3, [r3, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	b29a      	uxth	r2, r3
 8004246:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <LCD_Init+0x254>)
 8004248:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <LCD_Init+0x254>)
 800424c:	889b      	ldrh	r3, [r3, #4]
 800424e:	f249 3241 	movw	r2, #37697	; 0x9341
 8004252:	4293      	cmp	r3, r2
 8004254:	f000 80a4 	beq.w	80043a0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004258:	20bf      	movs	r0, #191	; 0xbf
 800425a:	f7fe fc5f 	bl	8002b1c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800425e:	f7fe fca5 	bl	8002bac <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8004262:	f7fe fca3 	bl	8002bac <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8004266:	f7fe fca1 	bl	8002bac <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800426a:	f7fe fc9f 	bl	8002bac <LCD_RD_DATA>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	4b52      	ldr	r3, [pc, #328]	; (80043bc <LCD_Init+0x254>)
 8004274:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8004276:	4b51      	ldr	r3, [pc, #324]	; (80043bc <LCD_Init+0x254>)
 8004278:	889b      	ldrh	r3, [r3, #4]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b29a      	uxth	r2, r3
 800427e:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <LCD_Init+0x254>)
 8004280:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8004282:	f7fe fc93 	bl	8002bac <LCD_RD_DATA>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <LCD_Init+0x254>)
 800428c:	889b      	ldrh	r3, [r3, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	b29a      	uxth	r2, r3
 8004292:	4b4a      	ldr	r3, [pc, #296]	; (80043bc <LCD_Init+0x254>)
 8004294:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <LCD_Init+0x254>)
 8004298:	889b      	ldrh	r3, [r3, #4]
 800429a:	f646 0204 	movw	r2, #26628	; 0x6804
 800429e:	4293      	cmp	r3, r2
 80042a0:	d07e      	beq.n	80043a0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80042a2:	20d4      	movs	r0, #212	; 0xd4
 80042a4:	f7fe fc3a 	bl	8002b1c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80042a8:	f7fe fc80 	bl	8002bac <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80042ac:	f7fe fc7e 	bl	8002bac <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80042b0:	f7fe fc7c 	bl	8002bac <LCD_RD_DATA>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <LCD_Init+0x254>)
 80042ba:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <LCD_Init+0x254>)
 80042be:	889b      	ldrh	r3, [r3, #4]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <LCD_Init+0x254>)
 80042c6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80042c8:	f7fe fc70 	bl	8002bac <LCD_RD_DATA>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <LCD_Init+0x254>)
 80042d2:	889b      	ldrh	r3, [r3, #4]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	4b38      	ldr	r3, [pc, #224]	; (80043bc <LCD_Init+0x254>)
 80042da:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <LCD_Init+0x254>)
 80042de:	889b      	ldrh	r3, [r3, #4]
 80042e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d05b      	beq.n	80043a0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80042e8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80042ec:	f7fe fc16 	bl	8002b1c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80042f0:	f7fe fc5c 	bl	8002bac <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80042f4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80042f8:	f7fe fc10 	bl	8002b1c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80042fc:	f7fe fc56 	bl	8002bac <LCD_RD_DATA>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <LCD_Init+0x254>)
 8004306:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <LCD_Init+0x254>)
 800430a:	889b      	ldrh	r3, [r3, #4]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	b29a      	uxth	r2, r3
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <LCD_Init+0x254>)
 8004312:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8004314:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004318:	f7fe fc00 	bl	8002b1c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800431c:	f7fe fc46 	bl	8002bac <LCD_RD_DATA>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <LCD_Init+0x254>)
 8004326:	889b      	ldrh	r3, [r3, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b23      	ldr	r3, [pc, #140]	; (80043bc <LCD_Init+0x254>)
 800432e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004330:	4b22      	ldr	r3, [pc, #136]	; (80043bc <LCD_Init+0x254>)
 8004332:	889b      	ldrh	r3, [r3, #4]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d103      	bne.n	8004342 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <LCD_Init+0x254>)
 800433c:	f245 5210 	movw	r2, #21776	; 0x5510
 8004340:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <LCD_Init+0x254>)
 8004344:	889b      	ldrh	r3, [r3, #4]
 8004346:	f245 5210 	movw	r2, #21776	; 0x5510
 800434a:	4293      	cmp	r3, r2
 800434c:	d028      	beq.n	80043a0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800434e:	20a1      	movs	r0, #161	; 0xa1
 8004350:	f7fe fbe4 	bl	8002b1c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8004354:	f7fe fc2a 	bl	8002bac <LCD_RD_DATA>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <LCD_Init+0x254>)
 800435e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004360:	f7fe fc24 	bl	8002bac <LCD_RD_DATA>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <LCD_Init+0x254>)
 800436a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <LCD_Init+0x254>)
 800436e:	889b      	ldrh	r3, [r3, #4]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <LCD_Init+0x254>)
 8004376:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004378:	f7fe fc18 	bl	8002bac <LCD_RD_DATA>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <LCD_Init+0x254>)
 8004382:	889b      	ldrh	r3, [r3, #4]
 8004384:	4313      	orrs	r3, r2
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <LCD_Init+0x254>)
 800438a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <LCD_Init+0x254>)
 800438e:	889b      	ldrh	r3, [r3, #4]
 8004390:	f245 7261 	movw	r2, #22369	; 0x5761
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <LCD_Init+0x254>)
 800439a:	f641 1263 	movw	r2, #6499	; 0x1963
 800439e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <LCD_Init+0x254>)
 80043a2:	889b      	ldrh	r3, [r3, #4]
 80043a4:	f249 3241 	movw	r2, #37697	; 0x9341
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f040 811f 	bne.w	80045ec <LCD_Init+0x484>
 80043ae:	e007      	b.n	80043c0 <LCD_Init+0x258>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40011000 	.word	0x40011000
 80043b8:	40010c00 	.word	0x40010c00
 80043bc:	200004ac 	.word	0x200004ac
			{
		LCD_WR_REG(0xCF);
 80043c0:	20cf      	movs	r0, #207	; 0xcf
 80043c2:	f7fe fbab 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7fe fbcc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80043cc:	20c1      	movs	r0, #193	; 0xc1
 80043ce:	f7fe fbc9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80043d2:	2030      	movs	r0, #48	; 0x30
 80043d4:	f7fe fbc6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80043d8:	20ed      	movs	r0, #237	; 0xed
 80043da:	f7fe fb9f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80043de:	2064      	movs	r0, #100	; 0x64
 80043e0:	f7fe fbc0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80043e4:	2003      	movs	r0, #3
 80043e6:	f7fe fbbd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80043ea:	2012      	movs	r0, #18
 80043ec:	f7fe fbba 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80043f0:	2081      	movs	r0, #129	; 0x81
 80043f2:	f7fe fbb7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80043f6:	20e8      	movs	r0, #232	; 0xe8
 80043f8:	f7fe fb90 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80043fc:	2085      	movs	r0, #133	; 0x85
 80043fe:	f7fe fbb1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004402:	2010      	movs	r0, #16
 8004404:	f7fe fbae 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004408:	207a      	movs	r0, #122	; 0x7a
 800440a:	f7fe fbab 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800440e:	20cb      	movs	r0, #203	; 0xcb
 8004410:	f7fe fb84 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8004414:	2039      	movs	r0, #57	; 0x39
 8004416:	f7fe fba5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800441a:	202c      	movs	r0, #44	; 0x2c
 800441c:	f7fe fba2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fe fb9f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004426:	2034      	movs	r0, #52	; 0x34
 8004428:	f7fe fb9c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800442c:	2002      	movs	r0, #2
 800442e:	f7fe fb99 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8004432:	20f7      	movs	r0, #247	; 0xf7
 8004434:	f7fe fb72 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004438:	2020      	movs	r0, #32
 800443a:	f7fe fb93 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800443e:	20ea      	movs	r0, #234	; 0xea
 8004440:	f7fe fb6c 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004444:	2000      	movs	r0, #0
 8004446:	f7fe fb8d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800444a:	2000      	movs	r0, #0
 800444c:	f7fe fb8a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004450:	20c0      	movs	r0, #192	; 0xc0
 8004452:	f7fe fb63 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8004456:	201b      	movs	r0, #27
 8004458:	f7fe fb84 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800445c:	20c1      	movs	r0, #193	; 0xc1
 800445e:	f7fe fb5d 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8004462:	2001      	movs	r0, #1
 8004464:	f7fe fb7e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004468:	20c5      	movs	r0, #197	; 0xc5
 800446a:	f7fe fb57 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800446e:	2030      	movs	r0, #48	; 0x30
 8004470:	f7fe fb78 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f7fe fb75 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800447a:	20c7      	movs	r0, #199	; 0xc7
 800447c:	f7fe fb4e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004480:	20b7      	movs	r0, #183	; 0xb7
 8004482:	f7fe fb6f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8004486:	2036      	movs	r0, #54	; 0x36
 8004488:	f7fe fb48 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800448c:	2048      	movs	r0, #72	; 0x48
 800448e:	f7fe fb69 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8004492:	203a      	movs	r0, #58	; 0x3a
 8004494:	f7fe fb42 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004498:	2055      	movs	r0, #85	; 0x55
 800449a:	f7fe fb63 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800449e:	20b1      	movs	r0, #177	; 0xb1
 80044a0:	f7fe fb3c 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7fe fb5d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80044aa:	201a      	movs	r0, #26
 80044ac:	f7fe fb5a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80044b0:	20b6      	movs	r0, #182	; 0xb6
 80044b2:	f7fe fb33 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80044b6:	200a      	movs	r0, #10
 80044b8:	f7fe fb54 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80044bc:	20a2      	movs	r0, #162	; 0xa2
 80044be:	f7fe fb51 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80044c2:	20f2      	movs	r0, #242	; 0xf2
 80044c4:	f7fe fb2a 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fe fb4b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80044ce:	2026      	movs	r0, #38	; 0x26
 80044d0:	f7fe fb24 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80044d4:	2001      	movs	r0, #1
 80044d6:	f7fe fb45 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80044da:	20e0      	movs	r0, #224	; 0xe0
 80044dc:	f7fe fb1e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80044e0:	200f      	movs	r0, #15
 80044e2:	f7fe fb3f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80044e6:	202a      	movs	r0, #42	; 0x2a
 80044e8:	f7fe fb3c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80044ec:	2028      	movs	r0, #40	; 0x28
 80044ee:	f7fe fb39 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80044f2:	2008      	movs	r0, #8
 80044f4:	f7fe fb36 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80044f8:	200e      	movs	r0, #14
 80044fa:	f7fe fb33 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80044fe:	2008      	movs	r0, #8
 8004500:	f7fe fb30 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004504:	2054      	movs	r0, #84	; 0x54
 8004506:	f7fe fb2d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800450a:	20a9      	movs	r0, #169	; 0xa9
 800450c:	f7fe fb2a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004510:	2043      	movs	r0, #67	; 0x43
 8004512:	f7fe fb27 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8004516:	200a      	movs	r0, #10
 8004518:	f7fe fb24 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800451c:	200f      	movs	r0, #15
 800451e:	f7fe fb21 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004522:	2000      	movs	r0, #0
 8004524:	f7fe fb1e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004528:	2000      	movs	r0, #0
 800452a:	f7fe fb1b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800452e:	2000      	movs	r0, #0
 8004530:	f7fe fb18 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004534:	2000      	movs	r0, #0
 8004536:	f7fe fb15 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800453a:	20e1      	movs	r0, #225	; 0xe1
 800453c:	f7fe faee 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004540:	2000      	movs	r0, #0
 8004542:	f7fe fb0f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8004546:	2015      	movs	r0, #21
 8004548:	f7fe fb0c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800454c:	2017      	movs	r0, #23
 800454e:	f7fe fb09 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004552:	2007      	movs	r0, #7
 8004554:	f7fe fb06 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004558:	2011      	movs	r0, #17
 800455a:	f7fe fb03 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800455e:	2006      	movs	r0, #6
 8004560:	f7fe fb00 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004564:	202b      	movs	r0, #43	; 0x2b
 8004566:	f7fe fafd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800456a:	2056      	movs	r0, #86	; 0x56
 800456c:	f7fe fafa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004570:	203c      	movs	r0, #60	; 0x3c
 8004572:	f7fe faf7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004576:	2005      	movs	r0, #5
 8004578:	f7fe faf4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800457c:	2010      	movs	r0, #16
 800457e:	f7fe faf1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004582:	200f      	movs	r0, #15
 8004584:	f7fe faee 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004588:	203f      	movs	r0, #63	; 0x3f
 800458a:	f7fe faeb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800458e:	203f      	movs	r0, #63	; 0x3f
 8004590:	f7fe fae8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004594:	200f      	movs	r0, #15
 8004596:	f7fe fae5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800459a:	202b      	movs	r0, #43	; 0x2b
 800459c:	f7fe fabe 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fe fadf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7fe fadc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80045ac:	2001      	movs	r0, #1
 80045ae:	f7fe fad9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80045b2:	203f      	movs	r0, #63	; 0x3f
 80045b4:	f7fe fad6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80045b8:	202a      	movs	r0, #42	; 0x2a
 80045ba:	f7fe faaf 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80045be:	2000      	movs	r0, #0
 80045c0:	f7fe fad0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fe facd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fe faca 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80045d0:	20ef      	movs	r0, #239	; 0xef
 80045d2:	f7fe fac7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80045d6:	2011      	movs	r0, #17
 80045d8:	f7fe faa0 	bl	8002b1c <LCD_WR_REG>
		HAL_Delay(120);
 80045dc:	2078      	movs	r0, #120	; 0x78
 80045de:	f7fc fda7 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80045e2:	2029      	movs	r0, #41	; 0x29
 80045e4:	f7fe fa9a 	bl	8002b1c <LCD_WR_REG>
 80045e8:	f003 bcd8 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80045ec:	4b58      	ldr	r3, [pc, #352]	; (8004750 <LCD_Init+0x5e8>)
 80045ee:	889b      	ldrh	r3, [r3, #4]
 80045f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80045f4:	4293      	cmp	r3, r2
 80045f6:	f040 80ad 	bne.w	8004754 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80045fa:	2011      	movs	r0, #17
 80045fc:	f7fe fa8e 	bl	8002b1c <LCD_WR_REG>
		HAL_Delay(20);
 8004600:	2014      	movs	r0, #20
 8004602:	f7fc fd95 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004606:	20d0      	movs	r0, #208	; 0xd0
 8004608:	f7fe fa88 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800460c:	2007      	movs	r0, #7
 800460e:	f7fe faa9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004612:	2042      	movs	r0, #66	; 0x42
 8004614:	f7fe faa6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004618:	201d      	movs	r0, #29
 800461a:	f7fe faa3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800461e:	20d1      	movs	r0, #209	; 0xd1
 8004620:	f7fe fa7c 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004624:	2000      	movs	r0, #0
 8004626:	f7fe fa9d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800462a:	201a      	movs	r0, #26
 800462c:	f7fe fa9a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004630:	2009      	movs	r0, #9
 8004632:	f7fe fa97 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004636:	20d2      	movs	r0, #210	; 0xd2
 8004638:	f7fe fa70 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800463c:	2001      	movs	r0, #1
 800463e:	f7fe fa91 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8004642:	2022      	movs	r0, #34	; 0x22
 8004644:	f7fe fa8e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004648:	20c0      	movs	r0, #192	; 0xc0
 800464a:	f7fe fa67 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800464e:	2010      	movs	r0, #16
 8004650:	f7fe fa88 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004654:	203b      	movs	r0, #59	; 0x3b
 8004656:	f7fe fa85 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800465a:	2000      	movs	r0, #0
 800465c:	f7fe fa82 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004660:	2002      	movs	r0, #2
 8004662:	f7fe fa7f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004666:	2011      	movs	r0, #17
 8004668:	f7fe fa7c 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800466c:	20c5      	movs	r0, #197	; 0xc5
 800466e:	f7fe fa55 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8004672:	2003      	movs	r0, #3
 8004674:	f7fe fa76 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004678:	20c8      	movs	r0, #200	; 0xc8
 800467a:	f7fe fa4f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fe fa70 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004684:	2025      	movs	r0, #37	; 0x25
 8004686:	f7fe fa6d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800468a:	2021      	movs	r0, #33	; 0x21
 800468c:	f7fe fa6a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8004690:	2005      	movs	r0, #5
 8004692:	f7fe fa67 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fe fa64 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800469c:	200a      	movs	r0, #10
 800469e:	f7fe fa61 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80046a2:	2065      	movs	r0, #101	; 0x65
 80046a4:	f7fe fa5e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80046a8:	2025      	movs	r0, #37	; 0x25
 80046aa:	f7fe fa5b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80046ae:	2077      	movs	r0, #119	; 0x77
 80046b0:	f7fe fa58 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80046b4:	2050      	movs	r0, #80	; 0x50
 80046b6:	f7fe fa55 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80046ba:	200f      	movs	r0, #15
 80046bc:	f7fe fa52 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fe fa4f 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80046c6:	20f8      	movs	r0, #248	; 0xf8
 80046c8:	f7fe fa28 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80046cc:	2001      	movs	r0, #1
 80046ce:	f7fe fa49 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80046d2:	20fe      	movs	r0, #254	; 0xfe
 80046d4:	f7fe fa22 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80046d8:	2000      	movs	r0, #0
 80046da:	f7fe fa43 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80046de:	2002      	movs	r0, #2
 80046e0:	f7fe fa40 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80046e4:	2020      	movs	r0, #32
 80046e6:	f7fe fa19 	bl	8002b1c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80046ea:	2036      	movs	r0, #54	; 0x36
 80046ec:	f7fe fa16 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80046f0:	2008      	movs	r0, #8
 80046f2:	f7fe fa37 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80046f6:	203a      	movs	r0, #58	; 0x3a
 80046f8:	f7fe fa10 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80046fc:	2055      	movs	r0, #85	; 0x55
 80046fe:	f7fe fa31 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8004702:	202b      	movs	r0, #43	; 0x2b
 8004704:	f7fe fa0a 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fa2b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe fa28 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004714:	2001      	movs	r0, #1
 8004716:	f7fe fa25 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800471a:	203f      	movs	r0, #63	; 0x3f
 800471c:	f7fe fa22 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004720:	202a      	movs	r0, #42	; 0x2a
 8004722:	f7fe f9fb 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004726:	2000      	movs	r0, #0
 8004728:	f7fe fa1c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800472c:	2000      	movs	r0, #0
 800472e:	f7fe fa19 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004732:	2001      	movs	r0, #1
 8004734:	f7fe fa16 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004738:	20df      	movs	r0, #223	; 0xdf
 800473a:	f7fe fa13 	bl	8002b64 <LCD_WR_DATAX>
		HAL_Delay(120);
 800473e:	2078      	movs	r0, #120	; 0x78
 8004740:	f7fc fcf6 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0X29);
 8004744:	2029      	movs	r0, #41	; 0x29
 8004746:	f7fe f9e9 	bl	8002b1c <LCD_WR_REG>
 800474a:	f003 bc27 	b.w	8007f9c <LCD_Init+0x3e34>
 800474e:	bf00      	nop
 8004750:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0x5310) {
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <LCD_Init+0x5fc>)
 8004756:	889b      	ldrh	r3, [r3, #4]
 8004758:	f245 3210 	movw	r2, #21264	; 0x5310
 800475c:	4293      	cmp	r3, r2
 800475e:	f040 877c 	bne.w	800565a <LCD_Init+0x14f2>
 8004762:	e001      	b.n	8004768 <LCD_Init+0x600>
 8004764:	200004ac 	.word	0x200004ac
		LCD_WR_REG(0xED);
 8004768:	20ed      	movs	r0, #237	; 0xed
 800476a:	f7fe f9d7 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800476e:	2001      	movs	r0, #1
 8004770:	f7fe f9f8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8004774:	20fe      	movs	r0, #254	; 0xfe
 8004776:	f7fe f9f5 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800477a:	20ee      	movs	r0, #238	; 0xee
 800477c:	f7fe f9ce 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004780:	20de      	movs	r0, #222	; 0xde
 8004782:	f7fe f9ef 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004786:	2021      	movs	r0, #33	; 0x21
 8004788:	f7fe f9ec 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800478c:	20f1      	movs	r0, #241	; 0xf1
 800478e:	f7fe f9c5 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004792:	2001      	movs	r0, #1
 8004794:	f7fe f9e6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8004798:	20df      	movs	r0, #223	; 0xdf
 800479a:	f7fe f9bf 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800479e:	2010      	movs	r0, #16
 80047a0:	f7fe f9e0 	bl	8002b64 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80047a4:	20c4      	movs	r0, #196	; 0xc4
 80047a6:	f7fe f9b9 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80047aa:	208f      	movs	r0, #143	; 0x8f
 80047ac:	f7fe f9da 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80047b0:	20c6      	movs	r0, #198	; 0xc6
 80047b2:	f7fe f9b3 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fe f9d4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80047bc:	20e2      	movs	r0, #226	; 0xe2
 80047be:	f7fe f9d1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80047c2:	20e2      	movs	r0, #226	; 0xe2
 80047c4:	f7fe f9ce 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80047c8:	20e2      	movs	r0, #226	; 0xe2
 80047ca:	f7fe f9cb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80047ce:	20bf      	movs	r0, #191	; 0xbf
 80047d0:	f7fe f9a4 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80047d4:	20aa      	movs	r0, #170	; 0xaa
 80047d6:	f7fe f9c5 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80047da:	20b0      	movs	r0, #176	; 0xb0
 80047dc:	f7fe f99e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80047e0:	200d      	movs	r0, #13
 80047e2:	f7fe f9bf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fe f9bc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80047ec:	200d      	movs	r0, #13
 80047ee:	f7fe f9b9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7fe f9b6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80047f8:	2011      	movs	r0, #17
 80047fa:	f7fe f9b3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fe f9b0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8004804:	2019      	movs	r0, #25
 8004806:	f7fe f9ad 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fe f9aa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004810:	2021      	movs	r0, #33	; 0x21
 8004812:	f7fe f9a7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fe f9a4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800481c:	202d      	movs	r0, #45	; 0x2d
 800481e:	f7fe f9a1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fe f99e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004828:	203d      	movs	r0, #61	; 0x3d
 800482a:	f7fe f99b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800482e:	2000      	movs	r0, #0
 8004830:	f7fe f998 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004834:	205d      	movs	r0, #93	; 0x5d
 8004836:	f7fe f995 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800483a:	2000      	movs	r0, #0
 800483c:	f7fe f992 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004840:	205d      	movs	r0, #93	; 0x5d
 8004842:	f7fe f98f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004846:	2000      	movs	r0, #0
 8004848:	f7fe f98c 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800484c:	20b1      	movs	r0, #177	; 0xb1
 800484e:	f7fe f965 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8004852:	2080      	movs	r0, #128	; 0x80
 8004854:	f7fe f986 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004858:	2000      	movs	r0, #0
 800485a:	f7fe f983 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800485e:	208b      	movs	r0, #139	; 0x8b
 8004860:	f7fe f980 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fe f97d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800486a:	2096      	movs	r0, #150	; 0x96
 800486c:	f7fe f97a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004870:	2000      	movs	r0, #0
 8004872:	f7fe f977 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8004876:	20b2      	movs	r0, #178	; 0xb2
 8004878:	f7fe f950 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800487c:	2000      	movs	r0, #0
 800487e:	f7fe f971 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004882:	2000      	movs	r0, #0
 8004884:	f7fe f96e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004888:	2002      	movs	r0, #2
 800488a:	f7fe f96b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800488e:	2000      	movs	r0, #0
 8004890:	f7fe f968 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004894:	2003      	movs	r0, #3
 8004896:	f7fe f965 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800489a:	2000      	movs	r0, #0
 800489c:	f7fe f962 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80048a0:	20b3      	movs	r0, #179	; 0xb3
 80048a2:	f7fe f93b 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80048a6:	2000      	movs	r0, #0
 80048a8:	f7fe f95c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fe f959 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f7fe f956 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7fe f953 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048be:	2000      	movs	r0, #0
 80048c0:	f7fe f950 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fe f94d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7fe f94a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7fe f947 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7fe f944 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fe f941 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e2:	2000      	movs	r0, #0
 80048e4:	f7fe f93e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7fe f93b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7fe f938 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fe f935 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048fa:	2000      	movs	r0, #0
 80048fc:	f7fe f932 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004900:	2000      	movs	r0, #0
 8004902:	f7fe f92f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004906:	2000      	movs	r0, #0
 8004908:	f7fe f92c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800490c:	2000      	movs	r0, #0
 800490e:	f7fe f929 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004912:	2000      	movs	r0, #0
 8004914:	f7fe f926 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004918:	2000      	movs	r0, #0
 800491a:	f7fe f923 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800491e:	2000      	movs	r0, #0
 8004920:	f7fe f920 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004924:	2000      	movs	r0, #0
 8004926:	f7fe f91d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800492a:	2000      	movs	r0, #0
 800492c:	f7fe f91a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004930:	2000      	movs	r0, #0
 8004932:	f7fe f917 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8004936:	20b4      	movs	r0, #180	; 0xb4
 8004938:	f7fe f8f0 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800493c:	208b      	movs	r0, #139	; 0x8b
 800493e:	f7fe f911 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fe f90e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004948:	2096      	movs	r0, #150	; 0x96
 800494a:	f7fe f90b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800494e:	2000      	movs	r0, #0
 8004950:	f7fe f908 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8004954:	20a1      	movs	r0, #161	; 0xa1
 8004956:	f7fe f905 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495a:	2000      	movs	r0, #0
 800495c:	f7fe f902 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004960:	20b5      	movs	r0, #181	; 0xb5
 8004962:	f7fe f8db 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8004966:	2002      	movs	r0, #2
 8004968:	f7fe f8fc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800496c:	2000      	movs	r0, #0
 800496e:	f7fe f8f9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004972:	2003      	movs	r0, #3
 8004974:	f7fe f8f6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004978:	2000      	movs	r0, #0
 800497a:	f7fe f8f3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800497e:	2004      	movs	r0, #4
 8004980:	f7fe f8f0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004984:	2000      	movs	r0, #0
 8004986:	f7fe f8ed 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800498a:	20b6      	movs	r0, #182	; 0xb6
 800498c:	f7fe f8c6 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004990:	2000      	movs	r0, #0
 8004992:	f7fe f8e7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004996:	2000      	movs	r0, #0
 8004998:	f7fe f8e4 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800499c:	20b7      	movs	r0, #183	; 0xb7
 800499e:	f7fe f8bd 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7fe f8de 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7fe f8db 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80049ae:	203f      	movs	r0, #63	; 0x3f
 80049b0:	f7fe f8d8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fe f8d5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80049ba:	205e      	movs	r0, #94	; 0x5e
 80049bc:	f7fe f8d2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049c0:	2000      	movs	r0, #0
 80049c2:	f7fe f8cf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80049c6:	2064      	movs	r0, #100	; 0x64
 80049c8:	f7fe f8cc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7fe f8c9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80049d2:	208c      	movs	r0, #140	; 0x8c
 80049d4:	f7fe f8c6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d8:	2000      	movs	r0, #0
 80049da:	f7fe f8c3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80049de:	20ac      	movs	r0, #172	; 0xac
 80049e0:	f7fe f8c0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049e4:	2000      	movs	r0, #0
 80049e6:	f7fe f8bd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80049ea:	20dc      	movs	r0, #220	; 0xdc
 80049ec:	f7fe f8ba 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049f0:	2000      	movs	r0, #0
 80049f2:	f7fe f8b7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80049f6:	2070      	movs	r0, #112	; 0x70
 80049f8:	f7fe f8b4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049fc:	2000      	movs	r0, #0
 80049fe:	f7fe f8b1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8004a02:	2090      	movs	r0, #144	; 0x90
 8004a04:	f7fe f8ae 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f7fe f8ab 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004a0e:	20eb      	movs	r0, #235	; 0xeb
 8004a10:	f7fe f8a8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a14:	2000      	movs	r0, #0
 8004a16:	f7fe f8a5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004a1a:	20dc      	movs	r0, #220	; 0xdc
 8004a1c:	f7fe f8a2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7fe f89f 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8004a26:	20b8      	movs	r0, #184	; 0xb8
 8004a28:	f7fe f878 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fe f899 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a32:	2000      	movs	r0, #0
 8004a34:	f7fe f896 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f7fe f893 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7fe f890 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a44:	2000      	movs	r0, #0
 8004a46:	f7fe f88d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fe f88a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fe f887 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fe f884 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8004a5c:	20ba      	movs	r0, #186	; 0xba
 8004a5e:	f7fe f85d 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8004a62:	2024      	movs	r0, #36	; 0x24
 8004a64:	f7fe f87e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fe f87b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7fe f878 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fe f875 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8004a7a:	20c1      	movs	r0, #193	; 0xc1
 8004a7c:	f7fe f84e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004a80:	2020      	movs	r0, #32
 8004a82:	f7fe f86f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f7fe f86c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004a8c:	2054      	movs	r0, #84	; 0x54
 8004a8e:	f7fe f869 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7fe f866 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8004a98:	20ff      	movs	r0, #255	; 0xff
 8004a9a:	f7fe f863 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f7fe f860 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8004aa4:	20c2      	movs	r0, #194	; 0xc2
 8004aa6:	f7fe f839 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004aaa:	200a      	movs	r0, #10
 8004aac:	f7fe f85a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fe f857 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004ab6:	2004      	movs	r0, #4
 8004ab8:	f7fe f854 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7fe f851 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8004ac2:	20c3      	movs	r0, #195	; 0xc3
 8004ac4:	f7fe f82a 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004ac8:	203c      	movs	r0, #60	; 0x3c
 8004aca:	f7fe f84b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f7fe f848 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8004ad4:	203a      	movs	r0, #58	; 0x3a
 8004ad6:	f7fe f845 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ada:	2000      	movs	r0, #0
 8004adc:	f7fe f842 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004ae0:	2039      	movs	r0, #57	; 0x39
 8004ae2:	f7fe f83f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f7fe f83c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004aec:	2037      	movs	r0, #55	; 0x37
 8004aee:	f7fe f839 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fe f836 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004af8:	203c      	movs	r0, #60	; 0x3c
 8004afa:	f7fe f833 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fe f830 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004b04:	2036      	movs	r0, #54	; 0x36
 8004b06:	f7fe f82d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f7fe f82a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004b10:	2032      	movs	r0, #50	; 0x32
 8004b12:	f7fe f827 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fe f824 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004b1c:	202f      	movs	r0, #47	; 0x2f
 8004b1e:	f7fe f821 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7fe f81e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004b28:	202c      	movs	r0, #44	; 0x2c
 8004b2a:	f7fe f81b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f7fe f818 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004b34:	2029      	movs	r0, #41	; 0x29
 8004b36:	f7fe f815 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7fe f812 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004b40:	2026      	movs	r0, #38	; 0x26
 8004b42:	f7fe f80f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f7fe f80c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004b4c:	2024      	movs	r0, #36	; 0x24
 8004b4e:	f7fe f809 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fe f806 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004b58:	2024      	movs	r0, #36	; 0x24
 8004b5a:	f7fe f803 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f7fe f800 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004b64:	2023      	movs	r0, #35	; 0x23
 8004b66:	f7fd fffd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fd fffa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004b70:	203c      	movs	r0, #60	; 0x3c
 8004b72:	f7fd fff7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f7fd fff4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004b7c:	2036      	movs	r0, #54	; 0x36
 8004b7e:	f7fd fff1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fd ffee 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004b88:	2032      	movs	r0, #50	; 0x32
 8004b8a:	f7fd ffeb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fd ffe8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004b94:	202f      	movs	r0, #47	; 0x2f
 8004b96:	f7fd ffe5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fd ffe2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004ba0:	202c      	movs	r0, #44	; 0x2c
 8004ba2:	f7fd ffdf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fd ffdc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004bac:	2029      	movs	r0, #41	; 0x29
 8004bae:	f7fd ffd9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fd ffd6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004bb8:	2026      	movs	r0, #38	; 0x26
 8004bba:	f7fd ffd3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fd ffd0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004bc4:	2024      	movs	r0, #36	; 0x24
 8004bc6:	f7fd ffcd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fd ffca 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004bd0:	2024      	movs	r0, #36	; 0x24
 8004bd2:	f7fd ffc7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fd ffc4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004bdc:	2023      	movs	r0, #35	; 0x23
 8004bde:	f7fd ffc1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7fd ffbe 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004be8:	20c4      	movs	r0, #196	; 0xc4
 8004bea:	f7fd ff97 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8004bee:	2062      	movs	r0, #98	; 0x62
 8004bf0:	f7fd ffb8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fd ffb5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004bfa:	2005      	movs	r0, #5
 8004bfc:	f7fd ffb2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7fd ffaf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004c06:	2084      	movs	r0, #132	; 0x84
 8004c08:	f7fd ffac 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fd ffa9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8004c12:	20f0      	movs	r0, #240	; 0xf0
 8004c14:	f7fd ffa6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7fd ffa3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004c1e:	2018      	movs	r0, #24
 8004c20:	f7fd ffa0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7fd ff9d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8004c2a:	20a4      	movs	r0, #164	; 0xa4
 8004c2c:	f7fd ff9a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7fd ff97 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004c36:	2018      	movs	r0, #24
 8004c38:	f7fd ff94 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fd ff91 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004c42:	2050      	movs	r0, #80	; 0x50
 8004c44:	f7fd ff8e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7fd ff8b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8004c4e:	200c      	movs	r0, #12
 8004c50:	f7fd ff88 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7fd ff85 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004c5a:	2017      	movs	r0, #23
 8004c5c:	f7fd ff82 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7fd ff7f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8004c66:	2095      	movs	r0, #149	; 0x95
 8004c68:	f7fd ff7c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f7fd ff79 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004c72:	20f3      	movs	r0, #243	; 0xf3
 8004c74:	f7fd ff76 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7fd ff73 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8004c7e:	20e6      	movs	r0, #230	; 0xe6
 8004c80:	f7fd ff70 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fd ff6d 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8004c8a:	20c5      	movs	r0, #197	; 0xc5
 8004c8c:	f7fd ff46 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004c90:	2032      	movs	r0, #50	; 0x32
 8004c92:	f7fd ff67 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c96:	2000      	movs	r0, #0
 8004c98:	f7fd ff64 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004c9c:	2044      	movs	r0, #68	; 0x44
 8004c9e:	f7fd ff61 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fd ff5e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8004ca8:	2065      	movs	r0, #101	; 0x65
 8004caa:	f7fd ff5b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7fd ff58 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004cb4:	2076      	movs	r0, #118	; 0x76
 8004cb6:	f7fd ff55 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cba:	2000      	movs	r0, #0
 8004cbc:	f7fd ff52 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004cc0:	2088      	movs	r0, #136	; 0x88
 8004cc2:	f7fd ff4f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f7fd ff4c 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004ccc:	20c6      	movs	r0, #198	; 0xc6
 8004cce:	f7fd ff25 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004cd2:	2020      	movs	r0, #32
 8004cd4:	f7fd ff46 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7fd ff43 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004cde:	2017      	movs	r0, #23
 8004ce0:	f7fd ff40 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f7fd ff3d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004cea:	2001      	movs	r0, #1
 8004cec:	f7fd ff3a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fd ff37 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8004cf6:	20c7      	movs	r0, #199	; 0xc7
 8004cf8:	f7fd ff10 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fd ff31 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7fd ff2e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7fd ff2b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fd ff28 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8004d14:	20c8      	movs	r0, #200	; 0xc8
 8004d16:	f7fd ff01 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f7fd ff22 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d20:	2000      	movs	r0, #0
 8004d22:	f7fd ff1f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d26:	2000      	movs	r0, #0
 8004d28:	f7fd ff1c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f7fd ff19 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8004d32:	20c9      	movs	r0, #201	; 0xc9
 8004d34:	f7fd fef2 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fd ff13 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f7fd ff10 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fd ff0d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7fd ff0a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7fd ff07 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7fd ff04 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fd ff01 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fd fefe 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f7fd fefb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7fd fef8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7fd fef5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f7fd fef2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7fd feef 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d86:	2000      	movs	r0, #0
 8004d88:	f7fd feec 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fd fee9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d92:	2000      	movs	r0, #0
 8004d94:	f7fd fee6 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8004d98:	20e0      	movs	r0, #224	; 0xe0
 8004d9a:	f7fd febf 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004d9e:	2016      	movs	r0, #22
 8004da0:	f7fd fee0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da4:	2000      	movs	r0, #0
 8004da6:	f7fd fedd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004daa:	201c      	movs	r0, #28
 8004dac:	f7fd feda 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7fd fed7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004db6:	2021      	movs	r0, #33	; 0x21
 8004db8:	f7fd fed4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7fd fed1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004dc2:	2036      	movs	r0, #54	; 0x36
 8004dc4:	f7fd fece 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7fd fecb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8004dce:	2046      	movs	r0, #70	; 0x46
 8004dd0:	f7fd fec8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7fd fec5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004dda:	2052      	movs	r0, #82	; 0x52
 8004ddc:	f7fd fec2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de0:	2000      	movs	r0, #0
 8004de2:	f7fd febf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004de6:	2064      	movs	r0, #100	; 0x64
 8004de8:	f7fd febc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fd feb9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004df2:	207a      	movs	r0, #122	; 0x7a
 8004df4:	f7fd feb6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f7fd feb3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004dfe:	208b      	movs	r0, #139	; 0x8b
 8004e00:	f7fd feb0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fd fead 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004e0a:	2099      	movs	r0, #153	; 0x99
 8004e0c:	f7fd feaa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e10:	2000      	movs	r0, #0
 8004e12:	f7fd fea7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004e16:	20a8      	movs	r0, #168	; 0xa8
 8004e18:	f7fd fea4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fd fea1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004e22:	20b9      	movs	r0, #185	; 0xb9
 8004e24:	f7fd fe9e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7fd fe9b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004e2e:	20c4      	movs	r0, #196	; 0xc4
 8004e30:	f7fd fe98 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e34:	2000      	movs	r0, #0
 8004e36:	f7fd fe95 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004e3a:	20ca      	movs	r0, #202	; 0xca
 8004e3c:	f7fd fe92 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e40:	2000      	movs	r0, #0
 8004e42:	f7fd fe8f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004e46:	20d2      	movs	r0, #210	; 0xd2
 8004e48:	f7fd fe8c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7fd fe89 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8004e52:	20d9      	movs	r0, #217	; 0xd9
 8004e54:	f7fd fe86 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fd fe83 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004e5e:	20e0      	movs	r0, #224	; 0xe0
 8004e60:	f7fd fe80 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fd fe7d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004e6a:	20f3      	movs	r0, #243	; 0xf3
 8004e6c:	f7fd fe7a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7fd fe77 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8004e76:	20e1      	movs	r0, #225	; 0xe1
 8004e78:	f7fd fe50 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004e7c:	2016      	movs	r0, #22
 8004e7e:	f7fd fe71 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e82:	2000      	movs	r0, #0
 8004e84:	f7fd fe6e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004e88:	201c      	movs	r0, #28
 8004e8a:	f7fd fe6b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7fd fe68 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8004e94:	2022      	movs	r0, #34	; 0x22
 8004e96:	f7fd fe65 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fd fe62 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004ea0:	2036      	movs	r0, #54	; 0x36
 8004ea2:	f7fd fe5f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f7fd fe5c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004eac:	2045      	movs	r0, #69	; 0x45
 8004eae:	f7fd fe59 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7fd fe56 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004eb8:	2052      	movs	r0, #82	; 0x52
 8004eba:	f7fd fe53 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fd fe50 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004ec4:	2064      	movs	r0, #100	; 0x64
 8004ec6:	f7fd fe4d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f7fd fe4a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004ed0:	207a      	movs	r0, #122	; 0x7a
 8004ed2:	f7fd fe47 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7fd fe44 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004edc:	208b      	movs	r0, #139	; 0x8b
 8004ede:	f7fd fe41 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7fd fe3e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004ee8:	2099      	movs	r0, #153	; 0x99
 8004eea:	f7fd fe3b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fd fe38 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004ef4:	20a8      	movs	r0, #168	; 0xa8
 8004ef6:	f7fd fe35 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fd fe32 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004f00:	20b9      	movs	r0, #185	; 0xb9
 8004f02:	f7fd fe2f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fd fe2c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004f0c:	20c4      	movs	r0, #196	; 0xc4
 8004f0e:	f7fd fe29 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7fd fe26 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004f18:	20ca      	movs	r0, #202	; 0xca
 8004f1a:	f7fd fe23 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7fd fe20 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004f24:	20d2      	movs	r0, #210	; 0xd2
 8004f26:	f7fd fe1d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f7fd fe1a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004f30:	20d8      	movs	r0, #216	; 0xd8
 8004f32:	f7fd fe17 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fd fe14 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004f3c:	20e0      	movs	r0, #224	; 0xe0
 8004f3e:	f7fd fe11 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7fd fe0e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004f48:	20f3      	movs	r0, #243	; 0xf3
 8004f4a:	f7fd fe0b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f7fd fe08 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8004f54:	20e2      	movs	r0, #226	; 0xe2
 8004f56:	f7fd fde1 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004f5a:	2005      	movs	r0, #5
 8004f5c:	f7fd fe02 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fd fdff 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8004f66:	200b      	movs	r0, #11
 8004f68:	f7fd fdfc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fd fdf9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8004f72:	201b      	movs	r0, #27
 8004f74:	f7fd fdf6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fd fdf3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004f7e:	2034      	movs	r0, #52	; 0x34
 8004f80:	f7fd fdf0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f84:	2000      	movs	r0, #0
 8004f86:	f7fd fded 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004f8a:	2044      	movs	r0, #68	; 0x44
 8004f8c:	f7fd fdea 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fd fde7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8004f96:	204f      	movs	r0, #79	; 0x4f
 8004f98:	f7fd fde4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fd fde1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8004fa2:	2061      	movs	r0, #97	; 0x61
 8004fa4:	f7fd fdde 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7fd fddb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8004fae:	2079      	movs	r0, #121	; 0x79
 8004fb0:	f7fd fdd8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7fd fdd5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004fba:	2088      	movs	r0, #136	; 0x88
 8004fbc:	f7fd fdd2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7fd fdcf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004fc6:	2097      	movs	r0, #151	; 0x97
 8004fc8:	f7fd fdcc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f7fd fdc9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004fd2:	20a6      	movs	r0, #166	; 0xa6
 8004fd4:	f7fd fdc6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7fd fdc3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004fde:	20b7      	movs	r0, #183	; 0xb7
 8004fe0:	f7fd fdc0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fd fdbd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004fea:	20c2      	movs	r0, #194	; 0xc2
 8004fec:	f7fd fdba 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7fd fdb7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004ff6:	20c7      	movs	r0, #199	; 0xc7
 8004ff8:	f7fd fdb4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fd fdb1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8005002:	20d1      	movs	r0, #209	; 0xd1
 8005004:	f7fd fdae 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005008:	2000      	movs	r0, #0
 800500a:	f7fd fdab 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800500e:	20d6      	movs	r0, #214	; 0xd6
 8005010:	f7fd fda8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005014:	2000      	movs	r0, #0
 8005016:	f7fd fda5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800501a:	20dd      	movs	r0, #221	; 0xdd
 800501c:	f7fd fda2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005020:	2000      	movs	r0, #0
 8005022:	f7fd fd9f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005026:	20f3      	movs	r0, #243	; 0xf3
 8005028:	f7fd fd9c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800502c:	2000      	movs	r0, #0
 800502e:	f7fd fd99 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8005032:	20e3      	movs	r0, #227	; 0xe3
 8005034:	f7fd fd72 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005038:	2005      	movs	r0, #5
 800503a:	f7fd fd93 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503e:	2000      	movs	r0, #0
 8005040:	f7fd fd90 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8005044:	200a      	movs	r0, #10
 8005046:	f7fd fd8d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800504a:	2000      	movs	r0, #0
 800504c:	f7fd fd8a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005050:	201c      	movs	r0, #28
 8005052:	f7fd fd87 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005056:	2000      	movs	r0, #0
 8005058:	f7fd fd84 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800505c:	2033      	movs	r0, #51	; 0x33
 800505e:	f7fd fd81 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005062:	2000      	movs	r0, #0
 8005064:	f7fd fd7e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005068:	2044      	movs	r0, #68	; 0x44
 800506a:	f7fd fd7b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800506e:	2000      	movs	r0, #0
 8005070:	f7fd fd78 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005074:	2050      	movs	r0, #80	; 0x50
 8005076:	f7fd fd75 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800507a:	2000      	movs	r0, #0
 800507c:	f7fd fd72 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8005080:	2062      	movs	r0, #98	; 0x62
 8005082:	f7fd fd6f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005086:	2000      	movs	r0, #0
 8005088:	f7fd fd6c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800508c:	2078      	movs	r0, #120	; 0x78
 800508e:	f7fd fd69 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005092:	2000      	movs	r0, #0
 8005094:	f7fd fd66 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005098:	2088      	movs	r0, #136	; 0x88
 800509a:	f7fd fd63 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800509e:	2000      	movs	r0, #0
 80050a0:	f7fd fd60 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80050a4:	2097      	movs	r0, #151	; 0x97
 80050a6:	f7fd fd5d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7fd fd5a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80050b0:	20a6      	movs	r0, #166	; 0xa6
 80050b2:	f7fd fd57 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7fd fd54 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80050bc:	20b7      	movs	r0, #183	; 0xb7
 80050be:	f7fd fd51 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7fd fd4e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80050c8:	20c2      	movs	r0, #194	; 0xc2
 80050ca:	f7fd fd4b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ce:	2000      	movs	r0, #0
 80050d0:	f7fd fd48 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80050d4:	20c7      	movs	r0, #199	; 0xc7
 80050d6:	f7fd fd45 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050da:	2000      	movs	r0, #0
 80050dc:	f7fd fd42 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80050e0:	20d1      	movs	r0, #209	; 0xd1
 80050e2:	f7fd fd3f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7fd fd3c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80050ec:	20d5      	movs	r0, #213	; 0xd5
 80050ee:	f7fd fd39 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f2:	2000      	movs	r0, #0
 80050f4:	f7fd fd36 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80050f8:	20dd      	movs	r0, #221	; 0xdd
 80050fa:	f7fd fd33 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050fe:	2000      	movs	r0, #0
 8005100:	f7fd fd30 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005104:	20f3      	movs	r0, #243	; 0xf3
 8005106:	f7fd fd2d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800510a:	2000      	movs	r0, #0
 800510c:	f7fd fd2a 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8005110:	20e4      	movs	r0, #228	; 0xe4
 8005112:	f7fd fd03 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8005116:	2001      	movs	r0, #1
 8005118:	f7fd fd24 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800511c:	2000      	movs	r0, #0
 800511e:	f7fd fd21 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8005122:	2001      	movs	r0, #1
 8005124:	f7fd fd1e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005128:	2000      	movs	r0, #0
 800512a:	f7fd fd1b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800512e:	2002      	movs	r0, #2
 8005130:	f7fd fd18 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005134:	2000      	movs	r0, #0
 8005136:	f7fd fd15 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800513a:	202a      	movs	r0, #42	; 0x2a
 800513c:	f7fd fd12 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005140:	2000      	movs	r0, #0
 8005142:	f7fd fd0f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005146:	203c      	movs	r0, #60	; 0x3c
 8005148:	f7fd fd0c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800514c:	2000      	movs	r0, #0
 800514e:	f7fd fd09 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005152:	204b      	movs	r0, #75	; 0x4b
 8005154:	f7fd fd06 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005158:	2000      	movs	r0, #0
 800515a:	f7fd fd03 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800515e:	205d      	movs	r0, #93	; 0x5d
 8005160:	f7fd fd00 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005164:	2000      	movs	r0, #0
 8005166:	f7fd fcfd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 800516a:	2074      	movs	r0, #116	; 0x74
 800516c:	f7fd fcfa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005170:	2000      	movs	r0, #0
 8005172:	f7fd fcf7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005176:	2084      	movs	r0, #132	; 0x84
 8005178:	f7fd fcf4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800517c:	2000      	movs	r0, #0
 800517e:	f7fd fcf1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005182:	2093      	movs	r0, #147	; 0x93
 8005184:	f7fd fcee 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005188:	2000      	movs	r0, #0
 800518a:	f7fd fceb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800518e:	20a2      	movs	r0, #162	; 0xa2
 8005190:	f7fd fce8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005194:	2000      	movs	r0, #0
 8005196:	f7fd fce5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800519a:	20b3      	movs	r0, #179	; 0xb3
 800519c:	f7fd fce2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a0:	2000      	movs	r0, #0
 80051a2:	f7fd fcdf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80051a6:	20be      	movs	r0, #190	; 0xbe
 80051a8:	f7fd fcdc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7fd fcd9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80051b2:	20c4      	movs	r0, #196	; 0xc4
 80051b4:	f7fd fcd6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b8:	2000      	movs	r0, #0
 80051ba:	f7fd fcd3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80051be:	20cd      	movs	r0, #205	; 0xcd
 80051c0:	f7fd fcd0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7fd fccd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80051ca:	20d3      	movs	r0, #211	; 0xd3
 80051cc:	f7fd fcca 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7fd fcc7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80051d6:	20dd      	movs	r0, #221	; 0xdd
 80051d8:	f7fd fcc4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051dc:	2000      	movs	r0, #0
 80051de:	f7fd fcc1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80051e2:	20f3      	movs	r0, #243	; 0xf3
 80051e4:	f7fd fcbe 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7fd fcbb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80051ee:	20e5      	movs	r0, #229	; 0xe5
 80051f0:	f7fd fc94 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fd fcb5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051fa:	2000      	movs	r0, #0
 80051fc:	f7fd fcb2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005200:	2000      	movs	r0, #0
 8005202:	f7fd fcaf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005206:	2000      	movs	r0, #0
 8005208:	f7fd fcac 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800520c:	2002      	movs	r0, #2
 800520e:	f7fd fca9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005212:	2000      	movs	r0, #0
 8005214:	f7fd fca6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005218:	2029      	movs	r0, #41	; 0x29
 800521a:	f7fd fca3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800521e:	2000      	movs	r0, #0
 8005220:	f7fd fca0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005224:	203c      	movs	r0, #60	; 0x3c
 8005226:	f7fd fc9d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800522a:	2000      	movs	r0, #0
 800522c:	f7fd fc9a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005230:	204b      	movs	r0, #75	; 0x4b
 8005232:	f7fd fc97 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005236:	2000      	movs	r0, #0
 8005238:	f7fd fc94 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800523c:	205d      	movs	r0, #93	; 0x5d
 800523e:	f7fd fc91 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005242:	2000      	movs	r0, #0
 8005244:	f7fd fc8e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005248:	2074      	movs	r0, #116	; 0x74
 800524a:	f7fd fc8b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800524e:	2000      	movs	r0, #0
 8005250:	f7fd fc88 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005254:	2084      	movs	r0, #132	; 0x84
 8005256:	f7fd fc85 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525a:	2000      	movs	r0, #0
 800525c:	f7fd fc82 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005260:	2093      	movs	r0, #147	; 0x93
 8005262:	f7fd fc7f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005266:	2000      	movs	r0, #0
 8005268:	f7fd fc7c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800526c:	20a2      	movs	r0, #162	; 0xa2
 800526e:	f7fd fc79 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005272:	2000      	movs	r0, #0
 8005274:	f7fd fc76 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005278:	20b3      	movs	r0, #179	; 0xb3
 800527a:	f7fd fc73 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527e:	2000      	movs	r0, #0
 8005280:	f7fd fc70 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8005284:	20be      	movs	r0, #190	; 0xbe
 8005286:	f7fd fc6d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528a:	2000      	movs	r0, #0
 800528c:	f7fd fc6a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005290:	20c4      	movs	r0, #196	; 0xc4
 8005292:	f7fd fc67 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005296:	2000      	movs	r0, #0
 8005298:	f7fd fc64 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800529c:	20cd      	movs	r0, #205	; 0xcd
 800529e:	f7fd fc61 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f7fd fc5e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80052a8:	20d3      	movs	r0, #211	; 0xd3
 80052aa:	f7fd fc5b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fd fc58 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80052b4:	20dc      	movs	r0, #220	; 0xdc
 80052b6:	f7fd fc55 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ba:	2000      	movs	r0, #0
 80052bc:	f7fd fc52 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80052c0:	20f3      	movs	r0, #243	; 0xf3
 80052c2:	f7fd fc4f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c6:	2000      	movs	r0, #0
 80052c8:	f7fd fc4c 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80052cc:	20e6      	movs	r0, #230	; 0xe6
 80052ce:	f7fd fc25 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80052d2:	2011      	movs	r0, #17
 80052d4:	f7fd fc46 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d8:	2000      	movs	r0, #0
 80052da:	f7fd fc43 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80052de:	2034      	movs	r0, #52	; 0x34
 80052e0:	f7fd fc40 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fd fc3d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80052ea:	2056      	movs	r0, #86	; 0x56
 80052ec:	f7fd fc3a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052f0:	2000      	movs	r0, #0
 80052f2:	f7fd fc37 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80052f6:	2076      	movs	r0, #118	; 0x76
 80052f8:	f7fd fc34 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7fd fc31 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005302:	2077      	movs	r0, #119	; 0x77
 8005304:	f7fd fc2e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005308:	2000      	movs	r0, #0
 800530a:	f7fd fc2b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800530e:	2066      	movs	r0, #102	; 0x66
 8005310:	f7fd fc28 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005314:	2000      	movs	r0, #0
 8005316:	f7fd fc25 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800531a:	2088      	movs	r0, #136	; 0x88
 800531c:	f7fd fc22 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005320:	2000      	movs	r0, #0
 8005322:	f7fd fc1f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005326:	2099      	movs	r0, #153	; 0x99
 8005328:	f7fd fc1c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800532c:	2000      	movs	r0, #0
 800532e:	f7fd fc19 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005332:	20bb      	movs	r0, #187	; 0xbb
 8005334:	f7fd fc16 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005338:	2000      	movs	r0, #0
 800533a:	f7fd fc13 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800533e:	2099      	movs	r0, #153	; 0x99
 8005340:	f7fd fc10 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005344:	2000      	movs	r0, #0
 8005346:	f7fd fc0d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800534a:	2066      	movs	r0, #102	; 0x66
 800534c:	f7fd fc0a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005350:	2000      	movs	r0, #0
 8005352:	f7fd fc07 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005356:	2055      	movs	r0, #85	; 0x55
 8005358:	f7fd fc04 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800535c:	2000      	movs	r0, #0
 800535e:	f7fd fc01 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005362:	2055      	movs	r0, #85	; 0x55
 8005364:	f7fd fbfe 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005368:	2000      	movs	r0, #0
 800536a:	f7fd fbfb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800536e:	2045      	movs	r0, #69	; 0x45
 8005370:	f7fd fbf8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005374:	2000      	movs	r0, #0
 8005376:	f7fd fbf5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800537a:	2043      	movs	r0, #67	; 0x43
 800537c:	f7fd fbf2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005380:	2000      	movs	r0, #0
 8005382:	f7fd fbef 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005386:	2044      	movs	r0, #68	; 0x44
 8005388:	f7fd fbec 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538c:	2000      	movs	r0, #0
 800538e:	f7fd fbe9 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8005392:	20e7      	movs	r0, #231	; 0xe7
 8005394:	f7fd fbc2 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005398:	2032      	movs	r0, #50	; 0x32
 800539a:	f7fd fbe3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800539e:	2000      	movs	r0, #0
 80053a0:	f7fd fbe0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80053a4:	2055      	movs	r0, #85	; 0x55
 80053a6:	f7fd fbdd 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053aa:	2000      	movs	r0, #0
 80053ac:	f7fd fbda 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80053b0:	2076      	movs	r0, #118	; 0x76
 80053b2:	f7fd fbd7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fd fbd4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80053bc:	2066      	movs	r0, #102	; 0x66
 80053be:	f7fd fbd1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f7fd fbce 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80053c8:	2067      	movs	r0, #103	; 0x67
 80053ca:	f7fd fbcb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fd fbc8 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80053d4:	2067      	movs	r0, #103	; 0x67
 80053d6:	f7fd fbc5 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053da:	2000      	movs	r0, #0
 80053dc:	f7fd fbc2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80053e0:	2087      	movs	r0, #135	; 0x87
 80053e2:	f7fd fbbf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fd fbbc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80053ec:	2099      	movs	r0, #153	; 0x99
 80053ee:	f7fd fbb9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053f2:	2000      	movs	r0, #0
 80053f4:	f7fd fbb6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80053f8:	20bb      	movs	r0, #187	; 0xbb
 80053fa:	f7fd fbb3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fd fbb0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005404:	2099      	movs	r0, #153	; 0x99
 8005406:	f7fd fbad 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800540a:	2000      	movs	r0, #0
 800540c:	f7fd fbaa 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005410:	2077      	movs	r0, #119	; 0x77
 8005412:	f7fd fba7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005416:	2000      	movs	r0, #0
 8005418:	f7fd fba4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800541c:	2044      	movs	r0, #68	; 0x44
 800541e:	f7fd fba1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005422:	2000      	movs	r0, #0
 8005424:	f7fd fb9e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005428:	2056      	movs	r0, #86	; 0x56
 800542a:	f7fd fb9b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800542e:	2000      	movs	r0, #0
 8005430:	f7fd fb98 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8005434:	2023      	movs	r0, #35	; 0x23
 8005436:	f7fd fb95 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800543a:	2000      	movs	r0, #0
 800543c:	f7fd fb92 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005440:	2033      	movs	r0, #51	; 0x33
 8005442:	f7fd fb8f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005446:	2000      	movs	r0, #0
 8005448:	f7fd fb8c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800544c:	2045      	movs	r0, #69	; 0x45
 800544e:	f7fd fb89 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005452:	2000      	movs	r0, #0
 8005454:	f7fd fb86 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005458:	20e8      	movs	r0, #232	; 0xe8
 800545a:	f7fd fb5f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800545e:	2000      	movs	r0, #0
 8005460:	f7fd fb80 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005464:	2000      	movs	r0, #0
 8005466:	f7fd fb7d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800546a:	2099      	movs	r0, #153	; 0x99
 800546c:	f7fd fb7a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005470:	2000      	movs	r0, #0
 8005472:	f7fd fb77 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005476:	2087      	movs	r0, #135	; 0x87
 8005478:	f7fd fb74 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800547c:	2000      	movs	r0, #0
 800547e:	f7fd fb71 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005482:	2088      	movs	r0, #136	; 0x88
 8005484:	f7fd fb6e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005488:	2000      	movs	r0, #0
 800548a:	f7fd fb6b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800548e:	2077      	movs	r0, #119	; 0x77
 8005490:	f7fd fb68 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005494:	2000      	movs	r0, #0
 8005496:	f7fd fb65 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800549a:	2066      	movs	r0, #102	; 0x66
 800549c:	f7fd fb62 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7fd fb5f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80054a6:	2088      	movs	r0, #136	; 0x88
 80054a8:	f7fd fb5c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ac:	2000      	movs	r0, #0
 80054ae:	f7fd fb59 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80054b2:	20aa      	movs	r0, #170	; 0xaa
 80054b4:	f7fd fb56 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7fd fb53 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80054be:	20bb      	movs	r0, #187	; 0xbb
 80054c0:	f7fd fb50 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054c4:	2000      	movs	r0, #0
 80054c6:	f7fd fb4d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80054ca:	2099      	movs	r0, #153	; 0x99
 80054cc:	f7fd fb4a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d0:	2000      	movs	r0, #0
 80054d2:	f7fd fb47 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80054d6:	2066      	movs	r0, #102	; 0x66
 80054d8:	f7fd fb44 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054dc:	2000      	movs	r0, #0
 80054de:	f7fd fb41 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80054e2:	2055      	movs	r0, #85	; 0x55
 80054e4:	f7fd fb3e 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7fd fb3b 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80054ee:	2055      	movs	r0, #85	; 0x55
 80054f0:	f7fd fb38 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054f4:	2000      	movs	r0, #0
 80054f6:	f7fd fb35 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80054fa:	2044      	movs	r0, #68	; 0x44
 80054fc:	f7fd fb32 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005500:	2000      	movs	r0, #0
 8005502:	f7fd fb2f 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005506:	2044      	movs	r0, #68	; 0x44
 8005508:	f7fd fb2c 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800550c:	2000      	movs	r0, #0
 800550e:	f7fd fb29 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005512:	2055      	movs	r0, #85	; 0x55
 8005514:	f7fd fb26 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005518:	2000      	movs	r0, #0
 800551a:	f7fd fb23 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800551e:	20e9      	movs	r0, #233	; 0xe9
 8005520:	f7fd fafc 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005524:	20aa      	movs	r0, #170	; 0xaa
 8005526:	f7fd fb1d 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fd fb1a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005530:	2000      	movs	r0, #0
 8005532:	f7fd fb17 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005536:	2000      	movs	r0, #0
 8005538:	f7fd fb14 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800553c:	2000      	movs	r0, #0
 800553e:	f7fd faed 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005542:	20aa      	movs	r0, #170	; 0xaa
 8005544:	f7fd fb0e 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005548:	20cf      	movs	r0, #207	; 0xcf
 800554a:	f7fd fae7 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800554e:	2000      	movs	r0, #0
 8005550:	f7fd fb08 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005554:	2000      	movs	r0, #0
 8005556:	f7fd fb05 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800555a:	2000      	movs	r0, #0
 800555c:	f7fd fb02 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005560:	2000      	movs	r0, #0
 8005562:	f7fd faff 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005566:	2000      	movs	r0, #0
 8005568:	f7fd fafc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800556c:	2000      	movs	r0, #0
 800556e:	f7fd faf9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005572:	2000      	movs	r0, #0
 8005574:	f7fd faf6 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005578:	2000      	movs	r0, #0
 800557a:	f7fd faf3 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800557e:	2000      	movs	r0, #0
 8005580:	f7fd faf0 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005584:	2000      	movs	r0, #0
 8005586:	f7fd faed 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800558a:	2000      	movs	r0, #0
 800558c:	f7fd faea 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005590:	2000      	movs	r0, #0
 8005592:	f7fd fae7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005596:	2000      	movs	r0, #0
 8005598:	f7fd fae4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800559c:	2000      	movs	r0, #0
 800559e:	f7fd fae1 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7fd fade 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fd fadb 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7fd fad8 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80055b4:	20f0      	movs	r0, #240	; 0xf0
 80055b6:	f7fd fab1 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fd fad2 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80055c0:	2050      	movs	r0, #80	; 0x50
 80055c2:	f7fd facf 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7fd facc 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fd fac9 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7fd fac6 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80055d8:	20f3      	movs	r0, #243	; 0xf3
 80055da:	f7fd fa9f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80055de:	2000      	movs	r0, #0
 80055e0:	f7fd fac0 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80055e4:	20f9      	movs	r0, #249	; 0xf9
 80055e6:	f7fd fa99 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80055ea:	2006      	movs	r0, #6
 80055ec:	f7fd faba 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80055f0:	2010      	movs	r0, #16
 80055f2:	f7fd fab7 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80055f6:	2029      	movs	r0, #41	; 0x29
 80055f8:	f7fd fab4 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fd fab1 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005602:	203a      	movs	r0, #58	; 0x3a
 8005604:	f7fd fa8a 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005608:	2055      	movs	r0, #85	; 0x55
 800560a:	f7fd faab 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800560e:	2011      	movs	r0, #17
 8005610:	f7fd fa84 	bl	8002b1c <LCD_WR_REG>
		HAL_Delay(100);
 8005614:	2064      	movs	r0, #100	; 0x64
 8005616:	f7fb fd8b 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0x29);
 800561a:	2029      	movs	r0, #41	; 0x29
 800561c:	f7fd fa7e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005620:	2035      	movs	r0, #53	; 0x35
 8005622:	f7fd fa7b 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005626:	2000      	movs	r0, #0
 8005628:	f7fd fa9c 	bl	8002b64 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800562c:	2051      	movs	r0, #81	; 0x51
 800562e:	f7fd fa75 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005632:	20ff      	movs	r0, #255	; 0xff
 8005634:	f7fd fa96 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005638:	2053      	movs	r0, #83	; 0x53
 800563a:	f7fd fa6f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800563e:	202c      	movs	r0, #44	; 0x2c
 8005640:	f7fd fa90 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8005644:	2055      	movs	r0, #85	; 0x55
 8005646:	f7fd fa69 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800564a:	2082      	movs	r0, #130	; 0x82
 800564c:	f7fd fa8a 	bl	8002b64 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005650:	202c      	movs	r0, #44	; 0x2c
 8005652:	f7fd fa63 	bl	8002b1c <LCD_WR_REG>
 8005656:	f002 bca1 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800565a:	4b04      	ldr	r3, [pc, #16]	; (800566c <LCD_Init+0x1504>)
 800565c:	889b      	ldrh	r3, [r3, #4]
 800565e:	f245 5210 	movw	r2, #21776	; 0x5510
 8005662:	4293      	cmp	r3, r2
 8005664:	f040 8782 	bne.w	800656c <LCD_Init+0x2404>
 8005668:	e002      	b.n	8005670 <LCD_Init+0x1508>
 800566a:	bf00      	nop
 800566c:	200004ac 	.word	0x200004ac
		LCD_WriteReg(0xF000, 0x55);
 8005670:	2155      	movs	r1, #85	; 0x55
 8005672:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005676:	f7fd fadd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800567a:	21aa      	movs	r1, #170	; 0xaa
 800567c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005680:	f7fd fad8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005684:	2152      	movs	r1, #82	; 0x52
 8005686:	f24f 0002 	movw	r0, #61442	; 0xf002
 800568a:	f7fd fad3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800568e:	2108      	movs	r1, #8
 8005690:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005694:	f7fd face 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8005698:	2101      	movs	r1, #1
 800569a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800569e:	f7fd fac9 	bl	8002c34 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80056a2:	210d      	movs	r1, #13
 80056a4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80056a8:	f7fd fac4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80056ac:	210d      	movs	r1, #13
 80056ae:	f24b 0001 	movw	r0, #45057	; 0xb001
 80056b2:	f7fd fabf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80056b6:	210d      	movs	r1, #13
 80056b8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80056bc:	f7fd faba 	bl	8002c34 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80056c0:	2134      	movs	r1, #52	; 0x34
 80056c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80056c6:	f7fd fab5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80056ca:	2134      	movs	r1, #52	; 0x34
 80056cc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80056d0:	f7fd fab0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80056d4:	2134      	movs	r1, #52	; 0x34
 80056d6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80056da:	f7fd faab 	bl	8002c34 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80056de:	210d      	movs	r1, #13
 80056e0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80056e4:	f7fd faa6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80056e8:	210d      	movs	r1, #13
 80056ea:	f24b 1001 	movw	r0, #45313	; 0xb101
 80056ee:	f7fd faa1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80056f2:	210d      	movs	r1, #13
 80056f4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80056f8:	f7fd fa9c 	bl	8002c34 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80056fc:	2134      	movs	r1, #52	; 0x34
 80056fe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005702:	f7fd fa97 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8005706:	2134      	movs	r1, #52	; 0x34
 8005708:	f24b 7001 	movw	r0, #46849	; 0xb701
 800570c:	f7fd fa92 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005710:	2134      	movs	r1, #52	; 0x34
 8005712:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005716:	f7fd fa8d 	bl	8002c34 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800571a:	2100      	movs	r1, #0
 800571c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005720:	f7fd fa88 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8005724:	2100      	movs	r1, #0
 8005726:	f24b 2001 	movw	r0, #45569	; 0xb201
 800572a:	f7fd fa83 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800572e:	2100      	movs	r1, #0
 8005730:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005734:	f7fd fa7e 	bl	8002c34 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005738:	2124      	movs	r1, #36	; 0x24
 800573a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800573e:	f7fd fa79 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8005742:	2124      	movs	r1, #36	; 0x24
 8005744:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005748:	f7fd fa74 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800574c:	2124      	movs	r1, #36	; 0x24
 800574e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005752:	f7fd fa6f 	bl	8002c34 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8005756:	2101      	movs	r1, #1
 8005758:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800575c:	f7fd fa6a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005760:	210f      	movs	r1, #15
 8005762:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005766:	f7fd fa65 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800576a:	210f      	movs	r1, #15
 800576c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005770:	f7fd fa60 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8005774:	210f      	movs	r1, #15
 8005776:	f24b 3002 	movw	r0, #45826	; 0xb302
 800577a:	f7fd fa5b 	bl	8002c34 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800577e:	2134      	movs	r1, #52	; 0x34
 8005780:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005784:	f7fd fa56 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8005788:	2134      	movs	r1, #52	; 0x34
 800578a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800578e:	f7fd fa51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8005792:	2134      	movs	r1, #52	; 0x34
 8005794:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005798:	f7fd fa4c 	bl	8002c34 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800579c:	2108      	movs	r1, #8
 800579e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80057a2:	f7fd fa47 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80057a6:	2108      	movs	r1, #8
 80057a8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80057ac:	f7fd fa42 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80057b0:	2108      	movs	r1, #8
 80057b2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80057b6:	f7fd fa3d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80057ba:	2103      	movs	r1, #3
 80057bc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80057c0:	f7fd fa38 	bl	8002c34 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80057c4:	2124      	movs	r1, #36	; 0x24
 80057c6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80057ca:	f7fd fa33 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80057ce:	2124      	movs	r1, #36	; 0x24
 80057d0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80057d4:	f7fd fa2e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80057d8:	2124      	movs	r1, #36	; 0x24
 80057da:	f64b 2002 	movw	r0, #47618	; 0xba02
 80057de:	f7fd fa29 	bl	8002c34 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80057e2:	2100      	movs	r1, #0
 80057e4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80057e8:	f7fd fa24 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80057ec:	2178      	movs	r1, #120	; 0x78
 80057ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80057f2:	f7fd fa1f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80057f6:	2100      	movs	r1, #0
 80057f8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80057fc:	f7fd fa1a 	bl	8002c34 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005800:	2100      	movs	r1, #0
 8005802:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005806:	f7fd fa15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800580a:	2178      	movs	r1, #120	; 0x78
 800580c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005810:	f7fd fa10 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8005814:	2100      	movs	r1, #0
 8005816:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800581a:	f7fd fa0b 	bl	8002c34 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800581e:	2100      	movs	r1, #0
 8005820:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005824:	f7fd fa06 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005828:	2164      	movs	r1, #100	; 0x64
 800582a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800582e:	f7fd fa01 	bl	8002c34 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8005832:	2100      	movs	r1, #0
 8005834:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005838:	f7fd f9fc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800583c:	2133      	movs	r1, #51	; 0x33
 800583e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8005842:	f7fd f9f7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8005846:	2100      	movs	r1, #0
 8005848:	f24d 1002 	movw	r0, #53506	; 0xd102
 800584c:	f7fd f9f2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005850:	2134      	movs	r1, #52	; 0x34
 8005852:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005856:	f7fd f9ed 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800585a:	2100      	movs	r1, #0
 800585c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005860:	f7fd f9e8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8005864:	213a      	movs	r1, #58	; 0x3a
 8005866:	f24d 1005 	movw	r0, #53509	; 0xd105
 800586a:	f7fd f9e3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800586e:	2100      	movs	r1, #0
 8005870:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005874:	f7fd f9de 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005878:	214a      	movs	r1, #74	; 0x4a
 800587a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800587e:	f7fd f9d9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8005882:	2100      	movs	r1, #0
 8005884:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005888:	f7fd f9d4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800588c:	215c      	movs	r1, #92	; 0x5c
 800588e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005892:	f7fd f9cf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8005896:	2100      	movs	r1, #0
 8005898:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800589c:	f7fd f9ca 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80058a0:	2181      	movs	r1, #129	; 0x81
 80058a2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80058a6:	f7fd f9c5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80058aa:	2100      	movs	r1, #0
 80058ac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80058b0:	f7fd f9c0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80058b4:	21a6      	movs	r1, #166	; 0xa6
 80058b6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80058ba:	f7fd f9bb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80058be:	2100      	movs	r1, #0
 80058c0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80058c4:	f7fd f9b6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80058c8:	21e5      	movs	r1, #229	; 0xe5
 80058ca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80058ce:	f7fd f9b1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80058d2:	2101      	movs	r1, #1
 80058d4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80058d8:	f7fd f9ac 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80058dc:	2113      	movs	r1, #19
 80058de:	f24d 1011 	movw	r0, #53521	; 0xd111
 80058e2:	f7fd f9a7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80058e6:	2101      	movs	r1, #1
 80058e8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80058ec:	f7fd f9a2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80058f0:	2154      	movs	r1, #84	; 0x54
 80058f2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80058f6:	f7fd f99d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80058fa:	2101      	movs	r1, #1
 80058fc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005900:	f7fd f998 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8005904:	2182      	movs	r1, #130	; 0x82
 8005906:	f24d 1015 	movw	r0, #53525	; 0xd115
 800590a:	f7fd f993 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800590e:	2101      	movs	r1, #1
 8005910:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005914:	f7fd f98e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005918:	21ca      	movs	r1, #202	; 0xca
 800591a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800591e:	f7fd f989 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8005922:	2102      	movs	r1, #2
 8005924:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005928:	f7fd f984 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800592c:	2100      	movs	r1, #0
 800592e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005932:	f7fd f97f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8005936:	2102      	movs	r1, #2
 8005938:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800593c:	f7fd f97a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005940:	2101      	movs	r1, #1
 8005942:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8005946:	f7fd f975 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800594a:	2102      	movs	r1, #2
 800594c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005950:	f7fd f970 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8005954:	2134      	movs	r1, #52	; 0x34
 8005956:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800595a:	f7fd f96b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800595e:	2102      	movs	r1, #2
 8005960:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005964:	f7fd f966 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005968:	2167      	movs	r1, #103	; 0x67
 800596a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800596e:	f7fd f961 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8005972:	2102      	movs	r1, #2
 8005974:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005978:	f7fd f95c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800597c:	2184      	movs	r1, #132	; 0x84
 800597e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005982:	f7fd f957 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8005986:	2102      	movs	r1, #2
 8005988:	f24d 1022 	movw	r0, #53538	; 0xd122
 800598c:	f7fd f952 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8005990:	21a4      	movs	r1, #164	; 0xa4
 8005992:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005996:	f7fd f94d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800599a:	2102      	movs	r1, #2
 800599c:	f24d 1024 	movw	r0, #53540	; 0xd124
 80059a0:	f7fd f948 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80059a4:	21b7      	movs	r1, #183	; 0xb7
 80059a6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80059aa:	f7fd f943 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80059ae:	2102      	movs	r1, #2
 80059b0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80059b4:	f7fd f93e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80059b8:	21cf      	movs	r1, #207	; 0xcf
 80059ba:	f24d 1027 	movw	r0, #53543	; 0xd127
 80059be:	f7fd f939 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80059c2:	2102      	movs	r1, #2
 80059c4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80059c8:	f7fd f934 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80059cc:	21de      	movs	r1, #222	; 0xde
 80059ce:	f24d 1029 	movw	r0, #53545	; 0xd129
 80059d2:	f7fd f92f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80059d6:	2102      	movs	r1, #2
 80059d8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80059dc:	f7fd f92a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80059e0:	21f2      	movs	r1, #242	; 0xf2
 80059e2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80059e6:	f7fd f925 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80059ea:	2102      	movs	r1, #2
 80059ec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80059f0:	f7fd f920 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80059f4:	21fe      	movs	r1, #254	; 0xfe
 80059f6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80059fa:	f7fd f91b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80059fe:	2103      	movs	r1, #3
 8005a00:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005a04:	f7fd f916 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005a08:	2110      	movs	r1, #16
 8005a0a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005a0e:	f7fd f911 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8005a12:	2103      	movs	r1, #3
 8005a14:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005a18:	f7fd f90c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8005a1c:	2133      	movs	r1, #51	; 0x33
 8005a1e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8005a22:	f7fd f907 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8005a26:	2103      	movs	r1, #3
 8005a28:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005a2c:	f7fd f902 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005a30:	216d      	movs	r1, #109	; 0x6d
 8005a32:	f24d 1033 	movw	r0, #53555	; 0xd133
 8005a36:	f7fd f8fd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005a40:	f7fd f8f8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8005a44:	2133      	movs	r1, #51	; 0x33
 8005a46:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005a4a:	f7fd f8f3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	f24d 2002 	movw	r0, #53762	; 0xd202
 8005a54:	f7fd f8ee 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8005a58:	2134      	movs	r1, #52	; 0x34
 8005a5a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8005a5e:	f7fd f8e9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8005a62:	2100      	movs	r1, #0
 8005a64:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005a68:	f7fd f8e4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8005a6c:	213a      	movs	r1, #58	; 0x3a
 8005a6e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8005a72:	f7fd f8df 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8005a76:	2100      	movs	r1, #0
 8005a78:	f24d 2006 	movw	r0, #53766	; 0xd206
 8005a7c:	f7fd f8da 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8005a80:	214a      	movs	r1, #74	; 0x4a
 8005a82:	f24d 2007 	movw	r0, #53767	; 0xd207
 8005a86:	f7fd f8d5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8005a90:	f7fd f8d0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8005a94:	215c      	movs	r1, #92	; 0x5c
 8005a96:	f24d 2009 	movw	r0, #53769	; 0xd209
 8005a9a:	f7fd f8cb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005aa4:	f7fd f8c6 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8005aa8:	2181      	movs	r1, #129	; 0x81
 8005aaa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8005aae:	f7fd f8c1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005ab8:	f7fd f8bc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8005abc:	21a6      	movs	r1, #166	; 0xa6
 8005abe:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005ac2:	f7fd f8b7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005acc:	f7fd f8b2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005ad0:	21e5      	movs	r1, #229	; 0xe5
 8005ad2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005ad6:	f7fd f8ad 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8005ada:	2101      	movs	r1, #1
 8005adc:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005ae0:	f7fd f8a8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8005ae4:	2113      	movs	r1, #19
 8005ae6:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005aea:	f7fd f8a3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005aee:	2101      	movs	r1, #1
 8005af0:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005af4:	f7fd f89e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005af8:	2154      	movs	r1, #84	; 0x54
 8005afa:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005afe:	f7fd f899 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8005b02:	2101      	movs	r1, #1
 8005b04:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005b08:	f7fd f894 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005b0c:	2182      	movs	r1, #130	; 0x82
 8005b0e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8005b12:	f7fd f88f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8005b16:	2101      	movs	r1, #1
 8005b18:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005b1c:	f7fd f88a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8005b20:	21ca      	movs	r1, #202	; 0xca
 8005b22:	f24d 2017 	movw	r0, #53783	; 0xd217
 8005b26:	f7fd f885 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005b30:	f7fd f880 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8005b34:	2100      	movs	r1, #0
 8005b36:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005b3a:	f7fd f87b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8005b3e:	2102      	movs	r1, #2
 8005b40:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8005b44:	f7fd f876 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005b4e:	f7fd f871 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8005b52:	2102      	movs	r1, #2
 8005b54:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005b58:	f7fd f86c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8005b5c:	2134      	movs	r1, #52	; 0x34
 8005b5e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8005b62:	f7fd f867 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8005b66:	2102      	movs	r1, #2
 8005b68:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8005b6c:	f7fd f862 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8005b70:	2167      	movs	r1, #103	; 0x67
 8005b72:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8005b76:	f7fd f85d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005b80:	f7fd f858 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8005b84:	2184      	movs	r1, #132	; 0x84
 8005b86:	f24d 2021 	movw	r0, #53793	; 0xd221
 8005b8a:	f7fd f853 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8005b8e:	2102      	movs	r1, #2
 8005b90:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005b94:	f7fd f84e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8005b98:	21a4      	movs	r1, #164	; 0xa4
 8005b9a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8005b9e:	f7fd f849 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005ba8:	f7fd f844 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8005bac:	21b7      	movs	r1, #183	; 0xb7
 8005bae:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005bb2:	f7fd f83f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005bbc:	f7fd f83a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8005bc0:	21cf      	movs	r1, #207	; 0xcf
 8005bc2:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005bc6:	f7fd f835 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005bd0:	f7fd f830 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8005bd4:	21de      	movs	r1, #222	; 0xde
 8005bd6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005bda:	f7fd f82b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8005bde:	2102      	movs	r1, #2
 8005be0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005be4:	f7fd f826 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005be8:	21f2      	movs	r1, #242	; 0xf2
 8005bea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005bee:	f7fd f821 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005bf8:	f7fd f81c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8005bfc:	21fe      	movs	r1, #254	; 0xfe
 8005bfe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8005c02:	f7fd f817 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8005c06:	2103      	movs	r1, #3
 8005c08:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005c0c:	f7fd f812 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8005c10:	2110      	movs	r1, #16
 8005c12:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005c16:	f7fd f80d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8005c1a:	2103      	movs	r1, #3
 8005c1c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005c20:	f7fd f808 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8005c24:	2133      	movs	r1, #51	; 0x33
 8005c26:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005c2a:	f7fd f803 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8005c2e:	2103      	movs	r1, #3
 8005c30:	f24d 2032 	movw	r0, #53810	; 0xd232
 8005c34:	f7fc fffe 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8005c38:	216d      	movs	r1, #109	; 0x6d
 8005c3a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8005c3e:	f7fc fff9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8005c42:	2100      	movs	r1, #0
 8005c44:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005c48:	f7fc fff4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8005c4c:	2133      	movs	r1, #51	; 0x33
 8005c4e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005c52:	f7fc ffef 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8005c56:	2100      	movs	r1, #0
 8005c58:	f24d 3002 	movw	r0, #54018	; 0xd302
 8005c5c:	f7fc ffea 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8005c60:	2134      	movs	r1, #52	; 0x34
 8005c62:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005c66:	f7fc ffe5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005c70:	f7fc ffe0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8005c74:	213a      	movs	r1, #58	; 0x3a
 8005c76:	f24d 3005 	movw	r0, #54021	; 0xd305
 8005c7a:	f7fc ffdb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005c84:	f7fc ffd6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8005c88:	214a      	movs	r1, #74	; 0x4a
 8005c8a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8005c8e:	f7fc ffd1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8005c92:	2100      	movs	r1, #0
 8005c94:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005c98:	f7fc ffcc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8005c9c:	215c      	movs	r1, #92	; 0x5c
 8005c9e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005ca2:	f7fc ffc7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8005cac:	f7fc ffc2 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8005cb0:	2181      	movs	r1, #129	; 0x81
 8005cb2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005cb6:	f7fc ffbd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8005cba:	2100      	movs	r1, #0
 8005cbc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005cc0:	f7fc ffb8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8005cc4:	21a6      	movs	r1, #166	; 0xa6
 8005cc6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005cca:	f7fc ffb3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005cd4:	f7fc ffae 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8005cd8:	21e5      	movs	r1, #229	; 0xe5
 8005cda:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8005cde:	f7fc ffa9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005ce8:	f7fc ffa4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8005cec:	2113      	movs	r1, #19
 8005cee:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005cf2:	f7fc ff9f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005cfc:	f7fc ff9a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8005d00:	2154      	movs	r1, #84	; 0x54
 8005d02:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005d06:	f7fc ff95 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005d10:	f7fc ff90 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8005d14:	2182      	movs	r1, #130	; 0x82
 8005d16:	f24d 3015 	movw	r0, #54037	; 0xd315
 8005d1a:	f7fc ff8b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8005d1e:	2101      	movs	r1, #1
 8005d20:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005d24:	f7fc ff86 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8005d28:	21ca      	movs	r1, #202	; 0xca
 8005d2a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8005d2e:	f7fc ff81 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8005d32:	2102      	movs	r1, #2
 8005d34:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005d38:	f7fc ff7c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8005d42:	f7fc ff77 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8005d46:	2102      	movs	r1, #2
 8005d48:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8005d4c:	f7fc ff72 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005d50:	2101      	movs	r1, #1
 8005d52:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005d56:	f7fc ff6d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005d60:	f7fc ff68 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8005d64:	2134      	movs	r1, #52	; 0x34
 8005d66:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8005d6a:	f7fc ff63 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8005d6e:	2102      	movs	r1, #2
 8005d70:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005d74:	f7fc ff5e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8005d78:	2167      	movs	r1, #103	; 0x67
 8005d7a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8005d7e:	f7fc ff59 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8005d82:	2102      	movs	r1, #2
 8005d84:	f24d 3020 	movw	r0, #54048	; 0xd320
 8005d88:	f7fc ff54 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8005d8c:	2184      	movs	r1, #132	; 0x84
 8005d8e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005d92:	f7fc ff4f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8005d96:	2102      	movs	r1, #2
 8005d98:	f24d 3022 	movw	r0, #54050	; 0xd322
 8005d9c:	f7fc ff4a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8005da0:	21a4      	movs	r1, #164	; 0xa4
 8005da2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005da6:	f7fc ff45 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8005daa:	2102      	movs	r1, #2
 8005dac:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005db0:	f7fc ff40 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8005db4:	21b7      	movs	r1, #183	; 0xb7
 8005db6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005dba:	f7fc ff3b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005dc4:	f7fc ff36 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005dc8:	21cf      	movs	r1, #207	; 0xcf
 8005dca:	f24d 3027 	movw	r0, #54055	; 0xd327
 8005dce:	f7fc ff31 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005dd8:	f7fc ff2c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8005ddc:	21de      	movs	r1, #222	; 0xde
 8005dde:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005de2:	f7fc ff27 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8005de6:	2102      	movs	r1, #2
 8005de8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005dec:	f7fc ff22 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8005df0:	21f2      	movs	r1, #242	; 0xf2
 8005df2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005df6:	f7fc ff1d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005e00:	f7fc ff18 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8005e04:	21fe      	movs	r1, #254	; 0xfe
 8005e06:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005e0a:	f7fc ff13 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8005e0e:	2103      	movs	r1, #3
 8005e10:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005e14:	f7fc ff0e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8005e18:	2110      	movs	r1, #16
 8005e1a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8005e1e:	f7fc ff09 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8005e22:	2103      	movs	r1, #3
 8005e24:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005e28:	f7fc ff04 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8005e2c:	2133      	movs	r1, #51	; 0x33
 8005e2e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005e32:	f7fc feff 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8005e36:	2103      	movs	r1, #3
 8005e38:	f24d 3032 	movw	r0, #54066	; 0xd332
 8005e3c:	f7fc fefa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005e40:	216d      	movs	r1, #109	; 0x6d
 8005e42:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005e46:	f7fc fef5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005e50:	f7fc fef0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8005e54:	2133      	movs	r1, #51	; 0x33
 8005e56:	f24d 4001 	movw	r0, #54273	; 0xd401
 8005e5a:	f7fc feeb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005e64:	f7fc fee6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8005e68:	2134      	movs	r1, #52	; 0x34
 8005e6a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8005e6e:	f7fc fee1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8005e72:	2100      	movs	r1, #0
 8005e74:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005e78:	f7fc fedc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8005e7c:	213a      	movs	r1, #58	; 0x3a
 8005e7e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8005e82:	f7fc fed7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8005e86:	2100      	movs	r1, #0
 8005e88:	f24d 4006 	movw	r0, #54278	; 0xd406
 8005e8c:	f7fc fed2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8005e90:	214a      	movs	r1, #74	; 0x4a
 8005e92:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005e96:	f7fc fecd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005ea0:	f7fc fec8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8005ea4:	215c      	movs	r1, #92	; 0x5c
 8005ea6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8005eaa:	f7fc fec3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005eb4:	f7fc febe 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005ebe:	f7fc feb9 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005ec8:	f7fc feb4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8005ecc:	21a6      	movs	r1, #166	; 0xa6
 8005ece:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8005ed2:	f7fc feaf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005edc:	f7fc feaa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8005ee0:	21e5      	movs	r1, #229	; 0xe5
 8005ee2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005ee6:	f7fc fea5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8005eea:	2101      	movs	r1, #1
 8005eec:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005ef0:	f7fc fea0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8005ef4:	2113      	movs	r1, #19
 8005ef6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005efa:	f7fc fe9b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8005efe:	2101      	movs	r1, #1
 8005f00:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005f04:	f7fc fe96 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8005f08:	2154      	movs	r1, #84	; 0x54
 8005f0a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005f0e:	f7fc fe91 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8005f12:	2101      	movs	r1, #1
 8005f14:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005f18:	f7fc fe8c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8005f1c:	2182      	movs	r1, #130	; 0x82
 8005f1e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005f22:	f7fc fe87 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8005f26:	2101      	movs	r1, #1
 8005f28:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005f2c:	f7fc fe82 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005f30:	21ca      	movs	r1, #202	; 0xca
 8005f32:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005f36:	f7fc fe7d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005f40:	f7fc fe78 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8005f44:	2100      	movs	r1, #0
 8005f46:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005f4a:	f7fc fe73 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8005f4e:	2102      	movs	r1, #2
 8005f50:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005f54:	f7fc fe6e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8005f58:	2101      	movs	r1, #1
 8005f5a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8005f5e:	f7fc fe69 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8005f62:	2102      	movs	r1, #2
 8005f64:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005f68:	f7fc fe64 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8005f6c:	2134      	movs	r1, #52	; 0x34
 8005f6e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005f72:	f7fc fe5f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8005f76:	2102      	movs	r1, #2
 8005f78:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8005f7c:	f7fc fe5a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8005f80:	2167      	movs	r1, #103	; 0x67
 8005f82:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8005f86:	f7fc fe55 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005f90:	f7fc fe50 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8005f94:	2184      	movs	r1, #132	; 0x84
 8005f96:	f24d 4021 	movw	r0, #54305	; 0xd421
 8005f9a:	f7fc fe4b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005fa4:	f7fc fe46 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8005fa8:	21a4      	movs	r1, #164	; 0xa4
 8005faa:	f24d 4023 	movw	r0, #54307	; 0xd423
 8005fae:	f7fc fe41 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8005fb2:	2102      	movs	r1, #2
 8005fb4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005fb8:	f7fc fe3c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8005fbc:	21b7      	movs	r1, #183	; 0xb7
 8005fbe:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005fc2:	f7fc fe37 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005fcc:	f7fc fe32 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8005fd0:	21cf      	movs	r1, #207	; 0xcf
 8005fd2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005fd6:	f7fc fe2d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8005fda:	2102      	movs	r1, #2
 8005fdc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005fe0:	f7fc fe28 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8005fe4:	21de      	movs	r1, #222	; 0xde
 8005fe6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005fea:	f7fc fe23 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8005fee:	2102      	movs	r1, #2
 8005ff0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005ff4:	f7fc fe1e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8005ff8:	21f2      	movs	r1, #242	; 0xf2
 8005ffa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005ffe:	f7fc fe19 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8006002:	2102      	movs	r1, #2
 8006004:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8006008:	f7fc fe14 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800600c:	21fe      	movs	r1, #254	; 0xfe
 800600e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8006012:	f7fc fe0f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8006016:	2103      	movs	r1, #3
 8006018:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800601c:	f7fc fe0a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8006020:	2110      	movs	r1, #16
 8006022:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8006026:	f7fc fe05 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800602a:	2103      	movs	r1, #3
 800602c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8006030:	f7fc fe00 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8006034:	2133      	movs	r1, #51	; 0x33
 8006036:	f24d 4031 	movw	r0, #54321	; 0xd431
 800603a:	f7fc fdfb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800603e:	2103      	movs	r1, #3
 8006040:	f24d 4032 	movw	r0, #54322	; 0xd432
 8006044:	f7fc fdf6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8006048:	216d      	movs	r1, #109	; 0x6d
 800604a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800604e:	f7fc fdf1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8006052:	2100      	movs	r1, #0
 8006054:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8006058:	f7fc fdec 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800605c:	2133      	movs	r1, #51	; 0x33
 800605e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8006062:	f7fc fde7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8006066:	2100      	movs	r1, #0
 8006068:	f24d 5002 	movw	r0, #54530	; 0xd502
 800606c:	f7fc fde2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8006070:	2134      	movs	r1, #52	; 0x34
 8006072:	f24d 5003 	movw	r0, #54531	; 0xd503
 8006076:	f7fc fddd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800607a:	2100      	movs	r1, #0
 800607c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8006080:	f7fc fdd8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8006084:	213a      	movs	r1, #58	; 0x3a
 8006086:	f24d 5005 	movw	r0, #54533	; 0xd505
 800608a:	f7fc fdd3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800608e:	2100      	movs	r1, #0
 8006090:	f24d 5006 	movw	r0, #54534	; 0xd506
 8006094:	f7fc fdce 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8006098:	214a      	movs	r1, #74	; 0x4a
 800609a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800609e:	f7fc fdc9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80060a2:	2100      	movs	r1, #0
 80060a4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80060a8:	f7fc fdc4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80060ac:	215c      	movs	r1, #92	; 0x5c
 80060ae:	f24d 5009 	movw	r0, #54537	; 0xd509
 80060b2:	f7fc fdbf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80060b6:	2100      	movs	r1, #0
 80060b8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80060bc:	f7fc fdba 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80060c0:	2181      	movs	r1, #129	; 0x81
 80060c2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80060c6:	f7fc fdb5 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80060ca:	2100      	movs	r1, #0
 80060cc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80060d0:	f7fc fdb0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80060d4:	21a6      	movs	r1, #166	; 0xa6
 80060d6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80060da:	f7fc fdab 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80060de:	2100      	movs	r1, #0
 80060e0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80060e4:	f7fc fda6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80060e8:	21e5      	movs	r1, #229	; 0xe5
 80060ea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80060ee:	f7fc fda1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80060f2:	2101      	movs	r1, #1
 80060f4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80060f8:	f7fc fd9c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80060fc:	2113      	movs	r1, #19
 80060fe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8006102:	f7fc fd97 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8006106:	2101      	movs	r1, #1
 8006108:	f24d 5012 	movw	r0, #54546	; 0xd512
 800610c:	f7fc fd92 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8006110:	2154      	movs	r1, #84	; 0x54
 8006112:	f24d 5013 	movw	r0, #54547	; 0xd513
 8006116:	f7fc fd8d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800611a:	2101      	movs	r1, #1
 800611c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006120:	f7fc fd88 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8006124:	2182      	movs	r1, #130	; 0x82
 8006126:	f24d 5015 	movw	r0, #54549	; 0xd515
 800612a:	f7fc fd83 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800612e:	2101      	movs	r1, #1
 8006130:	f24d 5016 	movw	r0, #54550	; 0xd516
 8006134:	f7fc fd7e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006138:	21ca      	movs	r1, #202	; 0xca
 800613a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800613e:	f7fc fd79 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8006142:	2102      	movs	r1, #2
 8006144:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006148:	f7fc fd74 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800614c:	2100      	movs	r1, #0
 800614e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8006152:	f7fc fd6f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8006156:	2102      	movs	r1, #2
 8006158:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800615c:	f7fc fd6a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8006160:	2101      	movs	r1, #1
 8006162:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8006166:	f7fc fd65 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 800616a:	2102      	movs	r1, #2
 800616c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8006170:	f7fc fd60 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8006174:	2134      	movs	r1, #52	; 0x34
 8006176:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800617a:	f7fc fd5b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800617e:	2102      	movs	r1, #2
 8006180:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8006184:	f7fc fd56 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8006188:	2167      	movs	r1, #103	; 0x67
 800618a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800618e:	f7fc fd51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8006192:	2102      	movs	r1, #2
 8006194:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006198:	f7fc fd4c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 800619c:	2184      	movs	r1, #132	; 0x84
 800619e:	f24d 5021 	movw	r0, #54561	; 0xd521
 80061a2:	f7fc fd47 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80061a6:	2102      	movs	r1, #2
 80061a8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80061ac:	f7fc fd42 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80061b0:	21a4      	movs	r1, #164	; 0xa4
 80061b2:	f24d 5023 	movw	r0, #54563	; 0xd523
 80061b6:	f7fc fd3d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80061ba:	2102      	movs	r1, #2
 80061bc:	f24d 5024 	movw	r0, #54564	; 0xd524
 80061c0:	f7fc fd38 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80061c4:	21b7      	movs	r1, #183	; 0xb7
 80061c6:	f24d 5025 	movw	r0, #54565	; 0xd525
 80061ca:	f7fc fd33 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80061ce:	2102      	movs	r1, #2
 80061d0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80061d4:	f7fc fd2e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80061d8:	21cf      	movs	r1, #207	; 0xcf
 80061da:	f24d 5027 	movw	r0, #54567	; 0xd527
 80061de:	f7fc fd29 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80061e2:	2102      	movs	r1, #2
 80061e4:	f24d 5028 	movw	r0, #54568	; 0xd528
 80061e8:	f7fc fd24 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80061ec:	21de      	movs	r1, #222	; 0xde
 80061ee:	f24d 5029 	movw	r0, #54569	; 0xd529
 80061f2:	f7fc fd1f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80061f6:	2102      	movs	r1, #2
 80061f8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80061fc:	f7fc fd1a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8006200:	21f2      	movs	r1, #242	; 0xf2
 8006202:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8006206:	f7fc fd15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800620a:	2102      	movs	r1, #2
 800620c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8006210:	f7fc fd10 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8006214:	21fe      	movs	r1, #254	; 0xfe
 8006216:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800621a:	f7fc fd0b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800621e:	2103      	movs	r1, #3
 8006220:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8006224:	f7fc fd06 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006228:	2110      	movs	r1, #16
 800622a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800622e:	f7fc fd01 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8006232:	2103      	movs	r1, #3
 8006234:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006238:	f7fc fcfc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800623c:	2133      	movs	r1, #51	; 0x33
 800623e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8006242:	f7fc fcf7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8006246:	2103      	movs	r1, #3
 8006248:	f24d 5032 	movw	r0, #54578	; 0xd532
 800624c:	f7fc fcf2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006250:	216d      	movs	r1, #109	; 0x6d
 8006252:	f24d 5033 	movw	r0, #54579	; 0xd533
 8006256:	f7fc fced 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800625a:	2100      	movs	r1, #0
 800625c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006260:	f7fc fce8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8006264:	2133      	movs	r1, #51	; 0x33
 8006266:	f24d 6001 	movw	r0, #54785	; 0xd601
 800626a:	f7fc fce3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800626e:	2100      	movs	r1, #0
 8006270:	f24d 6002 	movw	r0, #54786	; 0xd602
 8006274:	f7fc fcde 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006278:	2134      	movs	r1, #52	; 0x34
 800627a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800627e:	f7fc fcd9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8006282:	2100      	movs	r1, #0
 8006284:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006288:	f7fc fcd4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800628c:	213a      	movs	r1, #58	; 0x3a
 800628e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8006292:	f7fc fccf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8006296:	2100      	movs	r1, #0
 8006298:	f24d 6006 	movw	r0, #54790	; 0xd606
 800629c:	f7fc fcca 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80062a0:	214a      	movs	r1, #74	; 0x4a
 80062a2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80062a6:	f7fc fcc5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80062aa:	2100      	movs	r1, #0
 80062ac:	f24d 6008 	movw	r0, #54792	; 0xd608
 80062b0:	f7fc fcc0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80062b4:	215c      	movs	r1, #92	; 0x5c
 80062b6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80062ba:	f7fc fcbb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80062be:	2100      	movs	r1, #0
 80062c0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80062c4:	f7fc fcb6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80062c8:	2181      	movs	r1, #129	; 0x81
 80062ca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80062ce:	f7fc fcb1 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80062d2:	2100      	movs	r1, #0
 80062d4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80062d8:	f7fc fcac 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80062dc:	21a6      	movs	r1, #166	; 0xa6
 80062de:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80062e2:	f7fc fca7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80062e6:	2100      	movs	r1, #0
 80062e8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80062ec:	f7fc fca2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80062f0:	21e5      	movs	r1, #229	; 0xe5
 80062f2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80062f6:	f7fc fc9d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80062fa:	2101      	movs	r1, #1
 80062fc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8006300:	f7fc fc98 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8006304:	2113      	movs	r1, #19
 8006306:	f24d 6011 	movw	r0, #54801	; 0xd611
 800630a:	f7fc fc93 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800630e:	2101      	movs	r1, #1
 8006310:	f24d 6012 	movw	r0, #54802	; 0xd612
 8006314:	f7fc fc8e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006318:	2154      	movs	r1, #84	; 0x54
 800631a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800631e:	f7fc fc89 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8006322:	2101      	movs	r1, #1
 8006324:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006328:	f7fc fc84 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800632c:	2182      	movs	r1, #130	; 0x82
 800632e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8006332:	f7fc fc7f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8006336:	2101      	movs	r1, #1
 8006338:	f24d 6016 	movw	r0, #54806	; 0xd616
 800633c:	f7fc fc7a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006340:	21ca      	movs	r1, #202	; 0xca
 8006342:	f24d 6017 	movw	r0, #54807	; 0xd617
 8006346:	f7fc fc75 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800634a:	2102      	movs	r1, #2
 800634c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006350:	f7fc fc70 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8006354:	2100      	movs	r1, #0
 8006356:	f24d 6019 	movw	r0, #54809	; 0xd619
 800635a:	f7fc fc6b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800635e:	2102      	movs	r1, #2
 8006360:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8006364:	f7fc fc66 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006368:	2101      	movs	r1, #1
 800636a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800636e:	f7fc fc61 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8006372:	2102      	movs	r1, #2
 8006374:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006378:	f7fc fc5c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800637c:	2134      	movs	r1, #52	; 0x34
 800637e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8006382:	f7fc fc57 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8006386:	2102      	movs	r1, #2
 8006388:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800638c:	f7fc fc52 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006390:	2167      	movs	r1, #103	; 0x67
 8006392:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8006396:	f7fc fc4d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800639a:	2102      	movs	r1, #2
 800639c:	f24d 6020 	movw	r0, #54816	; 0xd620
 80063a0:	f7fc fc48 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80063a4:	2184      	movs	r1, #132	; 0x84
 80063a6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80063aa:	f7fc fc43 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80063ae:	2102      	movs	r1, #2
 80063b0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80063b4:	f7fc fc3e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80063b8:	21a4      	movs	r1, #164	; 0xa4
 80063ba:	f24d 6023 	movw	r0, #54819	; 0xd623
 80063be:	f7fc fc39 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80063c2:	2102      	movs	r1, #2
 80063c4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80063c8:	f7fc fc34 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80063cc:	21b7      	movs	r1, #183	; 0xb7
 80063ce:	f24d 6025 	movw	r0, #54821	; 0xd625
 80063d2:	f7fc fc2f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80063d6:	2102      	movs	r1, #2
 80063d8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80063dc:	f7fc fc2a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80063e0:	21cf      	movs	r1, #207	; 0xcf
 80063e2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80063e6:	f7fc fc25 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80063ea:	2102      	movs	r1, #2
 80063ec:	f24d 6028 	movw	r0, #54824	; 0xd628
 80063f0:	f7fc fc20 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80063f4:	21de      	movs	r1, #222	; 0xde
 80063f6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80063fa:	f7fc fc1b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80063fe:	2102      	movs	r1, #2
 8006400:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8006404:	f7fc fc16 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8006408:	21f2      	movs	r1, #242	; 0xf2
 800640a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800640e:	f7fc fc11 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8006412:	2102      	movs	r1, #2
 8006414:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006418:	f7fc fc0c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800641c:	21fe      	movs	r1, #254	; 0xfe
 800641e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8006422:	f7fc fc07 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8006426:	2103      	movs	r1, #3
 8006428:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800642c:	f7fc fc02 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006430:	2110      	movs	r1, #16
 8006432:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006436:	f7fc fbfd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800643a:	2103      	movs	r1, #3
 800643c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006440:	f7fc fbf8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8006444:	2133      	movs	r1, #51	; 0x33
 8006446:	f24d 6031 	movw	r0, #54833	; 0xd631
 800644a:	f7fc fbf3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800644e:	2103      	movs	r1, #3
 8006450:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006454:	f7fc fbee 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006458:	216d      	movs	r1, #109	; 0x6d
 800645a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800645e:	f7fc fbe9 	bl	8002c34 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8006462:	2155      	movs	r1, #85	; 0x55
 8006464:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006468:	f7fc fbe4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800646c:	21aa      	movs	r1, #170	; 0xaa
 800646e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006472:	f7fc fbdf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006476:	2152      	movs	r1, #82	; 0x52
 8006478:	f24f 0002 	movw	r0, #61442	; 0xf002
 800647c:	f7fc fbda 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006480:	2108      	movs	r1, #8
 8006482:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006486:	f7fc fbd5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800648a:	2100      	movs	r1, #0
 800648c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006490:	f7fc fbd0 	bl	8002c34 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006494:	21cc      	movs	r1, #204	; 0xcc
 8006496:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800649a:	f7fc fbcb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800649e:	2100      	movs	r1, #0
 80064a0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80064a4:	f7fc fbc6 	bl	8002c34 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80064a8:	2105      	movs	r1, #5
 80064aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80064ae:	f7fc fbc1 	bl	8002c34 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80064b2:	2170      	movs	r1, #112	; 0x70
 80064b4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80064b8:	f7fc fbbc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80064bc:	2170      	movs	r1, #112	; 0x70
 80064be:	f24b 7001 	movw	r0, #46849	; 0xb701
 80064c2:	f7fc fbb7 	bl	8002c34 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80064c6:	2101      	movs	r1, #1
 80064c8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80064cc:	f7fc fbb2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80064d0:	2103      	movs	r1, #3
 80064d2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80064d6:	f7fc fbad 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80064da:	2103      	movs	r1, #3
 80064dc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80064e0:	f7fc fba8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80064e4:	2103      	movs	r1, #3
 80064e6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80064ea:	f7fc fba3 	bl	8002c34 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80064ee:	2102      	movs	r1, #2
 80064f0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80064f4:	f7fc fb9e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80064f8:	2100      	movs	r1, #0
 80064fa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80064fe:	f7fc fb99 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006502:	2100      	movs	r1, #0
 8006504:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006508:	f7fc fb94 	bl	8002c34 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800650c:	21d0      	movs	r1, #208	; 0xd0
 800650e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8006512:	f7fc fb8f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8006516:	2102      	movs	r1, #2
 8006518:	f64c 1001 	movw	r0, #51457	; 0xc901
 800651c:	f7fc fb8a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006520:	2150      	movs	r1, #80	; 0x50
 8006522:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006526:	f7fc fb85 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800652a:	2150      	movs	r1, #80	; 0x50
 800652c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006530:	f7fc fb80 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006534:	2150      	movs	r1, #80	; 0x50
 8006536:	f64c 1004 	movw	r0, #51460	; 0xc904
 800653a:	f7fc fb7b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800653e:	2100      	movs	r1, #0
 8006540:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006544:	f7fc fb76 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006548:	2155      	movs	r1, #85	; 0x55
 800654a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800654e:	f7fc fb71 	bl	8002c34 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006552:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006556:	f7fc fae1 	bl	8002b1c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800655a:	2001      	movs	r0, #1
 800655c:	f7fa fde8 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006560:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006564:	f7fc fada 	bl	8002b1c <LCD_WR_REG>
 8006568:	f001 bd18 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800656c:	4bec      	ldr	r3, [pc, #944]	; (8006920 <LCD_Init+0x27b8>)
 800656e:	889b      	ldrh	r3, [r3, #4]
 8006570:	f249 3225 	movw	r2, #37669	; 0x9325
 8006574:	4293      	cmp	r3, r2
 8006576:	f040 80d7 	bne.w	8006728 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800657a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800657e:	20e5      	movs	r0, #229	; 0xe5
 8006580:	f7fc fb58 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006588:	2001      	movs	r0, #1
 800658a:	f7fc fb53 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800658e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006592:	2002      	movs	r0, #2
 8006594:	f7fc fb4e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006598:	f241 0130 	movw	r1, #4144	; 0x1030
 800659c:	2003      	movs	r0, #3
 800659e:	f7fc fb49 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80065a2:	2100      	movs	r1, #0
 80065a4:	2004      	movs	r0, #4
 80065a6:	f7fc fb45 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80065aa:	f240 2102 	movw	r1, #514	; 0x202
 80065ae:	2008      	movs	r0, #8
 80065b0:	f7fc fb40 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80065b4:	2100      	movs	r1, #0
 80065b6:	2009      	movs	r0, #9
 80065b8:	f7fc fb3c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80065bc:	2100      	movs	r1, #0
 80065be:	200a      	movs	r0, #10
 80065c0:	f7fc fb38 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80065c4:	2100      	movs	r1, #0
 80065c6:	200c      	movs	r0, #12
 80065c8:	f7fc fb34 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80065cc:	2100      	movs	r1, #0
 80065ce:	200d      	movs	r0, #13
 80065d0:	f7fc fb30 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80065d4:	2100      	movs	r1, #0
 80065d6:	200f      	movs	r0, #15
 80065d8:	f7fc fb2c 	bl	8002c34 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80065dc:	2100      	movs	r1, #0
 80065de:	2010      	movs	r0, #16
 80065e0:	f7fc fb28 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80065e4:	2107      	movs	r1, #7
 80065e6:	2011      	movs	r0, #17
 80065e8:	f7fc fb24 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80065ec:	2100      	movs	r1, #0
 80065ee:	2012      	movs	r0, #18
 80065f0:	f7fc fb20 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80065f4:	2100      	movs	r1, #0
 80065f6:	2013      	movs	r0, #19
 80065f8:	f7fc fb1c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80065fc:	2100      	movs	r1, #0
 80065fe:	2007      	movs	r0, #7
 8006600:	f7fc fb18 	bl	8002c34 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006604:	f241 6190 	movw	r1, #5776	; 0x1690
 8006608:	2010      	movs	r0, #16
 800660a:	f7fc fb13 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800660e:	f240 2127 	movw	r1, #551	; 0x227
 8006612:	2011      	movs	r0, #17
 8006614:	f7fc fb0e 	bl	8002c34 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006618:	219d      	movs	r1, #157	; 0x9d
 800661a:	2012      	movs	r0, #18
 800661c:	f7fc fb0a 	bl	8002c34 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006620:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006624:	2013      	movs	r0, #19
 8006626:	f7fc fb05 	bl	8002c34 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800662a:	2125      	movs	r1, #37	; 0x25
 800662c:	2029      	movs	r0, #41	; 0x29
 800662e:	f7fc fb01 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006632:	210d      	movs	r1, #13
 8006634:	202b      	movs	r0, #43	; 0x2b
 8006636:	f7fc fafd 	bl	8002c34 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800663a:	2107      	movs	r1, #7
 800663c:	2030      	movs	r0, #48	; 0x30
 800663e:	f7fc faf9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8006642:	f240 3103 	movw	r1, #771	; 0x303
 8006646:	2031      	movs	r0, #49	; 0x31
 8006648:	f7fc faf4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800664c:	2103      	movs	r1, #3
 800664e:	2032      	movs	r0, #50	; 0x32
 8006650:	f7fc faf0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006654:	f240 2106 	movw	r1, #518	; 0x206
 8006658:	2035      	movs	r0, #53	; 0x35
 800665a:	f7fc faeb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800665e:	2108      	movs	r1, #8
 8006660:	2036      	movs	r0, #54	; 0x36
 8006662:	f7fc fae7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006666:	f240 4106 	movw	r1, #1030	; 0x406
 800666a:	2037      	movs	r0, #55	; 0x37
 800666c:	f7fc fae2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006670:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006674:	2038      	movs	r0, #56	; 0x38
 8006676:	f7fc fadd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800667a:	2107      	movs	r1, #7
 800667c:	2039      	movs	r0, #57	; 0x39
 800667e:	f7fc fad9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8006682:	f240 6102 	movw	r1, #1538	; 0x602
 8006686:	203c      	movs	r0, #60	; 0x3c
 8006688:	f7fc fad4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800668c:	2108      	movs	r1, #8
 800668e:	203d      	movs	r0, #61	; 0x3d
 8006690:	f7fc fad0 	bl	8002c34 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8006694:	2100      	movs	r1, #0
 8006696:	2050      	movs	r0, #80	; 0x50
 8006698:	f7fc facc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800669c:	21ef      	movs	r1, #239	; 0xef
 800669e:	2051      	movs	r0, #81	; 0x51
 80066a0:	f7fc fac8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80066a4:	2100      	movs	r1, #0
 80066a6:	2052      	movs	r0, #82	; 0x52
 80066a8:	f7fc fac4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80066ac:	f240 113f 	movw	r1, #319	; 0x13f
 80066b0:	2053      	movs	r0, #83	; 0x53
 80066b2:	f7fc fabf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80066b6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80066ba:	2060      	movs	r0, #96	; 0x60
 80066bc:	f7fc faba 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80066c0:	2101      	movs	r1, #1
 80066c2:	2061      	movs	r0, #97	; 0x61
 80066c4:	f7fc fab6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80066c8:	2100      	movs	r1, #0
 80066ca:	206a      	movs	r0, #106	; 0x6a
 80066cc:	f7fc fab2 	bl	8002c34 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80066d0:	2100      	movs	r1, #0
 80066d2:	2080      	movs	r0, #128	; 0x80
 80066d4:	f7fc faae 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80066d8:	2100      	movs	r1, #0
 80066da:	2081      	movs	r0, #129	; 0x81
 80066dc:	f7fc faaa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80066e0:	2100      	movs	r1, #0
 80066e2:	2082      	movs	r0, #130	; 0x82
 80066e4:	f7fc faa6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80066e8:	2100      	movs	r1, #0
 80066ea:	2083      	movs	r0, #131	; 0x83
 80066ec:	f7fc faa2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80066f0:	2100      	movs	r1, #0
 80066f2:	2084      	movs	r0, #132	; 0x84
 80066f4:	f7fc fa9e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80066f8:	2100      	movs	r1, #0
 80066fa:	2085      	movs	r0, #133	; 0x85
 80066fc:	f7fc fa9a 	bl	8002c34 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006700:	2110      	movs	r1, #16
 8006702:	2090      	movs	r0, #144	; 0x90
 8006704:	f7fc fa96 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006708:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800670c:	2092      	movs	r0, #146	; 0x92
 800670e:	f7fc fa91 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8006712:	f240 1133 	movw	r1, #307	; 0x133
 8006716:	2007      	movs	r0, #7
 8006718:	f7fc fa8c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800671c:	2122      	movs	r1, #34	; 0x22
 800671e:	2000      	movs	r0, #0
 8006720:	f7fc fa88 	bl	8002c34 <LCD_WriteReg>
 8006724:	f001 bc3a 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006728:	4b7d      	ldr	r3, [pc, #500]	; (8006920 <LCD_Init+0x27b8>)
 800672a:	889b      	ldrh	r3, [r3, #4]
 800672c:	f249 3228 	movw	r2, #37672	; 0x9328
 8006730:	4293      	cmp	r3, r2
 8006732:	f040 80f7 	bne.w	8006924 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8006736:	f241 018f 	movw	r1, #4239	; 0x108f
 800673a:	20ec      	movs	r0, #236	; 0xec
 800673c:	f7fc fa7a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8006740:	f241 2134 	movw	r1, #4660	; 0x1234
 8006744:	20ef      	movs	r0, #239	; 0xef
 8006746:	f7fc fa75 	bl	8002c34 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800674a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800674e:	2001      	movs	r0, #1
 8006750:	f7fc fa70 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8006754:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006758:	2002      	movs	r0, #2
 800675a:	f7fc fa6b 	bl	8002c34 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800675e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006762:	2003      	movs	r0, #3
 8006764:	f7fc fa66 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006768:	2100      	movs	r1, #0
 800676a:	2004      	movs	r0, #4
 800676c:	f7fc fa62 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006770:	f240 2102 	movw	r1, #514	; 0x202
 8006774:	2008      	movs	r0, #8
 8006776:	f7fc fa5d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800677a:	2100      	movs	r1, #0
 800677c:	2009      	movs	r0, #9
 800677e:	f7fc fa59 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8006782:	2100      	movs	r1, #0
 8006784:	200a      	movs	r0, #10
 8006786:	f7fc fa55 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800678a:	2101      	movs	r1, #1
 800678c:	200c      	movs	r0, #12
 800678e:	f7fc fa51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8006792:	2100      	movs	r1, #0
 8006794:	200d      	movs	r0, #13
 8006796:	f7fc fa4d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800679a:	2100      	movs	r1, #0
 800679c:	200f      	movs	r0, #15
 800679e:	f7fc fa49 	bl	8002c34 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80067a2:	2100      	movs	r1, #0
 80067a4:	2010      	movs	r0, #16
 80067a6:	f7fc fa45 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80067aa:	2107      	movs	r1, #7
 80067ac:	2011      	movs	r0, #17
 80067ae:	f7fc fa41 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80067b2:	2100      	movs	r1, #0
 80067b4:	2012      	movs	r0, #18
 80067b6:	f7fc fa3d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80067ba:	2100      	movs	r1, #0
 80067bc:	2013      	movs	r0, #19
 80067be:	f7fc fa39 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80067c2:	2101      	movs	r1, #1
 80067c4:	2007      	movs	r0, #7
 80067c6:	f7fc fa35 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 80067ca:	2032      	movs	r0, #50	; 0x32
 80067cc:	f7fa fcb0 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80067d0:	f241 4190 	movw	r1, #5264	; 0x1490
 80067d4:	2010      	movs	r0, #16
 80067d6:	f7fc fa2d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80067da:	f240 2127 	movw	r1, #551	; 0x227
 80067de:	2011      	movs	r0, #17
 80067e0:	f7fc fa28 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 80067e4:	2032      	movs	r0, #50	; 0x32
 80067e6:	f7fa fca3 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80067ea:	218a      	movs	r1, #138	; 0x8a
 80067ec:	2012      	movs	r0, #18
 80067ee:	f7fc fa21 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 80067f2:	2032      	movs	r0, #50	; 0x32
 80067f4:	f7fa fc9c 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80067f8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80067fc:	2013      	movs	r0, #19
 80067fe:	f7fc fa19 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8006802:	2106      	movs	r1, #6
 8006804:	2029      	movs	r0, #41	; 0x29
 8006806:	f7fc fa15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800680a:	210d      	movs	r1, #13
 800680c:	202b      	movs	r0, #43	; 0x2b
 800680e:	f7fc fa11 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006812:	2032      	movs	r0, #50	; 0x32
 8006814:	f7fa fc8c 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006818:	2100      	movs	r1, #0
 800681a:	2020      	movs	r0, #32
 800681c:	f7fc fa0a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006820:	2100      	movs	r1, #0
 8006822:	2021      	movs	r0, #33	; 0x21
 8006824:	f7fc fa06 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006828:	2032      	movs	r0, #50	; 0x32
 800682a:	f7fa fc81 	bl	8001130 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800682e:	2100      	movs	r1, #0
 8006830:	2030      	movs	r0, #48	; 0x30
 8006832:	f7fc f9ff 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8006836:	f240 6104 	movw	r1, #1540	; 0x604
 800683a:	2031      	movs	r0, #49	; 0x31
 800683c:	f7fc f9fa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8006840:	f240 3105 	movw	r1, #773	; 0x305
 8006844:	2032      	movs	r0, #50	; 0x32
 8006846:	f7fc f9f5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800684a:	2100      	movs	r1, #0
 800684c:	2035      	movs	r0, #53	; 0x35
 800684e:	f7fc f9f1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8006852:	f640 4109 	movw	r1, #3081	; 0xc09
 8006856:	2036      	movs	r0, #54	; 0x36
 8006858:	f7fc f9ec 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800685c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006860:	2037      	movs	r0, #55	; 0x37
 8006862:	f7fc f9e7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8006866:	f240 3101 	movw	r1, #769	; 0x301
 800686a:	2038      	movs	r0, #56	; 0x38
 800686c:	f7fc f9e2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006870:	f240 7107 	movw	r1, #1799	; 0x707
 8006874:	2039      	movs	r0, #57	; 0x39
 8006876:	f7fc f9dd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800687a:	2100      	movs	r1, #0
 800687c:	203c      	movs	r0, #60	; 0x3c
 800687e:	f7fc f9d9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8006882:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006886:	203d      	movs	r0, #61	; 0x3d
 8006888:	f7fc f9d4 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 800688c:	2032      	movs	r0, #50	; 0x32
 800688e:	f7fa fc4f 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8006892:	2100      	movs	r1, #0
 8006894:	2050      	movs	r0, #80	; 0x50
 8006896:	f7fc f9cd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800689a:	21ef      	movs	r1, #239	; 0xef
 800689c:	2051      	movs	r0, #81	; 0x51
 800689e:	f7fc f9c9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80068a2:	2100      	movs	r1, #0
 80068a4:	2052      	movs	r0, #82	; 0x52
 80068a6:	f7fc f9c5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80068aa:	f240 113f 	movw	r1, #319	; 0x13f
 80068ae:	2053      	movs	r0, #83	; 0x53
 80068b0:	f7fc f9c0 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80068b4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80068b8:	2060      	movs	r0, #96	; 0x60
 80068ba:	f7fc f9bb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80068be:	2101      	movs	r1, #1
 80068c0:	2061      	movs	r0, #97	; 0x61
 80068c2:	f7fc f9b7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80068c6:	2100      	movs	r1, #0
 80068c8:	206a      	movs	r0, #106	; 0x6a
 80068ca:	f7fc f9b3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80068ce:	2100      	movs	r1, #0
 80068d0:	2080      	movs	r0, #128	; 0x80
 80068d2:	f7fc f9af 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80068d6:	2100      	movs	r1, #0
 80068d8:	2081      	movs	r0, #129	; 0x81
 80068da:	f7fc f9ab 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80068de:	2100      	movs	r1, #0
 80068e0:	2082      	movs	r0, #130	; 0x82
 80068e2:	f7fc f9a7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80068e6:	2100      	movs	r1, #0
 80068e8:	2083      	movs	r0, #131	; 0x83
 80068ea:	f7fc f9a3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80068ee:	2100      	movs	r1, #0
 80068f0:	2084      	movs	r0, #132	; 0x84
 80068f2:	f7fc f99f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80068f6:	2100      	movs	r1, #0
 80068f8:	2085      	movs	r0, #133	; 0x85
 80068fa:	f7fc f99b 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80068fe:	2110      	movs	r1, #16
 8006900:	2090      	movs	r0, #144	; 0x90
 8006902:	f7fc f997 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800690a:	2092      	movs	r0, #146	; 0x92
 800690c:	f7fc f992 	bl	8002c34 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006910:	f240 1133 	movw	r1, #307	; 0x133
 8006914:	2007      	movs	r0, #7
 8006916:	f7fc f98d 	bl	8002c34 <LCD_WriteReg>
 800691a:	f001 bb3f 	b.w	8007f9c <LCD_Init+0x3e34>
 800691e:	bf00      	nop
 8006920:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0x9320) //测试OK.
 8006924:	4bce      	ldr	r3, [pc, #824]	; (8006c60 <LCD_Init+0x2af8>)
 8006926:	889b      	ldrh	r3, [r3, #4]
 8006928:	f249 3220 	movw	r2, #37664	; 0x9320
 800692c:	4293      	cmp	r3, r2
 800692e:	f040 80ad 	bne.w	8006a8c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8006932:	2100      	movs	r1, #0
 8006934:	2000      	movs	r0, #0
 8006936:	f7fc f97d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800693a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800693e:	2001      	movs	r0, #1
 8006940:	f7fc f978 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8006944:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006948:	2002      	movs	r0, #2
 800694a:	f7fc f973 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800694e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006952:	2003      	movs	r0, #3
 8006954:	f7fc f96e 	bl	8002c34 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006958:	2100      	movs	r1, #0
 800695a:	2004      	movs	r0, #4
 800695c:	f7fc f96a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006960:	f240 2102 	movw	r1, #514	; 0x202
 8006964:	2008      	movs	r0, #8
 8006966:	f7fc f965 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800696a:	2100      	movs	r1, #0
 800696c:	2009      	movs	r0, #9
 800696e:	f7fc f961 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8006972:	2100      	movs	r1, #0
 8006974:	200a      	movs	r0, #10
 8006976:	f7fc f95d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800697a:	2101      	movs	r1, #1
 800697c:	200c      	movs	r0, #12
 800697e:	f7fc f959 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8006982:	2100      	movs	r1, #0
 8006984:	200d      	movs	r0, #13
 8006986:	f7fc f955 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800698a:	2100      	movs	r1, #0
 800698c:	200f      	movs	r0, #15
 800698e:	f7fc f951 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006992:	2032      	movs	r0, #50	; 0x32
 8006994:	f7fa fbcc 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8006998:	f240 1101 	movw	r1, #257	; 0x101
 800699c:	2007      	movs	r0, #7
 800699e:	f7fc f949 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 80069a2:	2032      	movs	r0, #50	; 0x32
 80069a4:	f7fa fbc4 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80069a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80069ac:	2010      	movs	r0, #16
 80069ae:	f7fc f941 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80069b2:	2107      	movs	r1, #7
 80069b4:	2011      	movs	r0, #17
 80069b6:	f7fc f93d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80069ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80069be:	2012      	movs	r0, #18
 80069c0:	f7fc f938 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80069c4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80069c8:	2013      	movs	r0, #19
 80069ca:	f7fc f933 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80069ce:	2100      	movs	r1, #0
 80069d0:	2029      	movs	r0, #41	; 0x29
 80069d2:	f7fc f92f 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80069d6:	f244 0110 	movw	r1, #16400	; 0x4010
 80069da:	202b      	movs	r0, #43	; 0x2b
 80069dc:	f7fc f92a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80069e0:	2100      	movs	r1, #0
 80069e2:	2050      	movs	r0, #80	; 0x50
 80069e4:	f7fc f926 	bl	8002c34 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80069e8:	21ef      	movs	r1, #239	; 0xef
 80069ea:	2051      	movs	r0, #81	; 0x51
 80069ec:	f7fc f922 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80069f0:	2100      	movs	r1, #0
 80069f2:	2052      	movs	r0, #82	; 0x52
 80069f4:	f7fc f91e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80069f8:	f240 113f 	movw	r1, #319	; 0x13f
 80069fc:	2053      	movs	r0, #83	; 0x53
 80069fe:	f7fc f919 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8006a02:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006a06:	2060      	movs	r0, #96	; 0x60
 8006a08:	f7fc f914 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	2061      	movs	r0, #97	; 0x61
 8006a10:	f7fc f910 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8006a14:	2100      	movs	r1, #0
 8006a16:	206a      	movs	r0, #106	; 0x6a
 8006a18:	f7fc f90c 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2080      	movs	r0, #128	; 0x80
 8006a20:	f7fc f908 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8006a24:	2100      	movs	r1, #0
 8006a26:	2081      	movs	r0, #129	; 0x81
 8006a28:	f7fc f904 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	2082      	movs	r0, #130	; 0x82
 8006a30:	f7fc f900 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8006a34:	2100      	movs	r1, #0
 8006a36:	2083      	movs	r0, #131	; 0x83
 8006a38:	f7fc f8fc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	2084      	movs	r0, #132	; 0x84
 8006a40:	f7fc f8f8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8006a44:	2100      	movs	r1, #0
 8006a46:	2085      	movs	r0, #133	; 0x85
 8006a48:	f7fc f8f4 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8006a4c:	2110      	movs	r1, #16
 8006a4e:	2090      	movs	r0, #144	; 0x90
 8006a50:	f7fc f8f0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8006a54:	2100      	movs	r1, #0
 8006a56:	2092      	movs	r0, #146	; 0x92
 8006a58:	f7fc f8ec 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	2093      	movs	r0, #147	; 0x93
 8006a60:	f7fc f8e8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8006a64:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006a68:	2095      	movs	r0, #149	; 0x95
 8006a6a:	f7fc f8e3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8006a6e:	2100      	movs	r1, #0
 8006a70:	2097      	movs	r0, #151	; 0x97
 8006a72:	f7fc f8df 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8006a76:	2100      	movs	r1, #0
 8006a78:	2098      	movs	r0, #152	; 0x98
 8006a7a:	f7fc f8db 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8006a7e:	f240 1173 	movw	r1, #371	; 0x173
 8006a82:	2007      	movs	r0, #7
 8006a84:	f7fc f8d6 	bl	8002c34 <LCD_WriteReg>
 8006a88:	f001 ba88 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8006a8c:	4b74      	ldr	r3, [pc, #464]	; (8006c60 <LCD_Init+0x2af8>)
 8006a8e:	889b      	ldrh	r3, [r3, #4]
 8006a90:	f249 3231 	movw	r2, #37681	; 0x9331
 8006a94:	4293      	cmp	r3, r2
 8006a96:	f040 80e5 	bne.w	8006c64 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8006a9a:	f241 0114 	movw	r1, #4116	; 0x1014
 8006a9e:	20e7      	movs	r0, #231	; 0xe7
 8006aa0:	f7fc f8c8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7fc f8c3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8006aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ab2:	2002      	movs	r0, #2
 8006ab4:	f7fc f8be 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006ab8:	f241 0138 	movw	r1, #4152	; 0x1038
 8006abc:	2003      	movs	r0, #3
 8006abe:	f7fc f8b9 	bl	8002c34 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006ac2:	f240 2102 	movw	r1, #514	; 0x202
 8006ac6:	2008      	movs	r0, #8
 8006ac8:	f7fc f8b4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006acc:	2100      	movs	r1, #0
 8006ace:	2009      	movs	r0, #9
 8006ad0:	f7fc f8b0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	200a      	movs	r0, #10
 8006ad8:	f7fc f8ac 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006adc:	2100      	movs	r1, #0
 8006ade:	200c      	movs	r0, #12
 8006ae0:	f7fc f8a8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	200d      	movs	r0, #13
 8006ae8:	f7fc f8a4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006aec:	2100      	movs	r1, #0
 8006aee:	200f      	movs	r0, #15
 8006af0:	f7fc f8a0 	bl	8002c34 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006af4:	2100      	movs	r1, #0
 8006af6:	2010      	movs	r0, #16
 8006af8:	f7fc f89c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006afc:	2107      	movs	r1, #7
 8006afe:	2011      	movs	r0, #17
 8006b00:	f7fc f898 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8006b04:	2100      	movs	r1, #0
 8006b06:	2012      	movs	r0, #18
 8006b08:	f7fc f894 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2013      	movs	r0, #19
 8006b10:	f7fc f890 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8006b14:	20c8      	movs	r0, #200	; 0xc8
 8006b16:	f7fa fb0b 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006b1a:	f241 6190 	movw	r1, #5776	; 0x1690
 8006b1e:	2010      	movs	r0, #16
 8006b20:	f7fc f888 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8006b24:	f240 2127 	movw	r1, #551	; 0x227
 8006b28:	2011      	movs	r0, #17
 8006b2a:	f7fc f883 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006b2e:	2032      	movs	r0, #50	; 0x32
 8006b30:	f7fa fafe 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8006b34:	210c      	movs	r1, #12
 8006b36:	2012      	movs	r0, #18
 8006b38:	f7fc f87c 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006b3c:	2032      	movs	r0, #50	; 0x32
 8006b3e:	f7fa faf7 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8006b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b46:	2013      	movs	r0, #19
 8006b48:	f7fc f874 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006b4c:	2111      	movs	r1, #17
 8006b4e:	2029      	movs	r0, #41	; 0x29
 8006b50:	f7fc f870 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8006b54:	210b      	movs	r1, #11
 8006b56:	202b      	movs	r0, #43	; 0x2b
 8006b58:	f7fc f86c 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006b5c:	2032      	movs	r0, #50	; 0x32
 8006b5e:	f7fa fae7 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8006b62:	2100      	movs	r1, #0
 8006b64:	2020      	movs	r0, #32
 8006b66:	f7fc f865 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8006b6a:	f240 113f 	movw	r1, #319	; 0x13f
 8006b6e:	2021      	movs	r0, #33	; 0x21
 8006b70:	f7fc f860 	bl	8002c34 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8006b74:	2100      	movs	r1, #0
 8006b76:	2030      	movs	r0, #48	; 0x30
 8006b78:	f7fc f85c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8006b7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006b80:	2031      	movs	r0, #49	; 0x31
 8006b82:	f7fc f857 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8006b86:	2100      	movs	r1, #0
 8006b88:	2032      	movs	r0, #50	; 0x32
 8006b8a:	f7fc f853 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8006b8e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006b92:	2035      	movs	r0, #53	; 0x35
 8006b94:	f7fc f84e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006b98:	f241 610a 	movw	r1, #5642	; 0x160a
 8006b9c:	2036      	movs	r0, #54	; 0x36
 8006b9e:	f7fc f849 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006ba2:	f240 7107 	movw	r1, #1799	; 0x707
 8006ba6:	2037      	movs	r0, #55	; 0x37
 8006ba8:	f7fc f844 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8006bac:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006bb0:	2038      	movs	r0, #56	; 0x38
 8006bb2:	f7fc f83f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006bb6:	f240 7107 	movw	r1, #1799	; 0x707
 8006bba:	2039      	movs	r0, #57	; 0x39
 8006bbc:	f7fc f83a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006bc0:	f240 4102 	movw	r1, #1026	; 0x402
 8006bc4:	203c      	movs	r0, #60	; 0x3c
 8006bc6:	f7fc f835 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8006bca:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006bce:	203d      	movs	r0, #61	; 0x3d
 8006bd0:	f7fc f830 	bl	8002c34 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2050      	movs	r0, #80	; 0x50
 8006bd8:	f7fc f82c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8006bdc:	21ef      	movs	r1, #239	; 0xef
 8006bde:	2051      	movs	r0, #81	; 0x51
 8006be0:	f7fc f828 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006be4:	2100      	movs	r1, #0
 8006be6:	2052      	movs	r0, #82	; 0x52
 8006be8:	f7fc f824 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006bec:	f240 113f 	movw	r1, #319	; 0x13f
 8006bf0:	2053      	movs	r0, #83	; 0x53
 8006bf2:	f7fc f81f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006bf6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006bfa:	2060      	movs	r0, #96	; 0x60
 8006bfc:	f7fc f81a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8006c00:	2101      	movs	r1, #1
 8006c02:	2061      	movs	r0, #97	; 0x61
 8006c04:	f7fc f816 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006c08:	2100      	movs	r1, #0
 8006c0a:	206a      	movs	r0, #106	; 0x6a
 8006c0c:	f7fc f812 	bl	8002c34 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006c10:	2100      	movs	r1, #0
 8006c12:	2080      	movs	r0, #128	; 0x80
 8006c14:	f7fc f80e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2081      	movs	r0, #129	; 0x81
 8006c1c:	f7fc f80a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006c20:	2100      	movs	r1, #0
 8006c22:	2082      	movs	r0, #130	; 0x82
 8006c24:	f7fc f806 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006c28:	2100      	movs	r1, #0
 8006c2a:	2083      	movs	r0, #131	; 0x83
 8006c2c:	f7fc f802 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006c30:	2100      	movs	r1, #0
 8006c32:	2084      	movs	r0, #132	; 0x84
 8006c34:	f7fb fffe 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006c38:	2100      	movs	r1, #0
 8006c3a:	2085      	movs	r0, #133	; 0x85
 8006c3c:	f7fb fffa 	bl	8002c34 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006c40:	2110      	movs	r1, #16
 8006c42:	2090      	movs	r0, #144	; 0x90
 8006c44:	f7fb fff6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006c48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c4c:	2092      	movs	r0, #146	; 0x92
 8006c4e:	f7fb fff1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006c52:	f240 1133 	movw	r1, #307	; 0x133
 8006c56:	2007      	movs	r0, #7
 8006c58:	f7fb ffec 	bl	8002c34 <LCD_WriteReg>
 8006c5c:	f001 b99e 	b.w	8007f9c <LCD_Init+0x3e34>
 8006c60:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0x5408) {
 8006c64:	4be2      	ldr	r3, [pc, #904]	; (8006ff0 <LCD_Init+0x2e88>)
 8006c66:	889b      	ldrh	r3, [r3, #4]
 8006c68:	f245 4208 	movw	r2, #21512	; 0x5408
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	f040 80a3 	bne.w	8006db8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8006c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c76:	2001      	movs	r0, #1
 8006c78:	f7fb ffdc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8006c7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c80:	2002      	movs	r0, #2
 8006c82:	f7fb ffd7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8006c86:	f241 0130 	movw	r1, #4144	; 0x1030
 8006c8a:	2003      	movs	r0, #3
 8006c8c:	f7fb ffd2 	bl	8002c34 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8006c90:	2100      	movs	r1, #0
 8006c92:	2004      	movs	r0, #4
 8006c94:	f7fb ffce 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8006c98:	f240 2107 	movw	r1, #519	; 0x207
 8006c9c:	2008      	movs	r0, #8
 8006c9e:	f7fb ffc9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2009      	movs	r0, #9
 8006ca6:	f7fb ffc5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8006caa:	2100      	movs	r1, #0
 8006cac:	200a      	movs	r0, #10
 8006cae:	f7fb ffc1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	200c      	movs	r0, #12
 8006cb6:	f7fb ffbd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8006cba:	2100      	movs	r1, #0
 8006cbc:	200d      	movs	r0, #13
 8006cbe:	f7fb ffb9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	200f      	movs	r0, #15
 8006cc6:	f7fb ffb5 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8006cca:	2014      	movs	r0, #20
 8006ccc:	f7fa fa30 	bl	8001130 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8006cd0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006cd4:	2010      	movs	r0, #16
 8006cd6:	f7fb ffad 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8006cda:	2101      	movs	r1, #1
 8006cdc:	2011      	movs	r0, #17
 8006cde:	f7fb ffa9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	2017      	movs	r0, #23
 8006ce6:	f7fb ffa5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8006cea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006cee:	2012      	movs	r0, #18
 8006cf0:	f7fb ffa0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8006cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006cf8:	2013      	movs	r0, #19
 8006cfa:	f7fb ff9b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8006cfe:	2109      	movs	r1, #9
 8006d00:	2029      	movs	r0, #41	; 0x29
 8006d02:	f7fb ff97 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8006d06:	2109      	movs	r1, #9
 8006d08:	202a      	movs	r0, #42	; 0x2a
 8006d0a:	f7fb ff93 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8006d0e:	2100      	movs	r1, #0
 8006d10:	20a4      	movs	r0, #164	; 0xa4
 8006d12:	f7fb ff8f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8006d16:	2100      	movs	r1, #0
 8006d18:	2050      	movs	r0, #80	; 0x50
 8006d1a:	f7fb ff8b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8006d1e:	21ef      	movs	r1, #239	; 0xef
 8006d20:	2051      	movs	r0, #81	; 0x51
 8006d22:	f7fb ff87 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8006d26:	2100      	movs	r1, #0
 8006d28:	2052      	movs	r0, #82	; 0x52
 8006d2a:	f7fb ff83 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8006d2e:	f240 113f 	movw	r1, #319	; 0x13f
 8006d32:	2053      	movs	r0, #83	; 0x53
 8006d34:	f7fb ff7e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8006d38:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006d3c:	2060      	movs	r0, #96	; 0x60
 8006d3e:	f7fb ff79 	bl	8002c34 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8006d42:	2101      	movs	r1, #1
 8006d44:	2061      	movs	r0, #97	; 0x61
 8006d46:	f7fb ff75 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	206a      	movs	r0, #106	; 0x6a
 8006d4e:	f7fb ff71 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8006d52:	2100      	movs	r1, #0
 8006d54:	2080      	movs	r0, #128	; 0x80
 8006d56:	f7fb ff6d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	2081      	movs	r0, #129	; 0x81
 8006d5e:	f7fb ff69 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8006d62:	2100      	movs	r1, #0
 8006d64:	2082      	movs	r0, #130	; 0x82
 8006d66:	f7fb ff65 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	2083      	movs	r0, #131	; 0x83
 8006d6e:	f7fb ff61 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8006d72:	2100      	movs	r1, #0
 8006d74:	2084      	movs	r0, #132	; 0x84
 8006d76:	f7fb ff5d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	2085      	movs	r0, #133	; 0x85
 8006d7e:	f7fb ff59 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8006d82:	2113      	movs	r1, #19
 8006d84:	2090      	movs	r0, #144	; 0x90
 8006d86:	f7fb ff55 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	2092      	movs	r0, #146	; 0x92
 8006d8e:	f7fb ff51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8006d92:	2103      	movs	r1, #3
 8006d94:	2093      	movs	r0, #147	; 0x93
 8006d96:	f7fb ff4d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8006d9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006d9e:	2095      	movs	r0, #149	; 0x95
 8006da0:	f7fb ff48 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8006da4:	f240 1173 	movw	r1, #371	; 0x173
 8006da8:	2007      	movs	r0, #7
 8006daa:	f7fb ff43 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006dae:	2032      	movs	r0, #50	; 0x32
 8006db0:	f7fa f9be 	bl	8001130 <HAL_Delay>
 8006db4:	f001 b8f2 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006db8:	4b8d      	ldr	r3, [pc, #564]	; (8006ff0 <LCD_Init+0x2e88>)
 8006dba:	889b      	ldrh	r3, [r3, #4]
 8006dbc:	f241 5205 	movw	r2, #5381	; 0x1505
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	f040 8117 	bne.w	8006ff4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	2007      	movs	r0, #7
 8006dca:	f7fb ff33 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006dce:	2032      	movs	r0, #50	; 0x32
 8006dd0:	f7fa f9ae 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8006dd4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006dd8:	2012      	movs	r0, #18
 8006dda:	f7fb ff2b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8006dde:	2101      	movs	r1, #1
 8006de0:	20a4      	movs	r0, #164	; 0xa4
 8006de2:	f7fb ff27 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8006de6:	210f      	movs	r1, #15
 8006de8:	2008      	movs	r0, #8
 8006dea:	f7fb ff23 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8006dee:	2108      	movs	r1, #8
 8006df0:	200a      	movs	r0, #10
 8006df2:	f7fb ff1f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8006df6:	2108      	movs	r1, #8
 8006df8:	200d      	movs	r0, #13
 8006dfa:	f7fb ff1b 	bl	8002c34 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8006dfe:	f240 7107 	movw	r1, #1799	; 0x707
 8006e02:	2030      	movs	r0, #48	; 0x30
 8006e04:	f7fb ff16 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8006e08:	2107      	movs	r1, #7
 8006e0a:	2031      	movs	r0, #49	; 0x31
 8006e0c:	f7fb ff12 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8006e10:	f240 6103 	movw	r1, #1539	; 0x603
 8006e14:	2032      	movs	r0, #50	; 0x32
 8006e16:	f7fb ff0d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8006e1a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e1e:	2033      	movs	r0, #51	; 0x33
 8006e20:	f7fb ff08 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8006e24:	f240 2102 	movw	r1, #514	; 0x202
 8006e28:	2034      	movs	r0, #52	; 0x34
 8006e2a:	f7fb ff03 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8006e2e:	2102      	movs	r1, #2
 8006e30:	2035      	movs	r0, #53	; 0x35
 8006e32:	f7fb feff 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8006e36:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8006e3a:	2036      	movs	r0, #54	; 0x36
 8006e3c:	f7fb fefa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006e40:	f240 7107 	movw	r1, #1799	; 0x707
 8006e44:	2037      	movs	r0, #55	; 0x37
 8006e46:	f7fb fef5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2038      	movs	r0, #56	; 0x38
 8006e4e:	f7fb fef1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8006e52:	2100      	movs	r1, #0
 8006e54:	2039      	movs	r0, #57	; 0x39
 8006e56:	f7fb feed 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8006e5a:	f240 7107 	movw	r1, #1799	; 0x707
 8006e5e:	203a      	movs	r0, #58	; 0x3a
 8006e60:	f7fb fee8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8006e64:	2100      	movs	r1, #0
 8006e66:	203b      	movs	r0, #59	; 0x3b
 8006e68:	f7fb fee4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8006e6c:	2107      	movs	r1, #7
 8006e6e:	203c      	movs	r0, #60	; 0x3c
 8006e70:	f7fb fee0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8006e74:	2100      	movs	r1, #0
 8006e76:	203d      	movs	r0, #61	; 0x3d
 8006e78:	f7fb fedc 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006e7c:	2032      	movs	r0, #50	; 0x32
 8006e7e:	f7fa f957 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8006e82:	2101      	movs	r1, #1
 8006e84:	2007      	movs	r0, #7
 8006e86:	f7fb fed5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	2017      	movs	r0, #23
 8006e8e:	f7fb fed1 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(50);
 8006e92:	2032      	movs	r0, #50	; 0x32
 8006e94:	f7fa f94c 	bl	8001130 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8006e98:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8006e9c:	2010      	movs	r0, #16
 8006e9e:	f7fb fec9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006ea2:	f240 2117 	movw	r1, #535	; 0x217
 8006ea6:	2011      	movs	r0, #17
 8006ea8:	f7fb fec4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8006eac:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006eb0:	2012      	movs	r0, #18
 8006eb2:	f7fb febf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006eb6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006eba:	2013      	movs	r0, #19
 8006ebc:	f7fb feba 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	202a      	movs	r0, #42	; 0x2a
 8006ec4:	f7fb feb6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006ec8:	210a      	movs	r1, #10
 8006eca:	2029      	movs	r0, #41	; 0x29
 8006ecc:	f7fb feb2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8006ed0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006ed4:	2012      	movs	r0, #18
 8006ed6:	f7fb fead 	bl	8002c34 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8006eda:	2100      	movs	r1, #0
 8006edc:	2050      	movs	r0, #80	; 0x50
 8006ede:	f7fb fea9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006ee2:	21ef      	movs	r1, #239	; 0xef
 8006ee4:	2051      	movs	r0, #81	; 0x51
 8006ee6:	f7fb fea5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006eea:	2100      	movs	r1, #0
 8006eec:	2052      	movs	r0, #82	; 0x52
 8006eee:	f7fb fea1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006ef2:	f240 113f 	movw	r1, #319	; 0x13f
 8006ef6:	2053      	movs	r0, #83	; 0x53
 8006ef8:	f7fb fe9c 	bl	8002c34 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8006efc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006f00:	2060      	movs	r0, #96	; 0x60
 8006f02:	f7fb fe97 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006f06:	2101      	movs	r1, #1
 8006f08:	2061      	movs	r0, #97	; 0x61
 8006f0a:	f7fb fe93 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	206a      	movs	r0, #106	; 0x6a
 8006f12:	f7fb fe8f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006f16:	2100      	movs	r1, #0
 8006f18:	2080      	movs	r0, #128	; 0x80
 8006f1a:	f7fb fe8b 	bl	8002c34 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8006f1e:	2100      	movs	r1, #0
 8006f20:	2081      	movs	r0, #129	; 0x81
 8006f22:	f7fb fe87 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006f26:	2100      	movs	r1, #0
 8006f28:	2082      	movs	r0, #130	; 0x82
 8006f2a:	f7fb fe83 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006f2e:	2100      	movs	r1, #0
 8006f30:	2083      	movs	r0, #131	; 0x83
 8006f32:	f7fb fe7f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006f36:	2100      	movs	r1, #0
 8006f38:	2084      	movs	r0, #132	; 0x84
 8006f3a:	f7fb fe7b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	2085      	movs	r0, #133	; 0x85
 8006f42:	f7fb fe77 	bl	8002c34 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8006f46:	2113      	movs	r1, #19
 8006f48:	2090      	movs	r0, #144	; 0x90
 8006f4a:	f7fb fe73 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006f4e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006f52:	2092      	movs	r0, #146	; 0x92
 8006f54:	f7fb fe6e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8006f58:	2105      	movs	r1, #5
 8006f5a:	2093      	movs	r0, #147	; 0x93
 8006f5c:	f7fb fe6a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8006f60:	2100      	movs	r1, #0
 8006f62:	2095      	movs	r0, #149	; 0x95
 8006f64:	f7fb fe66 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	2097      	movs	r0, #151	; 0x97
 8006f6c:	f7fb fe62 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8006f70:	2100      	movs	r1, #0
 8006f72:	2098      	movs	r0, #152	; 0x98
 8006f74:	f7fb fe5e 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8006f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7fb fe59 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006f82:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f86:	2002      	movs	r0, #2
 8006f88:	f7fb fe54 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006f8c:	f241 0138 	movw	r1, #4152	; 0x1038
 8006f90:	2003      	movs	r0, #3
 8006f92:	f7fb fe4f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006f96:	2100      	movs	r1, #0
 8006f98:	2004      	movs	r0, #4
 8006f9a:	f7fb fe4b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	200c      	movs	r0, #12
 8006fa2:	f7fb fe47 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	200f      	movs	r0, #15
 8006faa:	f7fb fe43 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8006fae:	2100      	movs	r1, #0
 8006fb0:	2020      	movs	r0, #32
 8006fb2:	f7fb fe3f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2021      	movs	r0, #33	; 0x21
 8006fba:	f7fb fe3b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8006fbe:	2121      	movs	r1, #33	; 0x21
 8006fc0:	2007      	movs	r0, #7
 8006fc2:	f7fb fe37 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8006fc6:	2014      	movs	r0, #20
 8006fc8:	f7fa f8b2 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006fcc:	2161      	movs	r1, #97	; 0x61
 8006fce:	2007      	movs	r0, #7
 8006fd0:	f7fb fe30 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8006fd4:	2014      	movs	r0, #20
 8006fd6:	f7fa f8ab 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8006fda:	f240 1173 	movw	r1, #371	; 0x173
 8006fde:	2007      	movs	r0, #7
 8006fe0:	f7fb fe28 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8006fe4:	2014      	movs	r0, #20
 8006fe6:	f7fa f8a3 	bl	8001130 <HAL_Delay>
 8006fea:	f000 bfd7 	b.w	8007f9c <LCD_Init+0x3e34>
 8006fee:	bf00      	nop
 8006ff0:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0xB505) {
 8006ff4:	4bf0      	ldr	r3, [pc, #960]	; (80073b8 <LCD_Init+0x3250>)
 8006ff6:	889b      	ldrh	r3, [r3, #4]
 8006ff8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	f040 8103 	bne.w	8007208 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8007002:	2100      	movs	r1, #0
 8007004:	2000      	movs	r0, #0
 8007006:	f7fb fe15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800700a:	2100      	movs	r1, #0
 800700c:	2000      	movs	r0, #0
 800700e:	f7fb fe11 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007012:	2100      	movs	r1, #0
 8007014:	2000      	movs	r0, #0
 8007016:	f7fb fe0d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800701a:	2100      	movs	r1, #0
 800701c:	2000      	movs	r0, #0
 800701e:	f7fb fe09 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8007022:	2101      	movs	r1, #1
 8007024:	20a4      	movs	r0, #164	; 0xa4
 8007026:	f7fb fe05 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 800702a:	2014      	movs	r0, #20
 800702c:	f7fa f880 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007030:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007034:	2060      	movs	r0, #96	; 0x60
 8007036:	f7fb fdfd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800703a:	f240 2102 	movw	r1, #514	; 0x202
 800703e:	2008      	movs	r0, #8
 8007040:	f7fb fdf8 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8007044:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007048:	2030      	movs	r0, #48	; 0x30
 800704a:	f7fb fdf3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800704e:	f243 7115 	movw	r1, #14101	; 0x3715
 8007052:	2031      	movs	r0, #49	; 0x31
 8007054:	f7fb fdee 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8007058:	f240 6104 	movw	r1, #1540	; 0x604
 800705c:	2032      	movs	r0, #50	; 0x32
 800705e:	f7fb fde9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8007062:	f640 6116 	movw	r1, #3606	; 0xe16
 8007066:	2033      	movs	r0, #51	; 0x33
 8007068:	f7fb fde4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800706c:	f242 2111 	movw	r1, #8721	; 0x2211
 8007070:	2034      	movs	r0, #52	; 0x34
 8007072:	f7fb fddf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8007076:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800707a:	2035      	movs	r0, #53	; 0x35
 800707c:	f7fb fdda 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8007080:	f248 5107 	movw	r1, #34055	; 0x8507
 8007084:	2036      	movs	r0, #54	; 0x36
 8007086:	f7fb fdd5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800708a:	f241 4107 	movw	r1, #5127	; 0x1407
 800708e:	2037      	movs	r0, #55	; 0x37
 8007090:	f7fb fdd0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8007094:	f241 4103 	movw	r1, #5123	; 0x1403
 8007098:	2038      	movs	r0, #56	; 0x38
 800709a:	f7fb fdcb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800709e:	2120      	movs	r1, #32
 80070a0:	2039      	movs	r0, #57	; 0x39
 80070a2:	f7fb fdc7 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80070a6:	211a      	movs	r1, #26
 80070a8:	2090      	movs	r0, #144	; 0x90
 80070aa:	f7fb fdc3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80070ae:	2100      	movs	r1, #0
 80070b0:	2010      	movs	r0, #16
 80070b2:	f7fb fdbf 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80070b6:	2107      	movs	r1, #7
 80070b8:	2011      	movs	r0, #17
 80070ba:	f7fb fdbb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80070be:	2100      	movs	r1, #0
 80070c0:	2012      	movs	r0, #18
 80070c2:	f7fb fdb7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80070c6:	2100      	movs	r1, #0
 80070c8:	2013      	movs	r0, #19
 80070ca:	f7fb fdb3 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 80070ce:	2014      	movs	r0, #20
 80070d0:	f7fa f82e 	bl	8001130 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80070d4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80070d8:	2010      	movs	r0, #16
 80070da:	f7fb fdab 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80070de:	f240 1137 	movw	r1, #311	; 0x137
 80070e2:	2011      	movs	r0, #17
 80070e4:	f7fb fda6 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 80070e8:	2014      	movs	r0, #20
 80070ea:	f7fa f821 	bl	8001130 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80070ee:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80070f2:	2012      	movs	r0, #18
 80070f4:	f7fb fd9e 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 80070f8:	2014      	movs	r0, #20
 80070fa:	f7fa f819 	bl	8001130 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80070fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8007102:	2013      	movs	r0, #19
 8007104:	f7fb fd96 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	202a      	movs	r0, #42	; 0x2a
 800710c:	f7fb fd92 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8007110:	2148      	movs	r1, #72	; 0x48
 8007112:	2029      	movs	r0, #41	; 0x29
 8007114:	f7fb fd8e 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8007118:	2014      	movs	r0, #20
 800711a:	f7fa f809 	bl	8001130 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800711e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007122:	2001      	movs	r0, #1
 8007124:	f7fb fd86 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007128:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800712c:	2002      	movs	r0, #2
 800712e:	f7fb fd81 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007132:	f241 0138 	movw	r1, #4152	; 0x1038
 8007136:	2003      	movs	r0, #3
 8007138:	f7fb fd7c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800713c:	f240 2102 	movw	r1, #514	; 0x202
 8007140:	2008      	movs	r0, #8
 8007142:	f7fb fd77 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8007146:	2100      	movs	r1, #0
 8007148:	200a      	movs	r0, #10
 800714a:	f7fb fd73 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800714e:	2100      	movs	r1, #0
 8007150:	200c      	movs	r0, #12
 8007152:	f7fb fd6f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8007156:	2100      	movs	r1, #0
 8007158:	200d      	movs	r0, #13
 800715a:	f7fb fd6b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 800715e:	2130      	movs	r1, #48	; 0x30
 8007160:	200e      	movs	r0, #14
 8007162:	f7fb fd67 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007166:	2100      	movs	r1, #0
 8007168:	2050      	movs	r0, #80	; 0x50
 800716a:	f7fb fd63 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 800716e:	21ef      	movs	r1, #239	; 0xef
 8007170:	2051      	movs	r0, #81	; 0x51
 8007172:	f7fb fd5f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007176:	2100      	movs	r1, #0
 8007178:	2052      	movs	r0, #82	; 0x52
 800717a:	f7fb fd5b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800717e:	f240 113f 	movw	r1, #319	; 0x13f
 8007182:	2053      	movs	r0, #83	; 0x53
 8007184:	f7fb fd56 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8007188:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800718c:	2060      	movs	r0, #96	; 0x60
 800718e:	f7fb fd51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007192:	2101      	movs	r1, #1
 8007194:	2061      	movs	r0, #97	; 0x61
 8007196:	f7fb fd4d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800719a:	2100      	movs	r1, #0
 800719c:	206a      	movs	r0, #106	; 0x6a
 800719e:	f7fb fd49 	bl	8002c34 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80071a2:	2111      	movs	r1, #17
 80071a4:	2090      	movs	r0, #144	; 0x90
 80071a6:	f7fb fd45 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80071aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071ae:	2092      	movs	r0, #146	; 0x92
 80071b0:	f7fb fd40 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80071b4:	f240 4102 	movw	r1, #1026	; 0x402
 80071b8:	2093      	movs	r0, #147	; 0x93
 80071ba:	f7fb fd3b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80071be:	2102      	movs	r1, #2
 80071c0:	2094      	movs	r0, #148	; 0x94
 80071c2:	f7fb fd37 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 80071c6:	2014      	movs	r0, #20
 80071c8:	f7f9 ffb2 	bl	8001130 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80071cc:	2101      	movs	r1, #1
 80071ce:	2007      	movs	r0, #7
 80071d0:	f7fb fd30 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 80071d4:	2014      	movs	r0, #20
 80071d6:	f7f9 ffab 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80071da:	2161      	movs	r1, #97	; 0x61
 80071dc:	2007      	movs	r0, #7
 80071de:	f7fb fd29 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80071e2:	f240 1173 	movw	r1, #371	; 0x173
 80071e6:	2007      	movs	r0, #7
 80071e8:	f7fb fd24 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80071ec:	2100      	movs	r1, #0
 80071ee:	2020      	movs	r0, #32
 80071f0:	f7fb fd20 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80071f4:	2100      	movs	r1, #0
 80071f6:	2021      	movs	r0, #33	; 0x21
 80071f8:	f7fb fd1c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80071fc:	2122      	movs	r1, #34	; 0x22
 80071fe:	2000      	movs	r0, #0
 8007200:	f7fb fd18 	bl	8002c34 <LCD_WriteReg>
 8007204:	f000 beca 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8007208:	4b6b      	ldr	r3, [pc, #428]	; (80073b8 <LCD_Init+0x3250>)
 800720a:	889b      	ldrh	r3, [r3, #4]
 800720c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8007210:	4293      	cmp	r3, r2
 8007212:	f040 80d3 	bne.w	80073bc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8007216:	2100      	movs	r1, #0
 8007218:	2000      	movs	r0, #0
 800721a:	f7fb fd0b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800721e:	2100      	movs	r1, #0
 8007220:	2000      	movs	r0, #0
 8007222:	f7fb fd07 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8007226:	2014      	movs	r0, #20
 8007228:	f7f9 ff82 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800722c:	2100      	movs	r1, #0
 800722e:	2000      	movs	r0, #0
 8007230:	f7fb fd00 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007234:	2100      	movs	r1, #0
 8007236:	2000      	movs	r0, #0
 8007238:	f7fb fcfc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800723c:	2100      	movs	r1, #0
 800723e:	2000      	movs	r0, #0
 8007240:	f7fb fcf8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007244:	2100      	movs	r1, #0
 8007246:	2000      	movs	r0, #0
 8007248:	f7fb fcf4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800724c:	2101      	movs	r1, #1
 800724e:	20a4      	movs	r0, #164	; 0xa4
 8007250:	f7fb fcf0 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8007254:	2014      	movs	r0, #20
 8007256:	f7f9 ff6b 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800725a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800725e:	2060      	movs	r0, #96	; 0x60
 8007260:	f7fb fce8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8007264:	f640 0106 	movw	r1, #2054	; 0x806
 8007268:	2008      	movs	r0, #8
 800726a:	f7fb fce3 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800726e:	f240 7103 	movw	r1, #1795	; 0x703
 8007272:	2030      	movs	r0, #48	; 0x30
 8007274:	f7fb fcde 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007278:	2101      	movs	r1, #1
 800727a:	2031      	movs	r0, #49	; 0x31
 800727c:	f7fb fcda 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007280:	2104      	movs	r1, #4
 8007282:	2032      	movs	r0, #50	; 0x32
 8007284:	f7fb fcd6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8007288:	f44f 7181 	mov.w	r1, #258	; 0x102
 800728c:	2033      	movs	r0, #51	; 0x33
 800728e:	f7fb fcd1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8007292:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007296:	2034      	movs	r0, #52	; 0x34
 8007298:	f7fb fccc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800729c:	f240 1103 	movw	r1, #259	; 0x103
 80072a0:	2035      	movs	r0, #53	; 0x35
 80072a2:	f7fb fcc7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80072a6:	211f      	movs	r1, #31
 80072a8:	2036      	movs	r0, #54	; 0x36
 80072aa:	f7fb fcc3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80072ae:	f240 7103 	movw	r1, #1795	; 0x703
 80072b2:	2037      	movs	r0, #55	; 0x37
 80072b4:	f7fb fcbe 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80072b8:	2101      	movs	r1, #1
 80072ba:	2038      	movs	r0, #56	; 0x38
 80072bc:	f7fb fcba 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80072c0:	2104      	movs	r1, #4
 80072c2:	2039      	movs	r0, #57	; 0x39
 80072c4:	f7fb fcb6 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80072c8:	2115      	movs	r1, #21
 80072ca:	2090      	movs	r0, #144	; 0x90
 80072cc:	f7fb fcb2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80072d0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80072d4:	2010      	movs	r0, #16
 80072d6:	f7fb fcad 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80072da:	f240 2147 	movw	r1, #583	; 0x247
 80072de:	2011      	movs	r0, #17
 80072e0:	f7fb fca8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80072e4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80072e8:	2012      	movs	r0, #18
 80072ea:	f7fb fca3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80072ee:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80072f2:	2013      	movs	r0, #19
 80072f4:	f7fb fc9e 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(120);
 80072f8:	2078      	movs	r0, #120	; 0x78
 80072fa:	f7f9 ff19 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80072fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007302:	2001      	movs	r0, #1
 8007304:	f7fb fc96 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8007308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800730c:	2002      	movs	r0, #2
 800730e:	f7fb fc91 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8007312:	f241 0130 	movw	r1, #4144	; 0x1030
 8007316:	2003      	movs	r0, #3
 8007318:	f7fb fc8c 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800731c:	2108      	movs	r1, #8
 800731e:	200a      	movs	r0, #10
 8007320:	f7fb fc88 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007324:	2100      	movs	r1, #0
 8007326:	200c      	movs	r0, #12
 8007328:	f7fb fc84 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800732c:	2120      	movs	r1, #32
 800732e:	200e      	movs	r0, #14
 8007330:	f7fb fc80 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8007334:	2100      	movs	r1, #0
 8007336:	200f      	movs	r0, #15
 8007338:	f7fb fc7c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800733c:	2100      	movs	r1, #0
 800733e:	2020      	movs	r0, #32
 8007340:	f7fb fc78 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8007344:	2100      	movs	r1, #0
 8007346:	2021      	movs	r0, #33	; 0x21
 8007348:	f7fb fc74 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800734c:	213d      	movs	r1, #61	; 0x3d
 800734e:	202a      	movs	r0, #42	; 0x2a
 8007350:	f7fb fc70 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(20);
 8007354:	2014      	movs	r0, #20
 8007356:	f7f9 feeb 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800735a:	212d      	movs	r1, #45	; 0x2d
 800735c:	2029      	movs	r0, #41	; 0x29
 800735e:	f7fb fc69 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007362:	2100      	movs	r1, #0
 8007364:	2050      	movs	r0, #80	; 0x50
 8007366:	f7fb fc65 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800736a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800736e:	2051      	movs	r0, #81	; 0x51
 8007370:	f7fb fc60 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007374:	2100      	movs	r1, #0
 8007376:	2052      	movs	r0, #82	; 0x52
 8007378:	f7fb fc5c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800737c:	f240 113f 	movw	r1, #319	; 0x13f
 8007380:	2053      	movs	r0, #83	; 0x53
 8007382:	f7fb fc57 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8007386:	2100      	movs	r1, #0
 8007388:	2061      	movs	r0, #97	; 0x61
 800738a:	f7fb fc53 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800738e:	2100      	movs	r1, #0
 8007390:	206a      	movs	r0, #106	; 0x6a
 8007392:	f7fb fc4f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007396:	f44f 7140 	mov.w	r1, #768	; 0x300
 800739a:	2092      	movs	r0, #146	; 0x92
 800739c:	f7fb fc4a 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80073a0:	2105      	movs	r1, #5
 80073a2:	2093      	movs	r0, #147	; 0x93
 80073a4:	f7fb fc46 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80073a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073ac:	2007      	movs	r0, #7
 80073ae:	f7fb fc41 	bl	8002c34 <LCD_WriteReg>
 80073b2:	f000 bdf3 	b.w	8007f9c <LCD_Init+0x3e34>
 80073b6:	bf00      	nop
 80073b8:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80073bc:	4bc2      	ldr	r3, [pc, #776]	; (80076c8 <LCD_Init+0x3560>)
 80073be:	889b      	ldrh	r3, [r3, #4]
 80073c0:	f648 1289 	movw	r2, #35209	; 0x8989
 80073c4:	4293      	cmp	r3, r2
 80073c6:	f040 80bc 	bne.w	8007542 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80073ca:	2101      	movs	r1, #1
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7fb fc31 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80073d2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80073d6:	2003      	movs	r0, #3
 80073d8:	f7fb fc2c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80073dc:	2100      	movs	r1, #0
 80073de:	200c      	movs	r0, #12
 80073e0:	f7fb fc28 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80073e4:	f640 010c 	movw	r1, #2060	; 0x80c
 80073e8:	200d      	movs	r0, #13
 80073ea:	f7fb fc23 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80073ee:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80073f2:	200e      	movs	r0, #14
 80073f4:	f7fb fc1e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80073f8:	21b0      	movs	r1, #176	; 0xb0
 80073fa:	201e      	movs	r0, #30
 80073fc:	f7fb fc1a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8007400:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8007404:	2001      	movs	r0, #1
 8007406:	f7fb fc15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800740a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800740e:	2002      	movs	r0, #2
 8007410:	f7fb fc10 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007414:	2100      	movs	r1, #0
 8007416:	2010      	movs	r0, #16
 8007418:	f7fb fc0c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800741c:	f246 0178 	movw	r1, #24696	; 0x6078
 8007420:	2011      	movs	r0, #17
 8007422:	f7fb fc07 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8007426:	2100      	movs	r1, #0
 8007428:	2005      	movs	r0, #5
 800742a:	f7fb fc03 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800742e:	2100      	movs	r1, #0
 8007430:	2006      	movs	r0, #6
 8007432:	f7fb fbff 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8007436:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800743a:	2016      	movs	r0, #22
 800743c:	f7fb fbfa 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007440:	2103      	movs	r1, #3
 8007442:	2017      	movs	r0, #23
 8007444:	f7fb fbf6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007448:	f240 2133 	movw	r1, #563	; 0x233
 800744c:	2007      	movs	r0, #7
 800744e:	f7fb fbf1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8007452:	2100      	movs	r1, #0
 8007454:	200b      	movs	r0, #11
 8007456:	f7fb fbed 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800745a:	2100      	movs	r1, #0
 800745c:	200f      	movs	r0, #15
 800745e:	f7fb fbe9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8007462:	2100      	movs	r1, #0
 8007464:	2041      	movs	r0, #65	; 0x41
 8007466:	f7fb fbe5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800746a:	2100      	movs	r1, #0
 800746c:	2042      	movs	r0, #66	; 0x42
 800746e:	f7fb fbe1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8007472:	2100      	movs	r1, #0
 8007474:	2048      	movs	r0, #72	; 0x48
 8007476:	f7fb fbdd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800747a:	f240 113f 	movw	r1, #319	; 0x13f
 800747e:	2049      	movs	r0, #73	; 0x49
 8007480:	f7fb fbd8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8007484:	2100      	movs	r1, #0
 8007486:	204a      	movs	r0, #74	; 0x4a
 8007488:	f7fb fbd4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800748c:	2100      	movs	r1, #0
 800748e:	204b      	movs	r0, #75	; 0x4b
 8007490:	f7fb fbd0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8007494:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007498:	2044      	movs	r0, #68	; 0x44
 800749a:	f7fb fbcb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800749e:	2100      	movs	r1, #0
 80074a0:	2045      	movs	r0, #69	; 0x45
 80074a2:	f7fb fbc7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80074a6:	f240 113f 	movw	r1, #319	; 0x13f
 80074aa:	2046      	movs	r0, #70	; 0x46
 80074ac:	f7fb fbc2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80074b0:	f240 7107 	movw	r1, #1799	; 0x707
 80074b4:	2030      	movs	r0, #48	; 0x30
 80074b6:	f7fb fbbd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80074ba:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074be:	2031      	movs	r0, #49	; 0x31
 80074c0:	f7fb fbb8 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80074c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074c8:	2032      	movs	r0, #50	; 0x32
 80074ca:	f7fb fbb3 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80074ce:	f240 5102 	movw	r1, #1282	; 0x502
 80074d2:	2033      	movs	r0, #51	; 0x33
 80074d4:	f7fb fbae 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80074d8:	f240 5107 	movw	r1, #1287	; 0x507
 80074dc:	2034      	movs	r0, #52	; 0x34
 80074de:	f7fb fba9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80074e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074e6:	2035      	movs	r0, #53	; 0x35
 80074e8:	f7fb fba4 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80074ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074f0:	2036      	movs	r0, #54	; 0x36
 80074f2:	f7fb fb9f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80074f6:	f240 5102 	movw	r1, #1282	; 0x502
 80074fa:	2037      	movs	r0, #55	; 0x37
 80074fc:	f7fb fb9a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007500:	f240 3102 	movw	r1, #770	; 0x302
 8007504:	203a      	movs	r0, #58	; 0x3a
 8007506:	f7fb fb95 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800750a:	f240 3102 	movw	r1, #770	; 0x302
 800750e:	203b      	movs	r0, #59	; 0x3b
 8007510:	f7fb fb90 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8007514:	2100      	movs	r1, #0
 8007516:	2023      	movs	r0, #35	; 0x23
 8007518:	f7fb fb8c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800751c:	2100      	movs	r1, #0
 800751e:	2024      	movs	r0, #36	; 0x24
 8007520:	f7fb fb88 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007528:	2025      	movs	r0, #37	; 0x25
 800752a:	f7fb fb83 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800752e:	2100      	movs	r1, #0
 8007530:	204f      	movs	r0, #79	; 0x4f
 8007532:	f7fb fb7f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007536:	2100      	movs	r1, #0
 8007538:	204e      	movs	r0, #78	; 0x4e
 800753a:	f7fb fb7b 	bl	8002c34 <LCD_WriteReg>
 800753e:	f000 bd2d 	b.w	8007f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8007542:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <LCD_Init+0x3560>)
 8007544:	889b      	ldrh	r3, [r3, #4]
 8007546:	f244 5231 	movw	r2, #17713	; 0x4531
 800754a:	4293      	cmp	r3, r2
 800754c:	f040 80be 	bne.w	80076cc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007550:	2101      	movs	r1, #1
 8007552:	2000      	movs	r0, #0
 8007554:	f7fb fb6e 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(10);
 8007558:	200a      	movs	r0, #10
 800755a:	f7f9 fde9 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800755e:	f241 6128 	movw	r1, #5672	; 0x1628
 8007562:	2010      	movs	r0, #16
 8007564:	f7fb fb66 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007568:	210e      	movs	r1, #14
 800756a:	2012      	movs	r0, #18
 800756c:	f7fb fb62 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007570:	f640 2139 	movw	r1, #2617	; 0xa39
 8007574:	2013      	movs	r0, #19
 8007576:	f7fb fb5d 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(10);
 800757a:	200a      	movs	r0, #10
 800757c:	f7f9 fdd8 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007580:	2140      	movs	r1, #64	; 0x40
 8007582:	2011      	movs	r0, #17
 8007584:	f7fb fb56 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007588:	2150      	movs	r1, #80	; 0x50
 800758a:	2015      	movs	r0, #21
 800758c:	f7fb fb52 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(10);
 8007590:	200a      	movs	r0, #10
 8007592:	f7f9 fdcd 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007596:	211e      	movs	r1, #30
 8007598:	2012      	movs	r0, #18
 800759a:	f7fb fb4b 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(10);
 800759e:	200a      	movs	r0, #10
 80075a0:	f7f9 fdc6 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80075a4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80075a8:	2010      	movs	r0, #16
 80075aa:	f7fb fb43 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80075ae:	f642 2139 	movw	r1, #10809	; 0x2a39
 80075b2:	2013      	movs	r0, #19
 80075b4:	f7fb fb3e 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(10);
 80075b8:	200a      	movs	r0, #10
 80075ba:	f7f9 fdb9 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80075be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075c2:	2001      	movs	r0, #1
 80075c4:	f7fb fb36 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80075c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80075cc:	2002      	movs	r0, #2
 80075ce:	f7fb fb31 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80075d2:	f241 0138 	movw	r1, #4152	; 0x1038
 80075d6:	2003      	movs	r0, #3
 80075d8:	f7fb fb2c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80075dc:	f240 2102 	movw	r1, #514	; 0x202
 80075e0:	2008      	movs	r0, #8
 80075e2:	f7fb fb27 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80075e6:	2108      	movs	r1, #8
 80075e8:	200a      	movs	r0, #10
 80075ea:	f7fb fb23 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80075ee:	2100      	movs	r1, #0
 80075f0:	2030      	movs	r0, #48	; 0x30
 80075f2:	f7fb fb1f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80075f6:	f240 4102 	movw	r1, #1026	; 0x402
 80075fa:	2031      	movs	r0, #49	; 0x31
 80075fc:	f7fb fb1a 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007600:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007604:	2032      	movs	r0, #50	; 0x32
 8007606:	f7fb fb15 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800760a:	f240 5103 	movw	r1, #1283	; 0x503
 800760e:	2033      	movs	r0, #51	; 0x33
 8007610:	f7fb fb10 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007614:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007618:	2034      	movs	r0, #52	; 0x34
 800761a:	f7fb fb0b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800761e:	f240 3101 	movw	r1, #769	; 0x301
 8007622:	2035      	movs	r0, #53	; 0x35
 8007624:	f7fb fb06 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007628:	f240 7107 	movw	r1, #1799	; 0x707
 800762c:	2036      	movs	r0, #54	; 0x36
 800762e:	f7fb fb01 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007632:	f240 3105 	movw	r1, #773	; 0x305
 8007636:	2037      	movs	r0, #55	; 0x37
 8007638:	f7fb fafc 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800763c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007640:	2038      	movs	r0, #56	; 0x38
 8007642:	f7fb faf7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8007646:	f640 710b 	movw	r1, #3851	; 0xf0b
 800764a:	2039      	movs	r0, #57	; 0x39
 800764c:	f7fb faf2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007650:	2102      	movs	r1, #2
 8007652:	2041      	movs	r0, #65	; 0x41
 8007654:	f7fb faee 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007658:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800765c:	2060      	movs	r0, #96	; 0x60
 800765e:	f7fb fae9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007662:	2101      	movs	r1, #1
 8007664:	2061      	movs	r0, #97	; 0x61
 8007666:	f7fb fae5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800766a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800766e:	2090      	movs	r0, #144	; 0x90
 8007670:	f7fb fae0 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8007674:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007678:	2092      	movs	r0, #146	; 0x92
 800767a:	f7fb fadb 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800767e:	2104      	movs	r1, #4
 8007680:	2093      	movs	r0, #147	; 0x93
 8007682:	f7fb fad7 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8007686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800768a:	20a0      	movs	r0, #160	; 0xa0
 800768c:	f7fb fad2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007690:	2101      	movs	r1, #1
 8007692:	2007      	movs	r0, #7
 8007694:	f7fb face 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007698:	2121      	movs	r1, #33	; 0x21
 800769a:	2007      	movs	r0, #7
 800769c:	f7fb faca 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80076a0:	2123      	movs	r1, #35	; 0x23
 80076a2:	2007      	movs	r0, #7
 80076a4:	f7fb fac6 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80076a8:	2133      	movs	r1, #51	; 0x33
 80076aa:	2007      	movs	r0, #7
 80076ac:	f7fb fac2 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80076b0:	f240 1133 	movw	r1, #307	; 0x133
 80076b4:	2007      	movs	r0, #7
 80076b6:	f7fb fabd 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80076ba:	2100      	movs	r1, #0
 80076bc:	20a0      	movs	r0, #160	; 0xa0
 80076be:	f7fb fab9 	bl	8002c34 <LCD_WriteReg>
 80076c2:	f000 bc6b 	b.w	8007f9c <LCD_Init+0x3e34>
 80076c6:	bf00      	nop
 80076c8:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0x4535) {
 80076cc:	4b5b      	ldr	r3, [pc, #364]	; (800783c <LCD_Init+0x36d4>)
 80076ce:	889b      	ldrh	r3, [r3, #4]
 80076d0:	f244 5235 	movw	r2, #17717	; 0x4535
 80076d4:	4293      	cmp	r3, r2
 80076d6:	f040 80b3 	bne.w	8007840 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80076da:	2130      	movs	r1, #48	; 0x30
 80076dc:	2015      	movs	r0, #21
 80076de:	f7fb faa9 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80076e2:	2110      	movs	r1, #16
 80076e4:	209a      	movs	r0, #154	; 0x9a
 80076e6:	f7fb faa5 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80076ea:	2120      	movs	r1, #32
 80076ec:	2011      	movs	r0, #17
 80076ee:	f7fb faa1 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80076f2:	f243 4128 	movw	r1, #13352	; 0x3428
 80076f6:	2010      	movs	r0, #16
 80076f8:	f7fb fa9c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80076fc:	2102      	movs	r1, #2
 80076fe:	2012      	movs	r0, #18
 8007700:	f7fb fa98 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8007704:	f241 0138 	movw	r1, #4152	; 0x1038
 8007708:	2013      	movs	r0, #19
 800770a:	f7fb fa93 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(40);
 800770e:	2028      	movs	r0, #40	; 0x28
 8007710:	f7f9 fd0e 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8007714:	2112      	movs	r1, #18
 8007716:	2012      	movs	r0, #18
 8007718:	f7fb fa8c 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(40);
 800771c:	2028      	movs	r0, #40	; 0x28
 800771e:	f7f9 fd07 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8007722:	f243 4120 	movw	r1, #13344	; 0x3420
 8007726:	2010      	movs	r0, #16
 8007728:	f7fb fa84 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800772c:	f243 0138 	movw	r1, #12344	; 0x3038
 8007730:	2013      	movs	r0, #19
 8007732:	f7fb fa7f 	bl	8002c34 <LCD_WriteReg>
		HAL_Delay(70);
 8007736:	2046      	movs	r0, #70	; 0x46
 8007738:	f7f9 fcfa 	bl	8001130 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800773c:	2100      	movs	r1, #0
 800773e:	2030      	movs	r0, #48	; 0x30
 8007740:	f7fb fa78 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007744:	f240 4102 	movw	r1, #1026	; 0x402
 8007748:	2031      	movs	r0, #49	; 0x31
 800774a:	f7fb fa73 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800774e:	f240 3107 	movw	r1, #775	; 0x307
 8007752:	2032      	movs	r0, #50	; 0x32
 8007754:	f7fb fa6e 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007758:	f44f 7141 	mov.w	r1, #772	; 0x304
 800775c:	2033      	movs	r0, #51	; 0x33
 800775e:	f7fb fa69 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8007762:	2104      	movs	r1, #4
 8007764:	2034      	movs	r0, #52	; 0x34
 8007766:	f7fb fa65 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800776a:	f240 4101 	movw	r1, #1025	; 0x401
 800776e:	2035      	movs	r0, #53	; 0x35
 8007770:	f7fb fa60 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007774:	f240 7107 	movw	r1, #1799	; 0x707
 8007778:	2036      	movs	r0, #54	; 0x36
 800777a:	f7fb fa5b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800777e:	f240 3105 	movw	r1, #773	; 0x305
 8007782:	2037      	movs	r0, #55	; 0x37
 8007784:	f7fb fa56 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8007788:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800778c:	2038      	movs	r0, #56	; 0x38
 800778e:	f7fb fa51 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8007792:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007796:	2039      	movs	r0, #57	; 0x39
 8007798:	f7fb fa4c 	bl	8002c34 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800779c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7fb fa47 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80077a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80077aa:	2002      	movs	r0, #2
 80077ac:	f7fb fa42 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80077b0:	f241 0130 	movw	r1, #4144	; 0x1030
 80077b4:	2003      	movs	r0, #3
 80077b6:	f7fb fa3d 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80077ba:	f640 0108 	movw	r1, #2056	; 0x808
 80077be:	2008      	movs	r0, #8
 80077c0:	f7fb fa38 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80077c4:	2108      	movs	r1, #8
 80077c6:	200a      	movs	r0, #10
 80077c8:	f7fb fa34 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80077cc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80077d0:	2060      	movs	r0, #96	; 0x60
 80077d2:	f7fb fa2f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80077d6:	2101      	movs	r1, #1
 80077d8:	2061      	movs	r0, #97	; 0x61
 80077da:	f7fb fa2b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80077de:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80077e2:	2090      	movs	r0, #144	; 0x90
 80077e4:	f7fb fa26 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80077e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077ec:	2092      	movs	r0, #146	; 0x92
 80077ee:	f7fb fa21 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80077f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077f6:	2093      	movs	r0, #147	; 0x93
 80077f8:	f7fb fa1c 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80077fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007800:	20a0      	movs	r0, #160	; 0xa0
 8007802:	f7fb fa17 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8007806:	2110      	movs	r1, #16
 8007808:	20a3      	movs	r0, #163	; 0xa3
 800780a:	f7fb fa13 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800780e:	2101      	movs	r1, #1
 8007810:	2007      	movs	r0, #7
 8007812:	f7fb fa0f 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007816:	2121      	movs	r1, #33	; 0x21
 8007818:	2007      	movs	r0, #7
 800781a:	f7fb fa0b 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800781e:	2123      	movs	r1, #35	; 0x23
 8007820:	2007      	movs	r0, #7
 8007822:	f7fb fa07 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007826:	2133      	movs	r1, #51	; 0x33
 8007828:	2007      	movs	r0, #7
 800782a:	f7fb fa03 	bl	8002c34 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800782e:	f240 1133 	movw	r1, #307	; 0x133
 8007832:	2007      	movs	r0, #7
 8007834:	f7fb f9fe 	bl	8002c34 <LCD_WriteReg>
 8007838:	e3b0      	b.n	8007f9c <LCD_Init+0x3e34>
 800783a:	bf00      	nop
 800783c:	200004ac 	.word	0x200004ac
	} else if (lcddev.id == 0X1963) {
 8007840:	4ba8      	ldr	r3, [pc, #672]	; (8007ae4 <LCD_Init+0x397c>)
 8007842:	889b      	ldrh	r3, [r3, #4]
 8007844:	f641 1263 	movw	r2, #6499	; 0x1963
 8007848:	4293      	cmp	r3, r2
 800784a:	f040 83a7 	bne.w	8007f9c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800784e:	20e2      	movs	r0, #226	; 0xe2
 8007850:	f7fb f964 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8007854:	4ba4      	ldr	r3, [pc, #656]	; (8007ae8 <LCD_Init+0x3980>)
 8007856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800785a:	611a      	str	r2, [r3, #16]
 800785c:	4ba2      	ldr	r3, [pc, #648]	; (8007ae8 <LCD_Init+0x3980>)
 800785e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007862:	615a      	str	r2, [r3, #20]
 8007864:	4ba1      	ldr	r3, [pc, #644]	; (8007aec <LCD_Init+0x3984>)
 8007866:	221d      	movs	r2, #29
 8007868:	60da      	str	r2, [r3, #12]
 800786a:	4b9f      	ldr	r3, [pc, #636]	; (8007ae8 <LCD_Init+0x3980>)
 800786c:	2280      	movs	r2, #128	; 0x80
 800786e:	615a      	str	r2, [r3, #20]
 8007870:	4b9d      	ldr	r3, [pc, #628]	; (8007ae8 <LCD_Init+0x3980>)
 8007872:	2280      	movs	r2, #128	; 0x80
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	4b9c      	ldr	r3, [pc, #624]	; (8007ae8 <LCD_Init+0x3980>)
 8007878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800787e:	4b9a      	ldr	r3, [pc, #616]	; (8007ae8 <LCD_Init+0x3980>)
 8007880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007884:	611a      	str	r2, [r3, #16]
 8007886:	4b98      	ldr	r3, [pc, #608]	; (8007ae8 <LCD_Init+0x3980>)
 8007888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788c:	615a      	str	r2, [r3, #20]
 800788e:	4b97      	ldr	r3, [pc, #604]	; (8007aec <LCD_Init+0x3984>)
 8007890:	2202      	movs	r2, #2
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	4b94      	ldr	r3, [pc, #592]	; (8007ae8 <LCD_Init+0x3980>)
 8007896:	2280      	movs	r2, #128	; 0x80
 8007898:	615a      	str	r2, [r3, #20]
 800789a:	4b93      	ldr	r3, [pc, #588]	; (8007ae8 <LCD_Init+0x3980>)
 800789c:	2280      	movs	r2, #128	; 0x80
 800789e:	611a      	str	r2, [r3, #16]
 80078a0:	4b91      	ldr	r3, [pc, #580]	; (8007ae8 <LCD_Init+0x3980>)
 80078a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80078a8:	4b8f      	ldr	r3, [pc, #572]	; (8007ae8 <LCD_Init+0x3980>)
 80078aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ae:	611a      	str	r2, [r3, #16]
 80078b0:	4b8d      	ldr	r3, [pc, #564]	; (8007ae8 <LCD_Init+0x3980>)
 80078b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b6:	615a      	str	r2, [r3, #20]
 80078b8:	4b8c      	ldr	r3, [pc, #560]	; (8007aec <LCD_Init+0x3984>)
 80078ba:	2204      	movs	r2, #4
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	4b8a      	ldr	r3, [pc, #552]	; (8007ae8 <LCD_Init+0x3980>)
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	615a      	str	r2, [r3, #20]
 80078c4:	4b88      	ldr	r3, [pc, #544]	; (8007ae8 <LCD_Init+0x3980>)
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	611a      	str	r2, [r3, #16]
 80078ca:	4b87      	ldr	r3, [pc, #540]	; (8007ae8 <LCD_Init+0x3980>)
 80078cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7f9 fc2c 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80078d8:	20e0      	movs	r0, #224	; 0xe0
 80078da:	f7fb f91f 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80078de:	4b82      	ldr	r3, [pc, #520]	; (8007ae8 <LCD_Init+0x3980>)
 80078e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e4:	611a      	str	r2, [r3, #16]
 80078e6:	4b80      	ldr	r3, [pc, #512]	; (8007ae8 <LCD_Init+0x3980>)
 80078e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ec:	615a      	str	r2, [r3, #20]
 80078ee:	4b7f      	ldr	r3, [pc, #508]	; (8007aec <LCD_Init+0x3984>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	60da      	str	r2, [r3, #12]
 80078f4:	4b7c      	ldr	r3, [pc, #496]	; (8007ae8 <LCD_Init+0x3980>)
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	615a      	str	r2, [r3, #20]
 80078fa:	4b7b      	ldr	r3, [pc, #492]	; (8007ae8 <LCD_Init+0x3980>)
 80078fc:	2280      	movs	r2, #128	; 0x80
 80078fe:	611a      	str	r2, [r3, #16]
 8007900:	4b79      	ldr	r3, [pc, #484]	; (8007ae8 <LCD_Init+0x3980>)
 8007902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007906:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007908:	200a      	movs	r0, #10
 800790a:	f7f9 fc11 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800790e:	20e0      	movs	r0, #224	; 0xe0
 8007910:	f7fb f904 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8007914:	4b74      	ldr	r3, [pc, #464]	; (8007ae8 <LCD_Init+0x3980>)
 8007916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800791a:	611a      	str	r2, [r3, #16]
 800791c:	4b72      	ldr	r3, [pc, #456]	; (8007ae8 <LCD_Init+0x3980>)
 800791e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007922:	615a      	str	r2, [r3, #20]
 8007924:	4b71      	ldr	r3, [pc, #452]	; (8007aec <LCD_Init+0x3984>)
 8007926:	2203      	movs	r2, #3
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	4b6f      	ldr	r3, [pc, #444]	; (8007ae8 <LCD_Init+0x3980>)
 800792c:	2280      	movs	r2, #128	; 0x80
 800792e:	615a      	str	r2, [r3, #20]
 8007930:	4b6d      	ldr	r3, [pc, #436]	; (8007ae8 <LCD_Init+0x3980>)
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	611a      	str	r2, [r3, #16]
 8007936:	4b6c      	ldr	r3, [pc, #432]	; (8007ae8 <LCD_Init+0x3980>)
 8007938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800793c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800793e:	200c      	movs	r0, #12
 8007940:	f7f9 fbf6 	bl	8001130 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8007944:	2001      	movs	r0, #1
 8007946:	f7fb f8e9 	bl	8002b1c <LCD_WR_REG>
		HAL_Delay(10);
 800794a:	200a      	movs	r0, #10
 800794c:	f7f9 fbf0 	bl	8001130 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007950:	20e6      	movs	r0, #230	; 0xe6
 8007952:	f7fb f8e3 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8007956:	4b64      	ldr	r3, [pc, #400]	; (8007ae8 <LCD_Init+0x3980>)
 8007958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800795c:	611a      	str	r2, [r3, #16]
 800795e:	4b62      	ldr	r3, [pc, #392]	; (8007ae8 <LCD_Init+0x3980>)
 8007960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007964:	615a      	str	r2, [r3, #20]
 8007966:	4b61      	ldr	r3, [pc, #388]	; (8007aec <LCD_Init+0x3984>)
 8007968:	222f      	movs	r2, #47	; 0x2f
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	4b5e      	ldr	r3, [pc, #376]	; (8007ae8 <LCD_Init+0x3980>)
 800796e:	2280      	movs	r2, #128	; 0x80
 8007970:	615a      	str	r2, [r3, #20]
 8007972:	4b5d      	ldr	r3, [pc, #372]	; (8007ae8 <LCD_Init+0x3980>)
 8007974:	2280      	movs	r2, #128	; 0x80
 8007976:	611a      	str	r2, [r3, #16]
 8007978:	4b5b      	ldr	r3, [pc, #364]	; (8007ae8 <LCD_Init+0x3980>)
 800797a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800797e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007980:	4b59      	ldr	r3, [pc, #356]	; (8007ae8 <LCD_Init+0x3980>)
 8007982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007986:	611a      	str	r2, [r3, #16]
 8007988:	4b57      	ldr	r3, [pc, #348]	; (8007ae8 <LCD_Init+0x3980>)
 800798a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798e:	615a      	str	r2, [r3, #20]
 8007990:	4b56      	ldr	r3, [pc, #344]	; (8007aec <LCD_Init+0x3984>)
 8007992:	22ff      	movs	r2, #255	; 0xff
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	4b54      	ldr	r3, [pc, #336]	; (8007ae8 <LCD_Init+0x3980>)
 8007998:	2280      	movs	r2, #128	; 0x80
 800799a:	615a      	str	r2, [r3, #20]
 800799c:	4b52      	ldr	r3, [pc, #328]	; (8007ae8 <LCD_Init+0x3980>)
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	611a      	str	r2, [r3, #16]
 80079a2:	4b51      	ldr	r3, [pc, #324]	; (8007ae8 <LCD_Init+0x3980>)
 80079a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80079aa:	4b4f      	ldr	r3, [pc, #316]	; (8007ae8 <LCD_Init+0x3980>)
 80079ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b0:	611a      	str	r2, [r3, #16]
 80079b2:	4b4d      	ldr	r3, [pc, #308]	; (8007ae8 <LCD_Init+0x3980>)
 80079b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b8:	615a      	str	r2, [r3, #20]
 80079ba:	4b4c      	ldr	r3, [pc, #304]	; (8007aec <LCD_Init+0x3984>)
 80079bc:	22ff      	movs	r2, #255	; 0xff
 80079be:	60da      	str	r2, [r3, #12]
 80079c0:	4b49      	ldr	r3, [pc, #292]	; (8007ae8 <LCD_Init+0x3980>)
 80079c2:	2280      	movs	r2, #128	; 0x80
 80079c4:	615a      	str	r2, [r3, #20]
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <LCD_Init+0x3980>)
 80079c8:	2280      	movs	r2, #128	; 0x80
 80079ca:	611a      	str	r2, [r3, #16]
 80079cc:	4b46      	ldr	r3, [pc, #280]	; (8007ae8 <LCD_Init+0x3980>)
 80079ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80079d4:	20b0      	movs	r0, #176	; 0xb0
 80079d6:	f7fb f8a1 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80079da:	4b43      	ldr	r3, [pc, #268]	; (8007ae8 <LCD_Init+0x3980>)
 80079dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e0:	611a      	str	r2, [r3, #16]
 80079e2:	4b41      	ldr	r3, [pc, #260]	; (8007ae8 <LCD_Init+0x3980>)
 80079e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079e8:	615a      	str	r2, [r3, #20]
 80079ea:	4b40      	ldr	r3, [pc, #256]	; (8007aec <LCD_Init+0x3984>)
 80079ec:	2220      	movs	r2, #32
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <LCD_Init+0x3980>)
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	4b3c      	ldr	r3, [pc, #240]	; (8007ae8 <LCD_Init+0x3980>)
 80079f8:	2280      	movs	r2, #128	; 0x80
 80079fa:	611a      	str	r2, [r3, #16]
 80079fc:	4b3a      	ldr	r3, [pc, #232]	; (8007ae8 <LCD_Init+0x3980>)
 80079fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8007a04:	4b38      	ldr	r3, [pc, #224]	; (8007ae8 <LCD_Init+0x3980>)
 8007a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a0a:	611a      	str	r2, [r3, #16]
 8007a0c:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <LCD_Init+0x3980>)
 8007a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a12:	615a      	str	r2, [r3, #20]
 8007a14:	4b35      	ldr	r3, [pc, #212]	; (8007aec <LCD_Init+0x3984>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	4b33      	ldr	r3, [pc, #204]	; (8007ae8 <LCD_Init+0x3980>)
 8007a1c:	2280      	movs	r2, #128	; 0x80
 8007a1e:	615a      	str	r2, [r3, #20]
 8007a20:	4b31      	ldr	r3, [pc, #196]	; (8007ae8 <LCD_Init+0x3980>)
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	611a      	str	r2, [r3, #16]
 8007a26:	4b30      	ldr	r3, [pc, #192]	; (8007ae8 <LCD_Init+0x3980>)
 8007a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a2c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8007a2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ae8 <LCD_Init+0x3980>)
 8007a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a34:	611a      	str	r2, [r3, #16]
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <LCD_Init+0x3980>)
 8007a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a3c:	615a      	str	r2, [r3, #20]
 8007a3e:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <LCD_Init+0x3984>)
 8007a40:	2203      	movs	r2, #3
 8007a42:	60da      	str	r2, [r3, #12]
 8007a44:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <LCD_Init+0x3980>)
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	615a      	str	r2, [r3, #20]
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <LCD_Init+0x3980>)
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	611a      	str	r2, [r3, #16]
 8007a50:	4b25      	ldr	r3, [pc, #148]	; (8007ae8 <LCD_Init+0x3980>)
 8007a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007a58:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <LCD_Init+0x3980>)
 8007a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5e:	611a      	str	r2, [r3, #16]
 8007a60:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <LCD_Init+0x3980>)
 8007a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a66:	615a      	str	r2, [r3, #20]
 8007a68:	4b20      	ldr	r3, [pc, #128]	; (8007aec <LCD_Init+0x3984>)
 8007a6a:	f240 321f 	movw	r2, #799	; 0x31f
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <LCD_Init+0x3980>)
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	615a      	str	r2, [r3, #20]
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <LCD_Init+0x3980>)
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	611a      	str	r2, [r3, #16]
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <LCD_Init+0x3980>)
 8007a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <LCD_Init+0x3980>)
 8007a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a8a:	611a      	str	r2, [r3, #16]
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <LCD_Init+0x3980>)
 8007a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a92:	615a      	str	r2, [r3, #20]
 8007a94:	4b15      	ldr	r3, [pc, #84]	; (8007aec <LCD_Init+0x3984>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <LCD_Init+0x3980>)
 8007a9c:	2280      	movs	r2, #128	; 0x80
 8007a9e:	615a      	str	r2, [r3, #20]
 8007aa0:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <LCD_Init+0x3980>)
 8007aa2:	2280      	movs	r2, #128	; 0x80
 8007aa4:	611a      	str	r2, [r3, #16]
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <LCD_Init+0x3980>)
 8007aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <LCD_Init+0x3980>)
 8007ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab4:	611a      	str	r2, [r3, #16]
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <LCD_Init+0x3980>)
 8007ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abc:	615a      	str	r2, [r3, #20]
 8007abe:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <LCD_Init+0x3984>)
 8007ac0:	f240 12df 	movw	r2, #479	; 0x1df
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <LCD_Init+0x3980>)
 8007ac8:	2280      	movs	r2, #128	; 0x80
 8007aca:	615a      	str	r2, [r3, #20]
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <LCD_Init+0x3980>)
 8007ace:	2280      	movs	r2, #128	; 0x80
 8007ad0:	611a      	str	r2, [r3, #16]
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <LCD_Init+0x3980>)
 8007ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <LCD_Init+0x3980>)
 8007adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae0:	e006      	b.n	8007af0 <LCD_Init+0x3988>
 8007ae2:	bf00      	nop
 8007ae4:	200004ac 	.word	0x200004ac
 8007ae8:	40011000 	.word	0x40011000
 8007aec:	40010c00 	.word	0x40010c00
 8007af0:	611a      	str	r2, [r3, #16]
 8007af2:	4ba3      	ldr	r3, [pc, #652]	; (8007d80 <LCD_Init+0x3c18>)
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	615a      	str	r2, [r3, #20]
 8007afa:	4ba2      	ldr	r3, [pc, #648]	; (8007d84 <LCD_Init+0x3c1c>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	4b9f      	ldr	r3, [pc, #636]	; (8007d80 <LCD_Init+0x3c18>)
 8007b02:	2280      	movs	r2, #128	; 0x80
 8007b04:	615a      	str	r2, [r3, #20]
 8007b06:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <LCD_Init+0x3c18>)
 8007b08:	2280      	movs	r2, #128	; 0x80
 8007b0a:	611a      	str	r2, [r3, #16]
 8007b0c:	4b9c      	ldr	r3, [pc, #624]	; (8007d80 <LCD_Init+0x3c18>)
 8007b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b12:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8007b14:	20b4      	movs	r0, #180	; 0xb4
 8007b16:	f7fb f801 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007b1a:	4b99      	ldr	r3, [pc, #612]	; (8007d80 <LCD_Init+0x3c18>)
 8007b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b20:	611a      	str	r2, [r3, #16]
 8007b22:	4b97      	ldr	r3, [pc, #604]	; (8007d80 <LCD_Init+0x3c18>)
 8007b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b28:	615a      	str	r2, [r3, #20]
 8007b2a:	4b96      	ldr	r3, [pc, #600]	; (8007d84 <LCD_Init+0x3c1c>)
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	60da      	str	r2, [r3, #12]
 8007b30:	4b93      	ldr	r3, [pc, #588]	; (8007d80 <LCD_Init+0x3c18>)
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	615a      	str	r2, [r3, #20]
 8007b36:	4b92      	ldr	r3, [pc, #584]	; (8007d80 <LCD_Init+0x3c18>)
 8007b38:	2280      	movs	r2, #128	; 0x80
 8007b3a:	611a      	str	r2, [r3, #16]
 8007b3c:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <LCD_Init+0x3c18>)
 8007b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8007b44:	4b8e      	ldr	r3, [pc, #568]	; (8007d80 <LCD_Init+0x3c18>)
 8007b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b4a:	611a      	str	r2, [r3, #16]
 8007b4c:	4b8c      	ldr	r3, [pc, #560]	; (8007d80 <LCD_Init+0x3c18>)
 8007b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b52:	615a      	str	r2, [r3, #20]
 8007b54:	4b8b      	ldr	r3, [pc, #556]	; (8007d84 <LCD_Init+0x3c1c>)
 8007b56:	f240 421f 	movw	r2, #1055	; 0x41f
 8007b5a:	60da      	str	r2, [r3, #12]
 8007b5c:	4b88      	ldr	r3, [pc, #544]	; (8007d80 <LCD_Init+0x3c18>)
 8007b5e:	2280      	movs	r2, #128	; 0x80
 8007b60:	615a      	str	r2, [r3, #20]
 8007b62:	4b87      	ldr	r3, [pc, #540]	; (8007d80 <LCD_Init+0x3c18>)
 8007b64:	2280      	movs	r2, #128	; 0x80
 8007b66:	611a      	str	r2, [r3, #16]
 8007b68:	4b85      	ldr	r3, [pc, #532]	; (8007d80 <LCD_Init+0x3c18>)
 8007b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8007b70:	4b83      	ldr	r3, [pc, #524]	; (8007d80 <LCD_Init+0x3c18>)
 8007b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b76:	611a      	str	r2, [r3, #16]
 8007b78:	4b81      	ldr	r3, [pc, #516]	; (8007d80 <LCD_Init+0x3c18>)
 8007b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7e:	615a      	str	r2, [r3, #20]
 8007b80:	4b80      	ldr	r3, [pc, #512]	; (8007d84 <LCD_Init+0x3c1c>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	4b7e      	ldr	r3, [pc, #504]	; (8007d80 <LCD_Init+0x3c18>)
 8007b88:	2280      	movs	r2, #128	; 0x80
 8007b8a:	615a      	str	r2, [r3, #20]
 8007b8c:	4b7c      	ldr	r3, [pc, #496]	; (8007d80 <LCD_Init+0x3c18>)
 8007b8e:	2280      	movs	r2, #128	; 0x80
 8007b90:	611a      	str	r2, [r3, #16]
 8007b92:	4b7b      	ldr	r3, [pc, #492]	; (8007d80 <LCD_Init+0x3c18>)
 8007b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8007b9a:	4b79      	ldr	r3, [pc, #484]	; (8007d80 <LCD_Init+0x3c18>)
 8007b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba0:	611a      	str	r2, [r3, #16]
 8007ba2:	4b77      	ldr	r3, [pc, #476]	; (8007d80 <LCD_Init+0x3c18>)
 8007ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba8:	615a      	str	r2, [r3, #20]
 8007baa:	4b76      	ldr	r3, [pc, #472]	; (8007d84 <LCD_Init+0x3c1c>)
 8007bac:	222e      	movs	r2, #46	; 0x2e
 8007bae:	60da      	str	r2, [r3, #12]
 8007bb0:	4b73      	ldr	r3, [pc, #460]	; (8007d80 <LCD_Init+0x3c18>)
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	615a      	str	r2, [r3, #20]
 8007bb6:	4b72      	ldr	r3, [pc, #456]	; (8007d80 <LCD_Init+0x3c18>)
 8007bb8:	2280      	movs	r2, #128	; 0x80
 8007bba:	611a      	str	r2, [r3, #16]
 8007bbc:	4b70      	ldr	r3, [pc, #448]	; (8007d80 <LCD_Init+0x3c18>)
 8007bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8007bc4:	4b6e      	ldr	r3, [pc, #440]	; (8007d80 <LCD_Init+0x3c18>)
 8007bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bca:	611a      	str	r2, [r3, #16]
 8007bcc:	4b6c      	ldr	r3, [pc, #432]	; (8007d80 <LCD_Init+0x3c18>)
 8007bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd2:	615a      	str	r2, [r3, #20]
 8007bd4:	4b6b      	ldr	r3, [pc, #428]	; (8007d84 <LCD_Init+0x3c1c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	4b69      	ldr	r3, [pc, #420]	; (8007d80 <LCD_Init+0x3c18>)
 8007bdc:	2280      	movs	r2, #128	; 0x80
 8007bde:	615a      	str	r2, [r3, #20]
 8007be0:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <LCD_Init+0x3c18>)
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	611a      	str	r2, [r3, #16]
 8007be6:	4b66      	ldr	r3, [pc, #408]	; (8007d80 <LCD_Init+0x3c18>)
 8007be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007bee:	4b64      	ldr	r3, [pc, #400]	; (8007d80 <LCD_Init+0x3c18>)
 8007bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bf4:	611a      	str	r2, [r3, #16]
 8007bf6:	4b62      	ldr	r3, [pc, #392]	; (8007d80 <LCD_Init+0x3c18>)
 8007bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfc:	615a      	str	r2, [r3, #20]
 8007bfe:	4b61      	ldr	r3, [pc, #388]	; (8007d84 <LCD_Init+0x3c1c>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	60da      	str	r2, [r3, #12]
 8007c04:	4b5e      	ldr	r3, [pc, #376]	; (8007d80 <LCD_Init+0x3c18>)
 8007c06:	2280      	movs	r2, #128	; 0x80
 8007c08:	615a      	str	r2, [r3, #20]
 8007c0a:	4b5d      	ldr	r3, [pc, #372]	; (8007d80 <LCD_Init+0x3c18>)
 8007c0c:	2280      	movs	r2, #128	; 0x80
 8007c0e:	611a      	str	r2, [r3, #16]
 8007c10:	4b5b      	ldr	r3, [pc, #364]	; (8007d80 <LCD_Init+0x3c18>)
 8007c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007c18:	4b59      	ldr	r3, [pc, #356]	; (8007d80 <LCD_Init+0x3c18>)
 8007c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c1e:	611a      	str	r2, [r3, #16]
 8007c20:	4b57      	ldr	r3, [pc, #348]	; (8007d80 <LCD_Init+0x3c18>)
 8007c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c26:	615a      	str	r2, [r3, #20]
 8007c28:	4b56      	ldr	r3, [pc, #344]	; (8007d84 <LCD_Init+0x3c1c>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	4b54      	ldr	r3, [pc, #336]	; (8007d80 <LCD_Init+0x3c18>)
 8007c30:	2280      	movs	r2, #128	; 0x80
 8007c32:	615a      	str	r2, [r3, #20]
 8007c34:	4b52      	ldr	r3, [pc, #328]	; (8007d80 <LCD_Init+0x3c18>)
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	611a      	str	r2, [r3, #16]
 8007c3a:	4b51      	ldr	r3, [pc, #324]	; (8007d80 <LCD_Init+0x3c18>)
 8007c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007c42:	4b4f      	ldr	r3, [pc, #316]	; (8007d80 <LCD_Init+0x3c18>)
 8007c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c48:	611a      	str	r2, [r3, #16]
 8007c4a:	4b4d      	ldr	r3, [pc, #308]	; (8007d80 <LCD_Init+0x3c18>)
 8007c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c50:	615a      	str	r2, [r3, #20]
 8007c52:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <LCD_Init+0x3c1c>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	60da      	str	r2, [r3, #12]
 8007c58:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <LCD_Init+0x3c18>)
 8007c5a:	2280      	movs	r2, #128	; 0x80
 8007c5c:	615a      	str	r2, [r3, #20]
 8007c5e:	4b48      	ldr	r3, [pc, #288]	; (8007d80 <LCD_Init+0x3c18>)
 8007c60:	2280      	movs	r2, #128	; 0x80
 8007c62:	611a      	str	r2, [r3, #16]
 8007c64:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <LCD_Init+0x3c18>)
 8007c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8007c6c:	20b6      	movs	r0, #182	; 0xb6
 8007c6e:	f7fa ff55 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007c72:	4b43      	ldr	r3, [pc, #268]	; (8007d80 <LCD_Init+0x3c18>)
 8007c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c78:	611a      	str	r2, [r3, #16]
 8007c7a:	4b41      	ldr	r3, [pc, #260]	; (8007d80 <LCD_Init+0x3c18>)
 8007c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c80:	615a      	str	r2, [r3, #20]
 8007c82:	4b40      	ldr	r3, [pc, #256]	; (8007d84 <LCD_Init+0x3c1c>)
 8007c84:	2202      	movs	r2, #2
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	4b3d      	ldr	r3, [pc, #244]	; (8007d80 <LCD_Init+0x3c18>)
 8007c8a:	2280      	movs	r2, #128	; 0x80
 8007c8c:	615a      	str	r2, [r3, #20]
 8007c8e:	4b3c      	ldr	r3, [pc, #240]	; (8007d80 <LCD_Init+0x3c18>)
 8007c90:	2280      	movs	r2, #128	; 0x80
 8007c92:	611a      	str	r2, [r3, #16]
 8007c94:	4b3a      	ldr	r3, [pc, #232]	; (8007d80 <LCD_Init+0x3c18>)
 8007c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8007c9c:	4b38      	ldr	r3, [pc, #224]	; (8007d80 <LCD_Init+0x3c18>)
 8007c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca2:	611a      	str	r2, [r3, #16]
 8007ca4:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <LCD_Init+0x3c18>)
 8007ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007caa:	615a      	str	r2, [r3, #20]
 8007cac:	4b35      	ldr	r3, [pc, #212]	; (8007d84 <LCD_Init+0x3c1c>)
 8007cae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007cb2:	60da      	str	r2, [r3, #12]
 8007cb4:	4b32      	ldr	r3, [pc, #200]	; (8007d80 <LCD_Init+0x3c18>)
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	615a      	str	r2, [r3, #20]
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <LCD_Init+0x3c18>)
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	611a      	str	r2, [r3, #16]
 8007cc0:	4b2f      	ldr	r3, [pc, #188]	; (8007d80 <LCD_Init+0x3c18>)
 8007cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <LCD_Init+0x3c18>)
 8007cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cce:	611a      	str	r2, [r3, #16]
 8007cd0:	4b2b      	ldr	r3, [pc, #172]	; (8007d80 <LCD_Init+0x3c18>)
 8007cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd6:	615a      	str	r2, [r3, #20]
 8007cd8:	4b2a      	ldr	r3, [pc, #168]	; (8007d84 <LCD_Init+0x3c1c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <LCD_Init+0x3c18>)
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	615a      	str	r2, [r3, #20]
 8007ce4:	4b26      	ldr	r3, [pc, #152]	; (8007d80 <LCD_Init+0x3c18>)
 8007ce6:	2280      	movs	r2, #128	; 0x80
 8007ce8:	611a      	str	r2, [r3, #16]
 8007cea:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <LCD_Init+0x3c18>)
 8007cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8007cf2:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <LCD_Init+0x3c18>)
 8007cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cf8:	611a      	str	r2, [r3, #16]
 8007cfa:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <LCD_Init+0x3c18>)
 8007cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d00:	615a      	str	r2, [r3, #20]
 8007d02:	4b20      	ldr	r3, [pc, #128]	; (8007d84 <LCD_Init+0x3c1c>)
 8007d04:	2217      	movs	r2, #23
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <LCD_Init+0x3c18>)
 8007d0a:	2280      	movs	r2, #128	; 0x80
 8007d0c:	615a      	str	r2, [r3, #20]
 8007d0e:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <LCD_Init+0x3c18>)
 8007d10:	2280      	movs	r2, #128	; 0x80
 8007d12:	611a      	str	r2, [r3, #16]
 8007d14:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <LCD_Init+0x3c18>)
 8007d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8007d1c:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <LCD_Init+0x3c18>)
 8007d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d22:	611a      	str	r2, [r3, #16]
 8007d24:	4b16      	ldr	r3, [pc, #88]	; (8007d80 <LCD_Init+0x3c18>)
 8007d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d2a:	615a      	str	r2, [r3, #20]
 8007d2c:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <LCD_Init+0x3c1c>)
 8007d2e:	2215      	movs	r2, #21
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <LCD_Init+0x3c18>)
 8007d34:	2280      	movs	r2, #128	; 0x80
 8007d36:	615a      	str	r2, [r3, #20]
 8007d38:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <LCD_Init+0x3c18>)
 8007d3a:	2280      	movs	r2, #128	; 0x80
 8007d3c:	611a      	str	r2, [r3, #16]
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <LCD_Init+0x3c18>)
 8007d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007d46:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <LCD_Init+0x3c18>)
 8007d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d4c:	611a      	str	r2, [r3, #16]
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <LCD_Init+0x3c18>)
 8007d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d54:	615a      	str	r2, [r3, #20]
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <LCD_Init+0x3c1c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <LCD_Init+0x3c18>)
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	615a      	str	r2, [r3, #20]
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <LCD_Init+0x3c18>)
 8007d64:	2280      	movs	r2, #128	; 0x80
 8007d66:	611a      	str	r2, [r3, #16]
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <LCD_Init+0x3c18>)
 8007d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007d70:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <LCD_Init+0x3c18>)
 8007d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d76:	611a      	str	r2, [r3, #16]
 8007d78:	4b01      	ldr	r3, [pc, #4]	; (8007d80 <LCD_Init+0x3c18>)
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	e003      	b.n	8007d88 <LCD_Init+0x3c20>
 8007d80:	40011000 	.word	0x40011000
 8007d84:	40010c00 	.word	0x40010c00
 8007d88:	615a      	str	r2, [r3, #20]
 8007d8a:	4b8b      	ldr	r3, [pc, #556]	; (8007fb8 <LCD_Init+0x3e50>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	60da      	str	r2, [r3, #12]
 8007d90:	4b8a      	ldr	r3, [pc, #552]	; (8007fbc <LCD_Init+0x3e54>)
 8007d92:	2280      	movs	r2, #128	; 0x80
 8007d94:	615a      	str	r2, [r3, #20]
 8007d96:	4b89      	ldr	r3, [pc, #548]	; (8007fbc <LCD_Init+0x3e54>)
 8007d98:	2280      	movs	r2, #128	; 0x80
 8007d9a:	611a      	str	r2, [r3, #16]
 8007d9c:	4b87      	ldr	r3, [pc, #540]	; (8007fbc <LCD_Init+0x3e54>)
 8007d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8007da4:	20f0      	movs	r0, #240	; 0xf0
 8007da6:	f7fa feb9 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8007daa:	4b84      	ldr	r3, [pc, #528]	; (8007fbc <LCD_Init+0x3e54>)
 8007dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007db0:	611a      	str	r2, [r3, #16]
 8007db2:	4b82      	ldr	r3, [pc, #520]	; (8007fbc <LCD_Init+0x3e54>)
 8007db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db8:	615a      	str	r2, [r3, #20]
 8007dba:	4b7f      	ldr	r3, [pc, #508]	; (8007fb8 <LCD_Init+0x3e50>)
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	60da      	str	r2, [r3, #12]
 8007dc0:	4b7e      	ldr	r3, [pc, #504]	; (8007fbc <LCD_Init+0x3e54>)
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	615a      	str	r2, [r3, #20]
 8007dc6:	4b7d      	ldr	r3, [pc, #500]	; (8007fbc <LCD_Init+0x3e54>)
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	4b7b      	ldr	r3, [pc, #492]	; (8007fbc <LCD_Init+0x3e54>)
 8007dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8007dd4:	2029      	movs	r0, #41	; 0x29
 8007dd6:	f7fa fea1 	bl	8002b1c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007dda:	20d0      	movs	r0, #208	; 0xd0
 8007ddc:	f7fa fe9e 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007de0:	4b76      	ldr	r3, [pc, #472]	; (8007fbc <LCD_Init+0x3e54>)
 8007de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007de6:	611a      	str	r2, [r3, #16]
 8007de8:	4b74      	ldr	r3, [pc, #464]	; (8007fbc <LCD_Init+0x3e54>)
 8007dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dee:	615a      	str	r2, [r3, #20]
 8007df0:	4b71      	ldr	r3, [pc, #452]	; (8007fb8 <LCD_Init+0x3e50>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	4b71      	ldr	r3, [pc, #452]	; (8007fbc <LCD_Init+0x3e54>)
 8007df8:	2280      	movs	r2, #128	; 0x80
 8007dfa:	615a      	str	r2, [r3, #20]
 8007dfc:	4b6f      	ldr	r3, [pc, #444]	; (8007fbc <LCD_Init+0x3e54>)
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	611a      	str	r2, [r3, #16]
 8007e02:	4b6e      	ldr	r3, [pc, #440]	; (8007fbc <LCD_Init+0x3e54>)
 8007e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e08:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007e0a:	20be      	movs	r0, #190	; 0xbe
 8007e0c:	f7fa fe86 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007e10:	4b6a      	ldr	r3, [pc, #424]	; (8007fbc <LCD_Init+0x3e54>)
 8007e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e16:	611a      	str	r2, [r3, #16]
 8007e18:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <LCD_Init+0x3e54>)
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	615a      	str	r2, [r3, #20]
 8007e20:	4b65      	ldr	r3, [pc, #404]	; (8007fb8 <LCD_Init+0x3e50>)
 8007e22:	2205      	movs	r2, #5
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	4b65      	ldr	r3, [pc, #404]	; (8007fbc <LCD_Init+0x3e54>)
 8007e28:	2280      	movs	r2, #128	; 0x80
 8007e2a:	615a      	str	r2, [r3, #20]
 8007e2c:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <LCD_Init+0x3e54>)
 8007e2e:	2280      	movs	r2, #128	; 0x80
 8007e30:	611a      	str	r2, [r3, #16]
 8007e32:	4b62      	ldr	r3, [pc, #392]	; (8007fbc <LCD_Init+0x3e54>)
 8007e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007e3a:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <LCD_Init+0x3e54>)
 8007e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e40:	611a      	str	r2, [r3, #16]
 8007e42:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <LCD_Init+0x3e54>)
 8007e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e48:	615a      	str	r2, [r3, #20]
 8007e4a:	4b5b      	ldr	r3, [pc, #364]	; (8007fb8 <LCD_Init+0x3e50>)
 8007e4c:	22fe      	movs	r2, #254	; 0xfe
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	4b5a      	ldr	r3, [pc, #360]	; (8007fbc <LCD_Init+0x3e54>)
 8007e52:	2280      	movs	r2, #128	; 0x80
 8007e54:	615a      	str	r2, [r3, #20]
 8007e56:	4b59      	ldr	r3, [pc, #356]	; (8007fbc <LCD_Init+0x3e54>)
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	611a      	str	r2, [r3, #16]
 8007e5c:	4b57      	ldr	r3, [pc, #348]	; (8007fbc <LCD_Init+0x3e54>)
 8007e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8007e64:	4b55      	ldr	r3, [pc, #340]	; (8007fbc <LCD_Init+0x3e54>)
 8007e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e6a:	611a      	str	r2, [r3, #16]
 8007e6c:	4b53      	ldr	r3, [pc, #332]	; (8007fbc <LCD_Init+0x3e54>)
 8007e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e72:	615a      	str	r2, [r3, #20]
 8007e74:	4b50      	ldr	r3, [pc, #320]	; (8007fb8 <LCD_Init+0x3e50>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	4b50      	ldr	r3, [pc, #320]	; (8007fbc <LCD_Init+0x3e54>)
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	615a      	str	r2, [r3, #20]
 8007e80:	4b4e      	ldr	r3, [pc, #312]	; (8007fbc <LCD_Init+0x3e54>)
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	611a      	str	r2, [r3, #16]
 8007e86:	4b4d      	ldr	r3, [pc, #308]	; (8007fbc <LCD_Init+0x3e54>)
 8007e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8007e8e:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <LCD_Init+0x3e54>)
 8007e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e94:	611a      	str	r2, [r3, #16]
 8007e96:	4b49      	ldr	r3, [pc, #292]	; (8007fbc <LCD_Init+0x3e54>)
 8007e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9c:	615a      	str	r2, [r3, #20]
 8007e9e:	4b46      	ldr	r3, [pc, #280]	; (8007fb8 <LCD_Init+0x3e50>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	4b45      	ldr	r3, [pc, #276]	; (8007fbc <LCD_Init+0x3e54>)
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	615a      	str	r2, [r3, #20]
 8007eaa:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <LCD_Init+0x3e54>)
 8007eac:	2280      	movs	r2, #128	; 0x80
 8007eae:	611a      	str	r2, [r3, #16]
 8007eb0:	4b42      	ldr	r3, [pc, #264]	; (8007fbc <LCD_Init+0x3e54>)
 8007eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007eb8:	4b40      	ldr	r3, [pc, #256]	; (8007fbc <LCD_Init+0x3e54>)
 8007eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ebe:	611a      	str	r2, [r3, #16]
 8007ec0:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <LCD_Init+0x3e54>)
 8007ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec6:	615a      	str	r2, [r3, #20]
 8007ec8:	4b3b      	ldr	r3, [pc, #236]	; (8007fb8 <LCD_Init+0x3e50>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	4b3b      	ldr	r3, [pc, #236]	; (8007fbc <LCD_Init+0x3e54>)
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	615a      	str	r2, [r3, #20]
 8007ed4:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <LCD_Init+0x3e54>)
 8007ed6:	2280      	movs	r2, #128	; 0x80
 8007ed8:	611a      	str	r2, [r3, #16]
 8007eda:	4b38      	ldr	r3, [pc, #224]	; (8007fbc <LCD_Init+0x3e54>)
 8007edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <LCD_Init+0x3e54>)
 8007ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ee8:	611a      	str	r2, [r3, #16]
 8007eea:	4b34      	ldr	r3, [pc, #208]	; (8007fbc <LCD_Init+0x3e54>)
 8007eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef0:	615a      	str	r2, [r3, #20]
 8007ef2:	4b31      	ldr	r3, [pc, #196]	; (8007fb8 <LCD_Init+0x3e50>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	4b30      	ldr	r3, [pc, #192]	; (8007fbc <LCD_Init+0x3e54>)
 8007efa:	2280      	movs	r2, #128	; 0x80
 8007efc:	615a      	str	r2, [r3, #20]
 8007efe:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <LCD_Init+0x3e54>)
 8007f00:	2280      	movs	r2, #128	; 0x80
 8007f02:	611a      	str	r2, [r3, #16]
 8007f04:	4b2d      	ldr	r3, [pc, #180]	; (8007fbc <LCD_Init+0x3e54>)
 8007f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007f0c:	20b8      	movs	r0, #184	; 0xb8
 8007f0e:	f7fa fe05 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8007f12:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <LCD_Init+0x3e54>)
 8007f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f18:	611a      	str	r2, [r3, #16]
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <LCD_Init+0x3e54>)
 8007f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f20:	615a      	str	r2, [r3, #20]
 8007f22:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <LCD_Init+0x3e50>)
 8007f24:	2203      	movs	r2, #3
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <LCD_Init+0x3e54>)
 8007f2a:	2280      	movs	r2, #128	; 0x80
 8007f2c:	615a      	str	r2, [r3, #20]
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <LCD_Init+0x3e54>)
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	611a      	str	r2, [r3, #16]
 8007f34:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <LCD_Init+0x3e54>)
 8007f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8007f3c:	4b1f      	ldr	r3, [pc, #124]	; (8007fbc <LCD_Init+0x3e54>)
 8007f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f42:	611a      	str	r2, [r3, #16]
 8007f44:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <LCD_Init+0x3e54>)
 8007f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f4a:	615a      	str	r2, [r3, #20]
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <LCD_Init+0x3e50>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	60da      	str	r2, [r3, #12]
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <LCD_Init+0x3e54>)
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	615a      	str	r2, [r3, #20]
 8007f58:	4b18      	ldr	r3, [pc, #96]	; (8007fbc <LCD_Init+0x3e54>)
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	611a      	str	r2, [r3, #16]
 8007f5e:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <LCD_Init+0x3e54>)
 8007f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8007f66:	20ba      	movs	r0, #186	; 0xba
 8007f68:	f7fa fdd8 	bl	8002b1c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8007f6c:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <LCD_Init+0x3e54>)
 8007f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f72:	611a      	str	r2, [r3, #16]
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <LCD_Init+0x3e54>)
 8007f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f7a:	615a      	str	r2, [r3, #20]
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <LCD_Init+0x3e50>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <LCD_Init+0x3e54>)
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	615a      	str	r2, [r3, #20]
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <LCD_Init+0x3e54>)
 8007f8a:	2280      	movs	r2, #128	; 0x80
 8007f8c:	611a      	str	r2, [r3, #16]
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <LCD_Init+0x3e54>)
 8007f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f94:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8007f96:	2064      	movs	r0, #100	; 0x64
 8007f98:	f7fb ff36 	bl	8003e08 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f7fb ffd7 	bl	8003f50 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <LCD_Init+0x3e58>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8007fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007fac:	f000 f80a 	bl	8007fc4 <LCD_Clear>
}
 8007fb0:	bf00      	nop
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	40010c00 	.word	0x40010c00
 8007fbc:	40011000 	.word	0x40011000
 8007fc0:	422201a8 	.word	0x422201a8

08007fc4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8007fd2:	4b2a      	ldr	r3, [pc, #168]	; (800807c <LCD_Clear+0xb8>)
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8007fd8:	4b28      	ldr	r3, [pc, #160]	; (800807c <LCD_Clear+0xb8>)
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	fb02 f303 	mul.w	r3, r2, r3
 8007fe4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <LCD_Clear+0xb8>)
 8007fe8:	889b      	ldrh	r3, [r3, #4]
 8007fea:	f646 0204 	movw	r2, #26628	; 0x6804
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d11a      	bne.n	8008028 <LCD_Clear+0x64>
 8007ff2:	4b22      	ldr	r3, [pc, #136]	; (800807c <LCD_Clear+0xb8>)
 8007ff4:	799b      	ldrb	r3, [r3, #6]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d116      	bne.n	8008028 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8007ffa:	4b20      	ldr	r3, [pc, #128]	; (800807c <LCD_Clear+0xb8>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <LCD_Clear+0xb8>)
 8008002:	222a      	movs	r2, #42	; 0x2a
 8008004:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8008006:	4b1d      	ldr	r3, [pc, #116]	; (800807c <LCD_Clear+0xb8>)
 8008008:	222b      	movs	r2, #43	; 0x2b
 800800a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800800c:	2100      	movs	r1, #0
 800800e:	2000      	movs	r0, #0
 8008010:	f7fa fe56 	bl	8002cc0 <LCD_SetCursor>
		lcddev.dir = 1;
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <LCD_Clear+0xb8>)
 8008016:	2201      	movs	r2, #1
 8008018:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <LCD_Clear+0xb8>)
 800801c:	222b      	movs	r2, #43	; 0x2b
 800801e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008020:	4b16      	ldr	r3, [pc, #88]	; (800807c <LCD_Clear+0xb8>)
 8008022:	222a      	movs	r2, #42	; 0x2a
 8008024:	819a      	strh	r2, [r3, #12]
 8008026:	e003      	b.n	8008030 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8008028:	2100      	movs	r1, #0
 800802a:	2000      	movs	r0, #0
 800802c:	f7fa fe48 	bl	8002cc0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8008030:	f7fa fe3a 	bl	8002ca8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	e017      	b.n	800806a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800803a:	4b11      	ldr	r3, [pc, #68]	; (8008080 <LCD_Clear+0xbc>)
 800803c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008040:	611a      	str	r2, [r3, #16]
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <LCD_Clear+0xbc>)
 8008044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008048:	615a      	str	r2, [r3, #20]
 800804a:	4a0e      	ldr	r2, [pc, #56]	; (8008084 <LCD_Clear+0xc0>)
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	60d3      	str	r3, [r2, #12]
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <LCD_Clear+0xbc>)
 8008052:	2280      	movs	r2, #128	; 0x80
 8008054:	615a      	str	r2, [r3, #20]
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <LCD_Clear+0xbc>)
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	611a      	str	r2, [r3, #16]
 800805c:	4b08      	ldr	r3, [pc, #32]	; (8008080 <LCD_Clear+0xbc>)
 800805e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008062:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	d3e3      	bcc.n	800803a <LCD_Clear+0x76>
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200004ac 	.word	0x200004ac
 8008080:	40011000 	.word	0x40011000
 8008084:	40010c00 	.word	0x40010c00

08008088 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8008088:	b590      	push	{r4, r7, lr}
 800808a:	b087      	sub	sp, #28
 800808c:	af02      	add	r7, sp, #8
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4623      	mov	r3, r4
 8008098:	80fb      	strh	r3, [r7, #6]
 800809a:	4603      	mov	r3, r0
 800809c:	80bb      	strh	r3, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	807b      	strh	r3, [r7, #2]
 80080a2:	4613      	mov	r3, r2
 80080a4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80080aa:	4b3a      	ldr	r3, [pc, #232]	; (8008194 <LCD_Fill+0x10c>)
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d133      	bne.n	800811e <LCD_Fill+0x96>
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <LCD_Fill+0x10c>)
 80080b8:	799b      	ldrb	r3, [r3, #6]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d12f      	bne.n	800811e <LCD_Fill+0x96>
			{
		temp = sx;
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80080c2:	88bb      	ldrh	r3, [r7, #4]
 80080c4:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80080c6:	4b33      	ldr	r3, [pc, #204]	; (8008194 <LCD_Fill+0x10c>)
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	887b      	ldrh	r3, [r7, #2]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80080d4:	883b      	ldrh	r3, [r7, #0]
 80080d6:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80080d8:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <LCD_Fill+0x10c>)
 80080da:	881a      	ldrh	r2, [r3, #0]
 80080dc:	893b      	ldrh	r3, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80080e6:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <LCD_Fill+0x10c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80080ec:	4b29      	ldr	r3, [pc, #164]	; (8008194 <LCD_Fill+0x10c>)
 80080ee:	222a      	movs	r2, #42	; 0x2a
 80080f0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80080f2:	4b28      	ldr	r3, [pc, #160]	; (8008194 <LCD_Fill+0x10c>)
 80080f4:	222b      	movs	r2, #43	; 0x2b
 80080f6:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80080f8:	883c      	ldrh	r4, [r7, #0]
 80080fa:	887a      	ldrh	r2, [r7, #2]
 80080fc:	88b9      	ldrh	r1, [r7, #4]
 80080fe:	88f8      	ldrh	r0, [r7, #6]
 8008100:	8c3b      	ldrh	r3, [r7, #32]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4623      	mov	r3, r4
 8008106:	f7ff ffbf 	bl	8008088 <LCD_Fill>
		lcddev.dir = 1;
 800810a:	4b22      	ldr	r3, [pc, #136]	; (8008194 <LCD_Fill+0x10c>)
 800810c:	2201      	movs	r2, #1
 800810e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008110:	4b20      	ldr	r3, [pc, #128]	; (8008194 <LCD_Fill+0x10c>)
 8008112:	222b      	movs	r2, #43	; 0x2b
 8008114:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008116:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <LCD_Fill+0x10c>)
 8008118:	222a      	movs	r2, #42	; 0x2a
 800811a:	819a      	strh	r2, [r3, #12]
 800811c:	e036      	b.n	800818c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 800811e:	887a      	ldrh	r2, [r7, #2]
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	b29b      	uxth	r3, r3
 8008126:	3301      	adds	r3, #1
 8008128:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800812a:	88bb      	ldrh	r3, [r7, #4]
 800812c:	81fb      	strh	r3, [r7, #14]
 800812e:	e029      	b.n	8008184 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008130:	89fa      	ldrh	r2, [r7, #14]
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fa fdc2 	bl	8002cc0 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800813c:	f7fa fdb4 	bl	8002ca8 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8008140:	2300      	movs	r3, #0
 8008142:	81bb      	strh	r3, [r7, #12]
 8008144:	e017      	b.n	8008176 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <LCD_Fill+0x110>)
 8008148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <LCD_Fill+0x110>)
 8008150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008154:	615a      	str	r2, [r3, #20]
 8008156:	4a11      	ldr	r2, [pc, #68]	; (800819c <LCD_Fill+0x114>)
 8008158:	8c3b      	ldrh	r3, [r7, #32]
 800815a:	60d3      	str	r3, [r2, #12]
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <LCD_Fill+0x110>)
 800815e:	2280      	movs	r2, #128	; 0x80
 8008160:	615a      	str	r2, [r3, #20]
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <LCD_Fill+0x110>)
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	611a      	str	r2, [r3, #16]
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <LCD_Fill+0x110>)
 800816a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8008170:	89bb      	ldrh	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	81bb      	strh	r3, [r7, #12]
 8008176:	89ba      	ldrh	r2, [r7, #12]
 8008178:	897b      	ldrh	r3, [r7, #10]
 800817a:	429a      	cmp	r2, r3
 800817c:	d3e3      	bcc.n	8008146 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800817e:	89fb      	ldrh	r3, [r7, #14]
 8008180:	3301      	adds	r3, #1
 8008182:	81fb      	strh	r3, [r7, #14]
 8008184:	89fa      	ldrh	r2, [r7, #14]
 8008186:	883b      	ldrh	r3, [r7, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d9d1      	bls.n	8008130 <LCD_Fill+0xa8>
		}
	}
}
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	bd90      	pop	{r4, r7, pc}
 8008194:	200004ac 	.word	0x200004ac
 8008198:	40011000 	.word	0x40011000
 800819c:	40010c00 	.word	0x40010c00

080081a0 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) {
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b08d      	sub	sp, #52	; 0x34
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	461a      	mov	r2, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	80fb      	strh	r3, [r7, #6]
 80081b2:	4603      	mov	r3, r0
 80081b4:	80bb      	strh	r3, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	807b      	strh	r3, [r7, #2]
 80081ba:	4613      	mov	r3, r2
 80081bc:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 80081be:	2300      	movs	r3, #0
 80081c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 80081c6:	887a      	ldrh	r2, [r7, #2]
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 80081ce:	883a      	ldrh	r2, [r7, #0]
 80081d0:	88bb      	ldrh	r3, [r7, #4]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80081da:	88bb      	ldrh	r3, [r7, #4]
 80081dc:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dd02      	ble.n	80081ea <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	e00b      	b.n	8008202 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e005      	b.n	8008202 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	425b      	negs	r3, r3
 8008200:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	dd02      	ble.n	800820e <LCD_DrawLine+0x6e>
		incy = 1;
 8008208:	2301      	movs	r3, #1
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	e00b      	b.n	8008226 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8008214:	2300      	movs	r3, #0
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	e005      	b.n	8008226 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	425b      	negs	r3, r3
 8008224:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	429a      	cmp	r2, r3
 800822c:	dd02      	ble.n	8008234 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e001      	b.n	8008238 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008238:	2300      	movs	r3, #0
 800823a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800823c:	e02b      	b.n	8008296 <LCD_DrawLine+0xf6>
	{
		//LCD_DrawPoint(uRow, uCol,color); //画点
		LCD_Fast_DrawPoint(uRow, uCol,color);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	b29b      	uxth	r3, r3
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	b291      	uxth	r1, r2
 8008246:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800824a:	4618      	mov	r0, r3
 800824c:	f7fb fb44 	bl	80038d8 <LCD_Fast_DrawPoint>
		xerr += delta_x;
 8008250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	4413      	add	r3, r2
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8008260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	dd07      	ble.n	8008278 <LCD_DrawLine+0xd8>
			xerr -= distance;
 8008268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8008278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	429a      	cmp	r2, r3
 800827e:	dd07      	ble.n	8008290 <LCD_DrawLine+0xf0>
			yerr -= distance;
 8008280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4413      	add	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008290:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008292:	3301      	adds	r3, #1
 8008294:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008296:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	3301      	adds	r3, #1
 800829c:	429a      	cmp	r2, r3
 800829e:	ddce      	ble.n	800823e <LCD_DrawLine+0x9e>
		}
	}
}
 80082a0:	bf00      	nop
 80082a2:	3734      	adds	r7, #52	; 0x34
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}

080082a8 <LCD_Draw_Circle>:
}

// Draw a circle
//(x,y): center
//r    : radius
void LCD_Draw_Circle(uint16_t x0, uint16_t y0, uint8_t r,uint16_t color) {
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	80fb      	strh	r3, [r7, #6]
 80082ba:	4603      	mov	r3, r0
 80082bc:	80bb      	strh	r3, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
 80082c2:	4613      	mov	r3, r2
 80082c4:	803b      	strh	r3, [r7, #0]
	int a, b;
	int di;
	a = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
	b = r;
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	613b      	str	r3, [r7, #16]
	di = 3 - (r << 1);             //判断下个点位置的标志
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	f1c3 0303 	rsb	r3, r3, #3
 80082d6:	60fb      	str	r3, [r7, #12]
	while (a <= b) {
 80082d8:	e087      	b.n	80083ea <LCD_Draw_Circle+0x142>
		LCD_DrawPoint(x0 + a, y0 - b,color);             //5
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	4413      	add	r3, r2
 80082e2:	b298      	uxth	r0, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	88ba      	ldrh	r2, [r7, #4]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	883a      	ldrh	r2, [r7, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	f7fb fac3 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 - a,color);             //0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	4413      	add	r3, r2
 80082fe:	b298      	uxth	r0, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	b29b      	uxth	r3, r3
 8008304:	88ba      	ldrh	r2, [r7, #4]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	b29b      	uxth	r3, r3
 800830a:	883a      	ldrh	r2, [r7, #0]
 800830c:	4619      	mov	r1, r3
 800830e:	f7fb fab5 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 + a,color);             //4
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	b29a      	uxth	r2, r3
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	4413      	add	r3, r2
 800831a:	b298      	uxth	r0, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	b29a      	uxth	r2, r3
 8008320:	88bb      	ldrh	r3, [r7, #4]
 8008322:	4413      	add	r3, r2
 8008324:	b29b      	uxth	r3, r3
 8008326:	883a      	ldrh	r2, [r7, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	f7fb faa7 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 + a, y0 + b,color);             //6
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	b29a      	uxth	r2, r3
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	4413      	add	r3, r2
 8008336:	b298      	uxth	r0, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	b29a      	uxth	r2, r3
 800833c:	88bb      	ldrh	r3, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	b29b      	uxth	r3, r3
 8008342:	883a      	ldrh	r2, [r7, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	f7fb fa99 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 + b,color);             //1
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	b29b      	uxth	r3, r3
 800834e:	88fa      	ldrh	r2, [r7, #6]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	b298      	uxth	r0, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	b29a      	uxth	r2, r3
 8008358:	88bb      	ldrh	r3, [r7, #4]
 800835a:	4413      	add	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	883a      	ldrh	r2, [r7, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	f7fb fa8b 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a,color);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	b29b      	uxth	r3, r3
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	b298      	uxth	r0, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	b29a      	uxth	r2, r3
 8008374:	88bb      	ldrh	r3, [r7, #4]
 8008376:	4413      	add	r3, r2
 8008378:	b29b      	uxth	r3, r3
 800837a:	883a      	ldrh	r2, [r7, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	f7fb fa7d 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 - b,color);             //2
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	b29b      	uxth	r3, r3
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	b298      	uxth	r0, r3
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	b29b      	uxth	r3, r3
 8008390:	88ba      	ldrh	r2, [r7, #4]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	b29b      	uxth	r3, r3
 8008396:	883a      	ldrh	r2, [r7, #0]
 8008398:	4619      	mov	r1, r3
 800839a:	f7fb fa6f 	bl	800387c <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a,color);             //7
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	88fa      	ldrh	r2, [r7, #6]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	b298      	uxth	r0, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	88ba      	ldrh	r2, [r7, #4]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	883a      	ldrh	r2, [r7, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	f7fb fa61 	bl	800387c <LCD_DrawPoint>
		a++;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	3301      	adds	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆     
		if (di < 0)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da06      	bge.n	80083d4 <LCD_Draw_Circle+0x12c>
			di += 4 * a + 6;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	3306      	adds	r3, #6
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	e00a      	b.n	80083ea <LCD_Draw_Circle+0x142>
		else {
			di += 10 + 4 * (a - b);
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	330a      	adds	r3, #10
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
			b--;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	613b      	str	r3, [r7, #16]
	while (a <= b) {
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f77f af73 	ble.w	80082da <LCD_Draw_Circle+0x32>
		}
	}
}
 80083f4:	bf00      	nop
 80083f6:	371c      	adds	r7, #28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}

080083fc <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4623      	mov	r3, r4
 800840c:	80fb      	strh	r3, [r7, #6]
 800840e:	4603      	mov	r3, r0
 8008410:	80bb      	strh	r3, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
 8008416:	4613      	mov	r3, r2
 8008418:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800841a:	88bb      	ldrh	r3, [r7, #4]
 800841c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800841e:	78bb      	ldrb	r3, [r7, #2]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	b2db      	uxtb	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	78bb      	ldrb	r3, [r7, #2]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	bf14      	ite	ne
 8008432:	2301      	movne	r3, #1
 8008434:	2300      	moveq	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	4413      	add	r3, r2
 800843a:	b2db      	uxtb	r3, r3
 800843c:	78ba      	ldrb	r2, [r7, #2]
 800843e:	0852      	lsrs	r2, r2, #1
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	3b20      	subs	r3, #32
 800844c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800844e:	2300      	movs	r3, #0
 8008450:	737b      	strb	r3, [r7, #13]
 8008452:	e069      	b.n	8008528 <LCD_ShowChar+0x12c>
		if (size == 12)
 8008454:	78bb      	ldrb	r3, [r7, #2]
 8008456:	2b0c      	cmp	r3, #12
 8008458:	d10b      	bne.n	8008472 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800845a:	78fa      	ldrb	r2, [r7, #3]
 800845c:	7b79      	ldrb	r1, [r7, #13]
 800845e:	4838      	ldr	r0, [pc, #224]	; (8008540 <LCD_ShowChar+0x144>)
 8008460:	4613      	mov	r3, r2
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4403      	add	r3, r0
 800846a:	440b      	add	r3, r1
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	e019      	b.n	80084a6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8008472:	78bb      	ldrb	r3, [r7, #2]
 8008474:	2b10      	cmp	r3, #16
 8008476:	d108      	bne.n	800848a <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	7b7b      	ldrb	r3, [r7, #13]
 800847c:	4931      	ldr	r1, [pc, #196]	; (8008544 <LCD_ShowChar+0x148>)
 800847e:	0112      	lsls	r2, r2, #4
 8008480:	440a      	add	r2, r1
 8008482:	4413      	add	r3, r2
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	e00d      	b.n	80084a6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 800848a:	78bb      	ldrb	r3, [r7, #2]
 800848c:	2b18      	cmp	r3, #24
 800848e:	d150      	bne.n	8008532 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	7b79      	ldrb	r1, [r7, #13]
 8008494:	482c      	ldr	r0, [pc, #176]	; (8008548 <LCD_ShowChar+0x14c>)
 8008496:	4613      	mov	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4403      	add	r3, r0
 80084a0:	440b      	add	r3, r1
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80084a6:	2300      	movs	r3, #0
 80084a8:	73bb      	strb	r3, [r7, #14]
 80084aa:	e035      	b.n	8008518 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80084ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da07      	bge.n	80084c4 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <LCD_ShowChar+0x150>)
 80084b6:	881a      	ldrh	r2, [r3, #0]
 80084b8:	88b9      	ldrh	r1, [r7, #4]
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fb fa0b 	bl	80038d8 <LCD_Fast_DrawPoint>
 80084c2:	e00a      	b.n	80084da <LCD_ShowChar+0xde>
			else if (mode == 0)
 80084c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80084cc:	4b20      	ldr	r3, [pc, #128]	; (8008550 <LCD_ShowChar+0x154>)
 80084ce:	881a      	ldrh	r2, [r3, #0]
 80084d0:	88b9      	ldrh	r1, [r7, #4]
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fb f9ff 	bl	80038d8 <LCD_Fast_DrawPoint>
			temp <<= 1;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
			y++;
 80084e0:	88bb      	ldrh	r3, [r7, #4]
 80084e2:	3301      	adds	r3, #1
 80084e4:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 80084e6:	4b1b      	ldr	r3, [pc, #108]	; (8008554 <LCD_ShowChar+0x158>)
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	88ba      	ldrh	r2, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d222      	bcs.n	8008536 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 80084f0:	88ba      	ldrh	r2, [r7, #4]
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	1ad2      	subs	r2, r2, r3
 80084f6:	78bb      	ldrb	r3, [r7, #2]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d10a      	bne.n	8008512 <LCD_ShowChar+0x116>
				y = y0;
 80084fc:	897b      	ldrh	r3, [r7, #10]
 80084fe:	80bb      	strh	r3, [r7, #4]
				x++;
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	3301      	adds	r3, #1
 8008504:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <LCD_ShowChar+0x158>)
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	429a      	cmp	r2, r3
 800850e:	d307      	bcc.n	8008520 <LCD_ShowChar+0x124>
					return;	//超区域了
 8008510:	e012      	b.n	8008538 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	3301      	adds	r3, #1
 8008516:	73bb      	strb	r3, [r7, #14]
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b07      	cmp	r3, #7
 800851c:	d9c6      	bls.n	80084ac <LCD_ShowChar+0xb0>
 800851e:	e000      	b.n	8008522 <LCD_ShowChar+0x126>
				break;
 8008520:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8008522:	7b7b      	ldrb	r3, [r7, #13]
 8008524:	3301      	adds	r3, #1
 8008526:	737b      	strb	r3, [r7, #13]
 8008528:	7b7a      	ldrb	r2, [r7, #13]
 800852a:	7a7b      	ldrb	r3, [r7, #9]
 800852c:	429a      	cmp	r2, r3
 800852e:	d391      	bcc.n	8008454 <LCD_ShowChar+0x58>
 8008530:	e002      	b.n	8008538 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8008536:	bf00      	nop
			}
		}
	}
}
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	bd90      	pop	{r4, r7, pc}
 800853e:	bf00      	nop
 8008540:	0800e1ec 	.word	0x0800e1ec
 8008544:	0800e660 	.word	0x0800e660
 8008548:	0800ec50 	.word	0x0800ec50
 800854c:	2000048c 	.word	0x2000048c
 8008550:	20000006 	.word	0x20000006
 8008554:	200004ac 	.word	0x200004ac

08008558 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b087      	sub	sp, #28
 800855c:	af02      	add	r7, sp, #8
 800855e:	4604      	mov	r4, r0
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	4623      	mov	r3, r4
 8008568:	80fb      	strh	r3, [r7, #6]
 800856a:	4603      	mov	r3, r0
 800856c:	80bb      	strh	r3, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	807b      	strh	r3, [r7, #2]
 8008572:	4613      	mov	r3, r2
 8008574:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	73fb      	strb	r3, [r7, #15]
	width += x;
 800857a:	887a      	ldrh	r2, [r7, #2]
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	4413      	add	r3, r2
 8008580:	807b      	strh	r3, [r7, #2]
	height += y;
 8008582:	883a      	ldrh	r2, [r7, #0]
 8008584:	88bb      	ldrh	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800858a:	e025      	b.n	80085d8 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	887b      	ldrh	r3, [r7, #2]
 8008590:	429a      	cmp	r2, r3
 8008592:	d307      	bcc.n	80085a4 <LCD_ShowString+0x4c>
			x = x0;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	80fb      	strh	r3, [r7, #6]
			y += size;
 8008598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800859c:	b29a      	uxth	r2, r3
 800859e:	88bb      	ldrh	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80085a4:	88ba      	ldrh	r2, [r7, #4]
 80085a6:	883b      	ldrh	r3, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d21e      	bcs.n	80085ea <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	f897 4020 	ldrb.w	r4, [r7, #32]
 80085b4:	88b9      	ldrh	r1, [r7, #4]
 80085b6:	88f8      	ldrh	r0, [r7, #6]
 80085b8:	2300      	movs	r3, #0
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	4623      	mov	r3, r4
 80085be:	f7ff ff1d 	bl	80083fc <LCD_ShowChar>
		x += size / 2;
 80085c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085c6:	085b      	lsrs	r3, r3, #1
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	4413      	add	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
		p++;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	3301      	adds	r3, #1
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b7e      	cmp	r3, #126	; 0x7e
 80085de:	d805      	bhi.n	80085ec <LCD_ShowString+0x94>
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b1f      	cmp	r3, #31
 80085e6:	d8d1      	bhi.n	800858c <LCD_ShowString+0x34>
	}
}
 80085e8:	e000      	b.n	80085ec <LCD_ShowString+0x94>
			break;	//退出
 80085ea:	bf00      	nop
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd90      	pop	{r4, r7, pc}

080085f4 <det>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int det(int x1, int y1, int x2, int y2){
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
    return x1 * y2 - x2 * y1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	fb02 f203 	mul.w	r2, r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	1ad3      	subs	r3, r2, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr
	...

08008620 <isCollision>:

int isCollision(int x,int y,int i){
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b08d      	sub	sp, #52	; 0x34
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
    int fly_x = flys[i].x;
 800862c:	4a5a      	ldr	r2, [pc, #360]	; (8008798 <isCollision+0x178>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int fly_y = flys[i].y;
 800863e:	4a56      	ldr	r2, [pc, #344]	; (8008798 <isCollision+0x178>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	3304      	adds	r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28

    if (i == 0) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d119      	bne.n	800868c <isCollision+0x6c>
        if (x <= fly_x+4 && x >= fly_x-4 && y <= fly_y+4 && y >= fly_y-4) {
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	3304      	adds	r3, #4
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	429a      	cmp	r2, r3
 8008660:	f300 8094 	bgt.w	800878c <isCollision+0x16c>
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	3b04      	subs	r3, #4
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	429a      	cmp	r2, r3
 800866c:	f2c0 808e 	blt.w	800878c <isCollision+0x16c>
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	3304      	adds	r3, #4
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	429a      	cmp	r2, r3
 8008678:	f300 8088 	bgt.w	800878c <isCollision+0x16c>
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	3b04      	subs	r3, #4
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	f2c0 8082 	blt.w	800878c <isCollision+0x16c>
            return 1;
 8008688:	2301      	movs	r3, #1
 800868a:	e080      	b.n	800878e <isCollision+0x16e>
        }
    } else {
        int x1 = fly_x;
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
        int y1 = fly_y + (int) 79*0.2f;
 8008690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008692:	f7f8 fb21 	bl	8000cd8 <__aeabi_i2f>
 8008696:	4603      	mov	r3, r0
 8008698:	4940      	ldr	r1, [pc, #256]	; (800879c <isCollision+0x17c>)
 800869a:	4618      	mov	r0, r3
 800869c:	f7f8 fa68 	bl	8000b70 <__addsf3>
 80086a0:	4603      	mov	r3, r0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f8 fcbc 	bl	8001020 <__aeabi_f2iz>
 80086a8:	4603      	mov	r3, r0
 80086aa:	623b      	str	r3, [r7, #32]
        int x2 = fly_x - (int) 75*0.2f;
 80086ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ae:	f7f8 fb13 	bl	8000cd8 <__aeabi_i2f>
 80086b2:	4603      	mov	r3, r0
 80086b4:	493a      	ldr	r1, [pc, #232]	; (80087a0 <isCollision+0x180>)
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f8 fa58 	bl	8000b6c <__aeabi_fsub>
 80086bc:	4603      	mov	r3, r0
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f8 fcae 	bl	8001020 <__aeabi_f2iz>
 80086c4:	4603      	mov	r3, r0
 80086c6:	61fb      	str	r3, [r7, #28]
        int y2 = fly_y - (int) 46*0.2f;
 80086c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ca:	f7f8 fb05 	bl	8000cd8 <__aeabi_i2f>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4934      	ldr	r1, [pc, #208]	; (80087a4 <isCollision+0x184>)
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f8 fa4a 	bl	8000b6c <__aeabi_fsub>
 80086d8:	4603      	mov	r3, r0
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f8 fca0 	bl	8001020 <__aeabi_f2iz>
 80086e0:	4603      	mov	r3, r0
 80086e2:	61bb      	str	r3, [r7, #24]
        int x3 = fly_x + (int) 75*0.2f;
 80086e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e6:	f7f8 faf7 	bl	8000cd8 <__aeabi_i2f>
 80086ea:	4603      	mov	r3, r0
 80086ec:	492c      	ldr	r1, [pc, #176]	; (80087a0 <isCollision+0x180>)
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f8 fa3e 	bl	8000b70 <__addsf3>
 80086f4:	4603      	mov	r3, r0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f8 fc92 	bl	8001020 <__aeabi_f2iz>
 80086fc:	4603      	mov	r3, r0
 80086fe:	617b      	str	r3, [r7, #20]
        int y3 = fly_y - (int) 46*0.2f;
 8008700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008702:	f7f8 fae9 	bl	8000cd8 <__aeabi_i2f>
 8008706:	4603      	mov	r3, r0
 8008708:	4926      	ldr	r1, [pc, #152]	; (80087a4 <isCollision+0x184>)
 800870a:	4618      	mov	r0, r3
 800870c:	f7f8 fa2e 	bl	8000b6c <__aeabi_fsub>
 8008710:	4603      	mov	r3, r0
 8008712:	4618      	mov	r0, r3
 8008714:	f7f8 fc84 	bl	8001020 <__aeabi_f2iz>
 8008718:	4603      	mov	r3, r0
 800871a:	613b      	str	r3, [r7, #16]
        if (det(x - x1, y - y1, x2 - x1, y2 - y1) <= 0
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	1ad0      	subs	r0, r2, r3
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	1ad1      	subs	r1, r2, r3
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1ad4      	subs	r4, r2, r3
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	4622      	mov	r2, r4
 8008736:	f7ff ff5d 	bl	80085f4 <det>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	dc25      	bgt.n	800878c <isCollision+0x16c>
            && det(x - x2, y - y2, x3 - x2, y3 - y2) <= 0
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	1ad0      	subs	r0, r2, r3
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	1ad1      	subs	r1, r2, r3
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	1ad4      	subs	r4, r2, r3
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	4622      	mov	r2, r4
 800875a:	f7ff ff4b 	bl	80085f4 <det>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	dc13      	bgt.n	800878c <isCollision+0x16c>
            && det(x - x3, y - y3, x1 - x3, y1 - y3) <= 0) {
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	1ad0      	subs	r0, r2, r3
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	1ad1      	subs	r1, r2, r3
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	1ad4      	subs	r4, r2, r3
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	4622      	mov	r2, r4
 800877e:	f7ff ff39 	bl	80085f4 <det>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	dc01      	bgt.n	800878c <isCollision+0x16c>
            return 1;
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <isCollision+0x16e>
        }
    }

	return 0;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3734      	adds	r7, #52	; 0x34
 8008792:	46bd      	mov	sp, r7
 8008794:	bd90      	pop	{r4, r7, pc}
 8008796:	bf00      	nop
 8008798:	20001180 	.word	0x20001180
 800879c:	417ccccd 	.word	0x417ccccd
 80087a0:	41700000 	.word	0x41700000
 80087a4:	41133333 	.word	0x41133333

080087a8 <isOutOfRange>:
int isOutOfRange(int x,int y){
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
    int gap=2;
 80087b2:	2302      	movs	r3, #2
 80087b4:	60fb      	str	r3, [r7, #12]
    if(y>=SCREEN_HEIGHT-gap || y<=SCREEN_TOP+gap ||x<=gap||x>=SCREEN_WIDTH-gap){
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	429a      	cmp	r2, r3
 80087c0:	da0e      	bge.n	80087e0 <isOutOfRange+0x38>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	331e      	adds	r3, #30
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	dd09      	ble.n	80087e0 <isOutOfRange+0x38>
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	dd05      	ble.n	80087e0 <isOutOfRange+0x38>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	db01      	blt.n	80087e4 <isOutOfRange+0x3c>
        return 1;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <isOutOfRange+0x3e>
    }else{
        return 0;
 80087e4:	2300      	movs	r3, #0
    }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <changeBulletPos>:
int changeBulletPos(int i,int isHero){
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
        }
        if(enemy_bul[i].x>=SCREEN_WIDTH-gap){
            enemy_bul[i].x=gap;
        }
    }*/
}
 80087fa:	bf00      	nop
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr
	...

08008808 <changeFlyPos>:
int changeFlyPos(int i){
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
    int gap=10;
 8008810:	230a      	movs	r3, #10
 8008812:	60fb      	str	r3, [r7, #12]
    if(flys[i].x<=gap){
 8008814:	4a25      	ldr	r2, [pc, #148]	; (80088ac <changeFlyPos+0xa4>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	4413      	add	r3, r2
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	429a      	cmp	r2, r3
 8008828:	db08      	blt.n	800883c <changeFlyPos+0x34>
        flys[i].x=gap;
 800882a:	4a20      	ldr	r2, [pc, #128]	; (80088ac <changeFlyPos+0xa4>)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008832:	fb01 f303 	mul.w	r3, r1, r3
 8008836:	4413      	add	r3, r2
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]
    }
    if(flys[i].x>=SCREEN_WIDTH-gap){
 800883c:	4a1b      	ldr	r2, [pc, #108]	; (80088ac <changeFlyPos+0xa4>)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008844:	fb01 f303 	mul.w	r3, r1, r3
 8008848:	4413      	add	r3, r2
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8008852:	429a      	cmp	r2, r3
 8008854:	db0a      	blt.n	800886c <changeFlyPos+0x64>
        flys[i].x=SCREEN_WIDTH-gap;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f1c3 02f0 	rsb	r2, r3, #240	; 0xf0
 800885c:	4913      	ldr	r1, [pc, #76]	; (80088ac <changeFlyPos+0xa4>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8008864:	fb00 f303 	mul.w	r3, r0, r3
 8008868:	440b      	add	r3, r1
 800886a:	601a      	str	r2, [r3, #0]
    }
    if(flys[i].y<=SCREEN_TOP+gap){
 800886c:	4a0f      	ldr	r2, [pc, #60]	; (80088ac <changeFlyPos+0xa4>)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	4413      	add	r3, r2
 800887a:	3304      	adds	r3, #4
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	331e      	adds	r3, #30
 8008882:	429a      	cmp	r2, r3
 8008884:	dc0b      	bgt.n	800889e <changeFlyPos+0x96>
    	flys[i].y=SCREEN_TOP+gap;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 021e 	add.w	r2, r3, #30
 800888c:	4907      	ldr	r1, [pc, #28]	; (80088ac <changeFlyPos+0xa4>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8008894:	fb00 f303 	mul.w	r3, r0, r3
 8008898:	440b      	add	r3, r1
 800889a:	3304      	adds	r3, #4
 800889c:	601a      	str	r2, [r3, #0]
    }
}
 800889e:	bf00      	nop
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20001180 	.word	0x20001180

080088b0 <setHeroFire>:

void setHeroFire(){
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
	for(int i=0;i<flys[0].fire_num;i++){
 80088b6:	2300      	movs	r3, #0
 80088b8:	607b      	str	r3, [r7, #4]
 80088ba:	e016      	b.n	80088ea <setHeroFire+0x3a>
		flys[0].fires[i].enable=0;
 80088bc:	495d      	ldr	r1, [pc, #372]	; (8008a34 <setHeroFire+0x184>)
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	3330      	adds	r3, #48	; 0x30
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
		flys[0].fires[i].cnt=0;
 80088d0:	4958      	ldr	r1, [pc, #352]	; (8008a34 <setHeroFire+0x184>)
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	331c      	adds	r3, #28
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<flys[0].fire_num;i++){
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3301      	adds	r3, #1
 80088e8:	607b      	str	r3, [r7, #4]
 80088ea:	4b52      	ldr	r3, [pc, #328]	; (8008a34 <setHeroFire+0x184>)
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	dbe3      	blt.n	80088bc <setHeroFire+0xc>
	}
	if(hero.fire_state==0){
 80088f4:	4b50      	ldr	r3, [pc, #320]	; (8008a38 <setHeroFire+0x188>)
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <setHeroFire+0x5a>
		flys[0].fires[0].enable=1;
 80088fc:	4b4d      	ldr	r3, [pc, #308]	; (8008a34 <setHeroFire+0x184>)
 80088fe:	2201      	movs	r2, #1
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
		strcpy(hero.bul_name,"D");
 8008902:	4b4e      	ldr	r3, [pc, #312]	; (8008a3c <setHeroFire+0x18c>)
 8008904:	2244      	movs	r2, #68	; 0x44
 8008906:	801a      	strh	r2, [r3, #0]
			flys[0].fires[3].enable=1;
			flys[0].fires[4].enable=1;
			strcpy(hero.bul_name,"S1");
		}
	}
}
 8008908:	e08f      	b.n	8008a2a <setHeroFire+0x17a>
	}else if(hero.fire_state==1){
 800890a:	4b4b      	ldr	r3, [pc, #300]	; (8008a38 <setHeroFire+0x188>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	2b01      	cmp	r3, #1
 8008910:	d106      	bne.n	8008920 <setHeroFire+0x70>
		flys[0].fires[1].enable=1;
 8008912:	4b48      	ldr	r3, [pc, #288]	; (8008a34 <setHeroFire+0x184>)
 8008914:	2201      	movs	r2, #1
 8008916:	655a      	str	r2, [r3, #84]	; 0x54
		strcpy(hero.bul_name,"C");
 8008918:	4b48      	ldr	r3, [pc, #288]	; (8008a3c <setHeroFire+0x18c>)
 800891a:	2243      	movs	r2, #67	; 0x43
 800891c:	801a      	strh	r2, [r3, #0]
}
 800891e:	e084      	b.n	8008a2a <setHeroFire+0x17a>
	}else if(hero.fire_state==2){
 8008920:	4b45      	ldr	r3, [pc, #276]	; (8008a38 <setHeroFire+0x188>)
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	2b02      	cmp	r3, #2
 8008926:	d11c      	bne.n	8008962 <setHeroFire+0xb2>
		if(hero.fire_name[2]==1){
 8008928:	4b43      	ldr	r3, [pc, #268]	; (8008a38 <setHeroFire+0x188>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10b      	bne.n	8008948 <setHeroFire+0x98>
			flys[0].fires[2].enable=1;
 8008930:	4b40      	ldr	r3, [pc, #256]	; (8008a34 <setHeroFire+0x184>)
 8008932:	2201      	movs	r2, #1
 8008934:	679a      	str	r2, [r3, #120]	; 0x78
			strcpy(hero.bul_name,"B1");
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <setHeroFire+0x18c>)
 8008938:	4a41      	ldr	r2, [pc, #260]	; (8008a40 <setHeroFire+0x190>)
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	4611      	mov	r1, r2
 800893e:	8019      	strh	r1, [r3, #0]
 8008940:	3302      	adds	r3, #2
 8008942:	0c12      	lsrs	r2, r2, #16
 8008944:	701a      	strb	r2, [r3, #0]
}
 8008946:	e070      	b.n	8008a2a <setHeroFire+0x17a>
			flys[0].fires[6].enable=1;
 8008948:	4b3a      	ldr	r3, [pc, #232]	; (8008a34 <setHeroFire+0x184>)
 800894a:	2201      	movs	r2, #1
 800894c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			strcpy(hero.bul_name,"B2");
 8008950:	4b3a      	ldr	r3, [pc, #232]	; (8008a3c <setHeroFire+0x18c>)
 8008952:	4a3c      	ldr	r2, [pc, #240]	; (8008a44 <setHeroFire+0x194>)
 8008954:	6812      	ldr	r2, [r2, #0]
 8008956:	4611      	mov	r1, r2
 8008958:	8019      	strh	r1, [r3, #0]
 800895a:	3302      	adds	r3, #2
 800895c:	0c12      	lsrs	r2, r2, #16
 800895e:	701a      	strb	r2, [r3, #0]
}
 8008960:	e063      	b.n	8008a2a <setHeroFire+0x17a>
	}else if(hero.fire_state==3){
 8008962:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <setHeroFire+0x188>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	2b03      	cmp	r3, #3
 8008968:	d11f      	bne.n	80089aa <setHeroFire+0xfa>
		if(hero.fire_name[3]==1){
 800896a:	4b33      	ldr	r3, [pc, #204]	; (8008a38 <setHeroFire+0x188>)
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10e      	bne.n	8008990 <setHeroFire+0xe0>
			flys[0].fires[0].enable=1;
 8008972:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <setHeroFire+0x184>)
 8008974:	2201      	movs	r2, #1
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
			flys[0].fires[2].enable=1;
 8008978:	4b2e      	ldr	r3, [pc, #184]	; (8008a34 <setHeroFire+0x184>)
 800897a:	2201      	movs	r2, #1
 800897c:	679a      	str	r2, [r3, #120]	; 0x78
			strcpy(hero.bul_name,"A1");
 800897e:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <setHeroFire+0x18c>)
 8008980:	4a31      	ldr	r2, [pc, #196]	; (8008a48 <setHeroFire+0x198>)
 8008982:	6812      	ldr	r2, [r2, #0]
 8008984:	4611      	mov	r1, r2
 8008986:	8019      	strh	r1, [r3, #0]
 8008988:	3302      	adds	r3, #2
 800898a:	0c12      	lsrs	r2, r2, #16
 800898c:	701a      	strb	r2, [r3, #0]
}
 800898e:	e04c      	b.n	8008a2a <setHeroFire+0x17a>
			flys[0].fires[7].enable=1;
 8008990:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <setHeroFire+0x184>)
 8008992:	2201      	movs	r2, #1
 8008994:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			strcpy(hero.bul_name,"A2");
 8008998:	4b28      	ldr	r3, [pc, #160]	; (8008a3c <setHeroFire+0x18c>)
 800899a:	4a2c      	ldr	r2, [pc, #176]	; (8008a4c <setHeroFire+0x19c>)
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	4611      	mov	r1, r2
 80089a0:	8019      	strh	r1, [r3, #0]
 80089a2:	3302      	adds	r3, #2
 80089a4:	0c12      	lsrs	r2, r2, #16
 80089a6:	701a      	strb	r2, [r3, #0]
}
 80089a8:	e03f      	b.n	8008a2a <setHeroFire+0x17a>
	}else if(hero.fire_state==4){
 80089aa:	4b23      	ldr	r3, [pc, #140]	; (8008a38 <setHeroFire+0x188>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d13b      	bne.n	8008a2a <setHeroFire+0x17a>
		if(hero.fire_name[3]==1){
 80089b2:	4b21      	ldr	r3, [pc, #132]	; (8008a38 <setHeroFire+0x188>)
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d10c      	bne.n	80089d4 <setHeroFire+0x124>
			flys[0].fires[5].enable=1;
 80089ba:	4b1e      	ldr	r3, [pc, #120]	; (8008a34 <setHeroFire+0x184>)
 80089bc:	2201      	movs	r2, #1
 80089be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			strcpy(hero.bul_name,"S3");
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <setHeroFire+0x18c>)
 80089c4:	4a22      	ldr	r2, [pc, #136]	; (8008a50 <setHeroFire+0x1a0>)
 80089c6:	6812      	ldr	r2, [r2, #0]
 80089c8:	4611      	mov	r1, r2
 80089ca:	8019      	strh	r1, [r3, #0]
 80089cc:	3302      	adds	r3, #2
 80089ce:	0c12      	lsrs	r2, r2, #16
 80089d0:	701a      	strb	r2, [r3, #0]
}
 80089d2:	e02a      	b.n	8008a2a <setHeroFire+0x17a>
		}else if(hero.fire_name[3]==2){
 80089d4:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <setHeroFire+0x188>)
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d110      	bne.n	80089fe <setHeroFire+0x14e>
			flys[0].fires[4].enable=1;
 80089dc:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <setHeroFire+0x184>)
 80089de:	2201      	movs	r2, #1
 80089e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			flys[0].fires[7].enable=1;
 80089e4:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <setHeroFire+0x184>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			strcpy(hero.bul_name,"S2");
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <setHeroFire+0x18c>)
 80089ee:	4a19      	ldr	r2, [pc, #100]	; (8008a54 <setHeroFire+0x1a4>)
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	4611      	mov	r1, r2
 80089f4:	8019      	strh	r1, [r3, #0]
 80089f6:	3302      	adds	r3, #2
 80089f8:	0c12      	lsrs	r2, r2, #16
 80089fa:	701a      	strb	r2, [r3, #0]
}
 80089fc:	e015      	b.n	8008a2a <setHeroFire+0x17a>
			flys[0].fires[1].enable=1;
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <setHeroFire+0x184>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
			flys[0].fires[2].enable=1;
 8008a04:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <setHeroFire+0x184>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	679a      	str	r2, [r3, #120]	; 0x78
			flys[0].fires[3].enable=1;
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <setHeroFire+0x184>)
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			flys[0].fires[4].enable=1;
 8008a12:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <setHeroFire+0x184>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			strcpy(hero.bul_name,"S1");
 8008a1a:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <setHeroFire+0x18c>)
 8008a1c:	4a0e      	ldr	r2, [pc, #56]	; (8008a58 <setHeroFire+0x1a8>)
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	4611      	mov	r1, r2
 8008a22:	8019      	strh	r1, [r3, #0]
 8008a24:	3302      	adds	r3, #2
 8008a26:	0c12      	lsrs	r2, r2, #16
 8008a28:	701a      	strb	r2, [r3, #0]
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr
 8008a34:	20001180 	.word	0x20001180
 8008a38:	20003618 	.word	0x20003618
 8008a3c:	2000364c 	.word	0x2000364c
 8008a40:	0800e14c 	.word	0x0800e14c
 8008a44:	0800e150 	.word	0x0800e150
 8008a48:	0800e154 	.word	0x0800e154
 8008a4c:	0800e158 	.word	0x0800e158
 8008a50:	0800e15c 	.word	0x0800e15c
 8008a54:	0800e160 	.word	0x0800e160
 8008a58:	0800e164 	.word	0x0800e164

08008a5c <enemy_LED>:

void enemy_LED() {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8008a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a64:	4806      	ldr	r0, [pc, #24]	; (8008a80 <enemy_LED+0x24>)
 8008a66:	f7f8 fe2c 	bl	80016c2 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8008a6a:	200a      	movs	r0, #10
 8008a6c:	f7f8 fb60 	bl	8001130 <HAL_Delay>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8008a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <enemy_LED+0x24>)
 8008a76:	f7f8 fe24 	bl	80016c2 <HAL_GPIO_TogglePin>
}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40010800 	.word	0x40010800

08008a84 <hero_LED>:

void hero_LED() {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008a88:	2104      	movs	r1, #4
 8008a8a:	4806      	ldr	r0, [pc, #24]	; (8008aa4 <hero_LED+0x20>)
 8008a8c:	f7f8 fe19 	bl	80016c2 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8008a90:	200a      	movs	r0, #10
 8008a92:	f7f8 fb4d 	bl	8001130 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008a96:	2104      	movs	r1, #4
 8008a98:	4802      	ldr	r0, [pc, #8]	; (8008aa4 <hero_LED+0x20>)
 8008a9a:	f7f8 fe12 	bl	80016c2 <HAL_GPIO_TogglePin>
}
 8008a9e:	bf00      	nop
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40011400 	.word	0x40011400

08008aa8 <estimate>:



//cal all bullet whether collision or out of screen
void estimate(){
 8008aa8:	b5b0      	push	{r4, r5, r7, lr}
 8008aaa:	f5ad 4da8 	sub.w	sp, sp, #21504	; 0x5400
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af02      	add	r7, sp, #8
    int flag1[MAX_BULLET_ENEMY];
    Bullet copy2[MAX_BULLET_HERO];
    int flag2[MAX_BULLET_ENEMY];
    Fly copy3[MAX_FLY];
    int flag3[MAX_FLY];
    int num1=0,num2=0,num3=0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008ab8:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008ac4:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008ad0:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8008ad4:	6013      	str	r3, [r2, #0]
    for(int i=0;i<bul_num_e;i++){
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008adc:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	e0b7      	b.n	8008c54 <estimate+0x1ac>
        flag1[i]=1;
 8008ae4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8008ae8:	f103 0320 	add.w	r3, r3, #32
 8008aec:	3b0c      	subs	r3, #12
 8008aee:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008af2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	2101      	movs	r1, #1
 8008afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        copy1[i]=enemy_bul[i];
 8008afe:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 8008b02:	f103 0320 	add.w	r3, r3, #32
 8008b06:	3b1c      	subs	r3, #28
 8008b08:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008b0c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	0152      	lsls	r2, r2, #5
 8008b14:	1899      	adds	r1, r3, r2
 8008b16:	4abf      	ldr	r2, [pc, #764]	; (8008e14 <estimate+0x36c>)
 8008b18:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b1c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	015b      	lsls	r3, r3, #5
 8008b24:	4413      	add	r3, r2
 8008b26:	460c      	mov	r4, r1
 8008b28:	461d      	mov	r5, r3
 8008b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int x=enemy_bul[i].x;
 8008b36:	4ab7      	ldr	r2, [pc, #732]	; (8008e14 <estimate+0x36c>)
 8008b38:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	015b      	lsls	r3, r3, #5
 8008b44:	4413      	add	r3, r2
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008b4c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8008b50:	6013      	str	r3, [r2, #0]
        int y=enemy_bul[i].y;
 8008b52:	4ab0      	ldr	r2, [pc, #704]	; (8008e14 <estimate+0x36c>)
 8008b54:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b58:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	015b      	lsls	r3, r3, #5
 8008b60:	4413      	add	r3, r2
 8008b62:	3304      	adds	r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008b6a:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8008b6e:	6013      	str	r3, [r2, #0]
        if(isCollision(x,y,0)){
 8008b70:	2200      	movs	r2, #0
 8008b72:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b76:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8008b7a:	6819      	ldr	r1, [r3, #0]
 8008b7c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b80:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	f7ff fd4b 	bl	8008620 <isCollision>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d03a      	beq.n	8008c06 <estimate+0x15e>
        	hero_LED();
 8008b90:	f7ff ff78 	bl	8008a84 <hero_LED>
        	if(enemy_bul[i].power==0)myhp-=1;
 8008b94:	4a9f      	ldr	r2, [pc, #636]	; (8008e14 <estimate+0x36c>)
 8008b96:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008b9a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	015b      	lsls	r3, r3, #5
 8008ba2:	4413      	add	r3, r2
 8008ba4:	3310      	adds	r3, #16
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <estimate+0x110>
 8008bac:	4b9a      	ldr	r3, [pc, #616]	; (8008e18 <estimate+0x370>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4a99      	ldr	r2, [pc, #612]	; (8008e18 <estimate+0x370>)
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e00e      	b.n	8008bd6 <estimate+0x12e>
        	else myhp-=enemy_bul[i].power;
 8008bb8:	4b97      	ldr	r3, [pc, #604]	; (8008e18 <estimate+0x370>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4995      	ldr	r1, [pc, #596]	; (8008e14 <estimate+0x36c>)
 8008bbe:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008bc2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	015b      	lsls	r3, r3, #5
 8008bca:	440b      	add	r3, r1
 8008bcc:	3310      	adds	r3, #16
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	4a91      	ldr	r2, [pc, #580]	; (8008e18 <estimate+0x370>)
 8008bd4:	6013      	str	r3, [r2, #0]
            key_a=0; key_b=0; key_c=0;
 8008bd6:	4b91      	ldr	r3, [pc, #580]	; (8008e1c <estimate+0x374>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	4b90      	ldr	r3, [pc, #576]	; (8008e20 <estimate+0x378>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	4b90      	ldr	r3, [pc, #576]	; (8008e24 <estimate+0x37c>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
            flag1[i]=0;
 8008be8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8008bec:	f103 0320 	add.w	r3, r3, #32
 8008bf0:	3b0c      	subs	r3, #12
 8008bf2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008bf6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008bfa:	6812      	ldr	r2, [r2, #0]
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            updateInfo();
 8008c02:	f002 fe2d 	bl	800b860 <updateInfo>
        }
        if(isOutOfRange(x,y)){
 8008c06:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008c0a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008c14:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff fdc5 	bl	80087a8 <isOutOfRange>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00c      	beq.n	8008c3e <estimate+0x196>
            flag1[i]=0;
 8008c24:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8008c28:	f103 0320 	add.w	r3, r3, #32
 8008c2c:	3b0c      	subs	r3, #12
 8008c2e:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c32:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i=0;i<bul_num_e;i++){
 8008c3e:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008c42:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c4e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	4b74      	ldr	r3, [pc, #464]	; (8008e28 <estimate+0x380>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c5c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8008c60:	6812      	ldr	r2, [r2, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	f6ff af3e 	blt.w	8008ae4 <estimate+0x3c>
        }
    }
    for(int i=0;i<bul_num_h;i++){
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c6e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	e0bd      	b.n	8008df2 <estimate+0x34a>
        flag2[i]=1;
 8008c76:	f507 5314 	add.w	r3, r7, #9472	; 0x2500
 8008c7a:	3b1c      	subs	r3, #28
 8008c7c:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c80:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008c84:	6812      	ldr	r2, [r2, #0]
 8008c86:	2101      	movs	r1, #1
 8008c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        copy2[i]=hero_bul[i];
 8008c8c:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8008c90:	3b2c      	subs	r3, #44	; 0x2c
 8008c92:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008c96:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	0152      	lsls	r2, r2, #5
 8008c9e:	1899      	adds	r1, r3, r2
 8008ca0:	4a62      	ldr	r2, [pc, #392]	; (8008e2c <estimate+0x384>)
 8008ca2:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008ca6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	015b      	lsls	r3, r3, #5
 8008cae:	4413      	add	r3, r2
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int x=hero_bul[i].x;
 8008cc0:	4a5a      	ldr	r2, [pc, #360]	; (8008e2c <estimate+0x384>)
 8008cc2:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008cc6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	015b      	lsls	r3, r3, #5
 8008cce:	4413      	add	r3, r2
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008cd6:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8008cda:	6013      	str	r3, [r2, #0]
        int y=hero_bul[i].y;
 8008cdc:	4a53      	ldr	r2, [pc, #332]	; (8008e2c <estimate+0x384>)
 8008cde:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008ce2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	015b      	lsls	r3, r3, #5
 8008cea:	4413      	add	r3, r2
 8008cec:	3304      	adds	r3, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008cf4:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8008cf8:	6013      	str	r3, [r2, #0]
        for(int j=1;j<fly_num;j++){
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008d00:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	e046      	b.n	8008d96 <estimate+0x2ee>
            if(isCollision(x,y,j)){
 8008d08:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d0c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d16:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8008d1a:	6819      	ldr	r1, [r3, #0]
 8008d1c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d20:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f7ff fc7b 	bl	8008620 <isCollision>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d027      	beq.n	8008d80 <estimate+0x2d8>
            	enemy_LED();
 8008d30:	f7ff fe94 	bl	8008a5c <enemy_LED>
                flys[j].hp-=1;
 8008d34:	4a3e      	ldr	r2, [pc, #248]	; (8008e30 <estimate+0x388>)
 8008d36:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d3a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	4413      	add	r3, r2
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	4937      	ldr	r1, [pc, #220]	; (8008e30 <estimate+0x388>)
 8008d52:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d56:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8008d60:	fb00 f303 	mul.w	r3, r0, r3
 8008d64:	440b      	add	r3, r1
 8008d66:	3308      	adds	r3, #8
 8008d68:	601a      	str	r2, [r3, #0]
                flag2[i]=0;
 8008d6a:	f507 5314 	add.w	r3, r7, #9472	; 0x2500
 8008d6e:	3b1c      	subs	r3, #28
 8008d70:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008d74:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int j=1;j<fly_num;j++){
 8008d80:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008d84:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008d90:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <estimate+0x38c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008d9e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	dbaf      	blt.n	8008d08 <estimate+0x260>
            }
        }
        if(isOutOfRange(x,y)){
 8008da8:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008dac:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8008db0:	6819      	ldr	r1, [r3, #0]
 8008db2:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008db6:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	f7ff fcf4 	bl	80087a8 <isOutOfRange>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <estimate+0x334>
            flag2[i]=0;
 8008dc6:	f507 5314 	add.w	r3, r7, #9472	; 0x2500
 8008dca:	3b1c      	subs	r3, #28
 8008dcc:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008dd0:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008dd4:	6812      	ldr	r2, [r2, #0]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i=0;i<bul_num_h;i++){
 8008ddc:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008de0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3301      	adds	r3, #1
 8008de8:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008dec:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <estimate+0x390>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008dfa:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	f6ff af38 	blt.w	8008c76 <estimate+0x1ce>
        }
    }
    for(int i=1;i<fly_num;i++){
 8008e06:	2301      	movs	r3, #1
 8008e08:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008e0c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	e190      	b.n	8009136 <estimate+0x68e>
 8008e14:	2000383c 	.word	0x2000383c
 8008e18:	2000117c 	.word	0x2000117c
 8008e1c:	20000490 	.word	0x20000490
 8008e20:	20000494 	.word	0x20000494
 8008e24:	20000498 	.word	0x20000498
 8008e28:	20003660 	.word	0x20003660
 8008e2c:	200004c0 	.word	0x200004c0
 8008e30:	20001180 	.word	0x20001180
 8008e34:	20003658 	.word	0x20003658
 8008e38:	200053bc 	.word	0x200053bc
        flag3[i]=1;
 8008e3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e40:	3b7c      	subs	r3, #124	; 0x7c
 8008e42:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008e46:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        copy3[i]=flys[i];
 8008e52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e56:	3b2c      	subs	r3, #44	; 0x2c
 8008e58:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008e5c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008e66:	fb01 f202 	mul.w	r2, r1, r2
 8008e6a:	1898      	adds	r0, r3, r2
 8008e6c:	4aba      	ldr	r2, [pc, #744]	; (8009158 <estimate+0x6b0>)
 8008e6e:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008e72:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	4619      	mov	r1, r3
 8008e84:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f003 fcad 	bl	800c7e8 <memcpy>
        if(flys[i].hp<=0){
 8008e8e:	4ab2      	ldr	r2, [pc, #712]	; (8009158 <estimate+0x6b0>)
 8008e90:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008e94:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f300 810f 	bgt.w	80090cc <estimate+0x624>
        	enemy_LED();
 8008eae:	f7ff fdd5 	bl	8008a5c <enemy_LED>
            flag3[i]=0;
 8008eb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008eb6:	3b7c      	subs	r3, #124	; 0x7c
 8008eb8:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008ebc:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8008ec0:	6812      	ldr	r2, [r2, #0]
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            level_flag=0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008ece:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8008ed2:	6013      	str	r3, [r2, #0]
            srand(HAL_GetTick());
 8008ed4:	f7f8 f922 	bl	800111c <HAL_GetTick>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f003 fc98 	bl	800c810 <srand>
            if(score<=2 && score+flys[i].score>2){
 8008ee0:	4b9e      	ldr	r3, [pc, #632]	; (800915c <estimate+0x6b4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	dc21      	bgt.n	8008f2c <estimate+0x484>
 8008ee8:	4a9b      	ldr	r2, [pc, #620]	; (8009158 <estimate+0x6b0>)
 8008eea:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008eee:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	4b95      	ldr	r3, [pc, #596]	; (800915c <estimate+0x6b4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4413      	add	r3, r2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	dd0e      	ble.n	8008f2c <estimate+0x484>
            	hero.fire_level=2;
 8008f0e:	4b94      	ldr	r3, [pc, #592]	; (8009160 <estimate+0x6b8>)
 8008f10:	2202      	movs	r2, #2
 8008f12:	601a      	str	r2, [r3, #0]
            	myhp+=5;
 8008f14:	4b93      	ldr	r3, [pc, #588]	; (8009164 <estimate+0x6bc>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3305      	adds	r3, #5
 8008f1a:	4a92      	ldr	r2, [pc, #584]	; (8009164 <estimate+0x6bc>)
 8008f1c:	6013      	str	r3, [r2, #0]
            	level_flag=1;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008f24:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e092      	b.n	8009052 <estimate+0x5aa>
            }else if(score<=7 && score+flys[i].score>7){
 8008f2c:	4b8b      	ldr	r3, [pc, #556]	; (800915c <estimate+0x6b4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b07      	cmp	r3, #7
 8008f32:	dc2b      	bgt.n	8008f8c <estimate+0x4e4>
 8008f34:	4a88      	ldr	r2, [pc, #544]	; (8009158 <estimate+0x6b0>)
 8008f36:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008f3a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	4b82      	ldr	r3, [pc, #520]	; (800915c <estimate+0x6b4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	dd18      	ble.n	8008f8c <estimate+0x4e4>
            	hero.fire_level=3;
 8008f5a:	4b81      	ldr	r3, [pc, #516]	; (8009160 <estimate+0x6b8>)
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	601a      	str	r2, [r3, #0]
            	hero.fire_name[2]=rand()%2;
 8008f60:	f003 fc7a 	bl	800c858 <rand>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	bfb8      	it	lt
 8008f6e:	425b      	neglt	r3, r3
 8008f70:	4a7b      	ldr	r2, [pc, #492]	; (8009160 <estimate+0x6b8>)
 8008f72:	6113      	str	r3, [r2, #16]
            	myhp+=5;
 8008f74:	4b7b      	ldr	r3, [pc, #492]	; (8009164 <estimate+0x6bc>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3305      	adds	r3, #5
 8008f7a:	4a7a      	ldr	r2, [pc, #488]	; (8009164 <estimate+0x6bc>)
 8008f7c:	6013      	str	r3, [r2, #0]
            	level_flag=1;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008f84:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	e062      	b.n	8009052 <estimate+0x5aa>

            }else if(score<=25 && score+flys[i].score>25){
 8008f8c:	4b73      	ldr	r3, [pc, #460]	; (800915c <estimate+0x6b4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b19      	cmp	r3, #25
 8008f92:	dc2b      	bgt.n	8008fec <estimate+0x544>
 8008f94:	4a70      	ldr	r2, [pc, #448]	; (8009158 <estimate+0x6b0>)
 8008f96:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008f9a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	4b6a      	ldr	r3, [pc, #424]	; (800915c <estimate+0x6b4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	2b19      	cmp	r3, #25
 8008fb8:	dd18      	ble.n	8008fec <estimate+0x544>
            	hero.fire_level=4;
 8008fba:	4b69      	ldr	r3, [pc, #420]	; (8009160 <estimate+0x6b8>)
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	601a      	str	r2, [r3, #0]
            	hero.fire_name[3]=rand()%2;
 8008fc0:	f003 fc4a 	bl	800c858 <rand>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	bfb8      	it	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	4a63      	ldr	r2, [pc, #396]	; (8009160 <estimate+0x6b8>)
 8008fd2:	6153      	str	r3, [r2, #20]
            	myhp+=5;
 8008fd4:	4b63      	ldr	r3, [pc, #396]	; (8009164 <estimate+0x6bc>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3305      	adds	r3, #5
 8008fda:	4a62      	ldr	r2, [pc, #392]	; (8009164 <estimate+0x6bc>)
 8008fdc:	6013      	str	r3, [r2, #0]
            	level_flag=1;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8008fe4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e032      	b.n	8009052 <estimate+0x5aa>
            }else if(score<=80 && score+flys[i].score>80){
 8008fec:	4b5b      	ldr	r3, [pc, #364]	; (800915c <estimate+0x6b4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b50      	cmp	r3, #80	; 0x50
 8008ff2:	dc2e      	bgt.n	8009052 <estimate+0x5aa>
 8008ff4:	4a58      	ldr	r2, [pc, #352]	; (8009158 <estimate+0x6b0>)
 8008ff6:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8008ffa:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009004:	fb01 f303 	mul.w	r3, r1, r3
 8009008:	4413      	add	r3, r2
 800900a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4b52      	ldr	r3, [pc, #328]	; (800915c <estimate+0x6b4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4413      	add	r3, r2
 8009016:	2b50      	cmp	r3, #80	; 0x50
 8009018:	dd1b      	ble.n	8009052 <estimate+0x5aa>
            	hero.fire_level=5;
 800901a:	4b51      	ldr	r3, [pc, #324]	; (8009160 <estimate+0x6b8>)
 800901c:	2205      	movs	r2, #5
 800901e:	601a      	str	r2, [r3, #0]
            	hero.fire_name[4]=rand()%3;
 8009020:	f003 fc1a 	bl	800c858 <rand>
 8009024:	4601      	mov	r1, r0
 8009026:	4b50      	ldr	r3, [pc, #320]	; (8009168 <estimate+0x6c0>)
 8009028:	fb83 3201 	smull	r3, r2, r3, r1
 800902c:	17cb      	asrs	r3, r1, #31
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	4613      	mov	r3, r2
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4413      	add	r3, r2
 8009036:	1aca      	subs	r2, r1, r3
 8009038:	4b49      	ldr	r3, [pc, #292]	; (8009160 <estimate+0x6b8>)
 800903a:	619a      	str	r2, [r3, #24]
            	myhp+=5;
 800903c:	4b49      	ldr	r3, [pc, #292]	; (8009164 <estimate+0x6bc>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3305      	adds	r3, #5
 8009042:	4a48      	ldr	r2, [pc, #288]	; (8009164 <estimate+0x6bc>)
 8009044:	6013      	str	r3, [r2, #0]
            	level_flag=1;
 8009046:	2301      	movs	r3, #1
 8009048:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800904c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009050:	6013      	str	r3, [r2, #0]

            }

            score+=flys[i].score;
 8009052:	4a41      	ldr	r2, [pc, #260]	; (8009158 <estimate+0x6b0>)
 8009054:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009058:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4b3b      	ldr	r3, [pc, #236]	; (800915c <estimate+0x6b4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4413      	add	r3, r2
 8009074:	4a39      	ldr	r2, [pc, #228]	; (800915c <estimate+0x6b4>)
 8009076:	6013      	str	r3, [r2, #0]
            updateInfo();
 8009078:	f002 fbf2 	bl	800b860 <updateInfo>
            if(level_flag){
 800907c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009080:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d020      	beq.n	80090cc <estimate+0x624>
            	hero.fire_state=hero.fire_level-1;
 800908a:	4b35      	ldr	r3, [pc, #212]	; (8009160 <estimate+0x6b8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3b01      	subs	r3, #1
 8009090:	4a33      	ldr	r2, [pc, #204]	; (8009160 <estimate+0x6b8>)
 8009092:	6313      	str	r3, [r2, #48]	; 0x30
            	setHeroFire();
 8009094:	f7ff fc0c 	bl	80088b0 <setHeroFire>
            	sprintf(msg,"Level Up!Get%s,Hp+5",hero.bul_name);
 8009098:	4a34      	ldr	r2, [pc, #208]	; (800916c <estimate+0x6c4>)
 800909a:	4935      	ldr	r1, [pc, #212]	; (8009170 <estimate+0x6c8>)
 800909c:	4835      	ldr	r0, [pc, #212]	; (8009174 <estimate+0x6cc>)
 800909e:	f003 fc0f 	bl	800c8c0 <siprintf>
            	LCD_ShowString(20,160, 220, 200, 24, (uint8_t*)msg);
 80090a2:	4b34      	ldr	r3, [pc, #208]	; (8009174 <estimate+0x6cc>)
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	2318      	movs	r3, #24
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	23c8      	movs	r3, #200	; 0xc8
 80090ac:	22dc      	movs	r2, #220	; 0xdc
 80090ae:	21a0      	movs	r1, #160	; 0xa0
 80090b0:	2014      	movs	r0, #20
 80090b2:	f7ff fa51 	bl	8008558 <LCD_ShowString>
            	HAL_Delay(1000);
 80090b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090ba:	f7f8 f839 	bl	8001130 <HAL_Delay>
            	LCD_Clear(bg_color);
 80090be:	4b2e      	ldr	r3, [pc, #184]	; (8009178 <estimate+0x6d0>)
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe ff7e 	bl	8007fc4 <LCD_Clear>
                updateInfo();
 80090c8:	f002 fbca 	bl	800b860 <updateInfo>
            }
        }
        if(isOutOfRange(flys[i].x,flys[i].y)){
 80090cc:	4a22      	ldr	r2, [pc, #136]	; (8009158 <estimate+0x6b0>)
 80090ce:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80090d2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	4a1c      	ldr	r2, [pc, #112]	; (8009158 <estimate+0x6b0>)
 80090e6:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80090ea:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	4413      	add	r3, r2
 80090fa:	3304      	adds	r3, #4
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4619      	mov	r1, r3
 8009100:	f7ff fb52 	bl	80087a8 <isOutOfRange>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <estimate+0x678>
            flag3[i]=0;
 800910a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800910e:	3b7c      	subs	r3, #124	; 0x7c
 8009110:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8009114:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	2100      	movs	r1, #0
 800911c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i=1;i<fly_num;i++){
 8009120:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009124:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8009130:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <estimate+0x6d4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800913e:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	f6ff ae79 	blt.w	8008e3c <estimate+0x394>
        }
    }
    for(int i=0;i<bul_num_e;i++){
 800914a:	2300      	movs	r3, #0
 800914c:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8009150:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	e04e      	b.n	80091f6 <estimate+0x74e>
 8009158:	20001180 	.word	0x20001180
 800915c:	20003654 	.word	0x20003654
 8009160:	20003618 	.word	0x20003618
 8009164:	2000117c 	.word	0x2000117c
 8009168:	55555556 	.word	0x55555556
 800916c:	2000364c 	.word	0x2000364c
 8009170:	0800e168 	.word	0x0800e168
 8009174:	2000115c 	.word	0x2000115c
 8009178:	200004bc 	.word	0x200004bc
 800917c:	20003658 	.word	0x20003658
        if(flag1[i])enemy_bul[num1++]=copy1[i];
 8009180:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009184:	f103 0320 	add.w	r3, r3, #32
 8009188:	3b0c      	subs	r3, #12
 800918a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800918e:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d021      	beq.n	80091e0 <estimate+0x738>
 800919c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80091a0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 80091ac:	f101 0178 	add.w	r1, r1, #120	; 0x78
 80091b0:	600a      	str	r2, [r1, #0]
 80091b2:	4a6e      	ldr	r2, [pc, #440]	; (800936c <estimate+0x8c4>)
 80091b4:	015b      	lsls	r3, r3, #5
 80091b6:	18d1      	adds	r1, r2, r3
 80091b8:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80091bc:	f103 0320 	add.w	r3, r3, #32
 80091c0:	3b1c      	subs	r3, #28
 80091c2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80091c6:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	0152      	lsls	r2, r2, #5
 80091ce:	4413      	add	r3, r2
 80091d0:	460c      	mov	r4, r1
 80091d2:	461d      	mov	r5, r3
 80091d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80091dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i=0;i<bul_num_e;i++){
 80091e0:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80091e4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80091f0:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4b5e      	ldr	r3, [pc, #376]	; (8009370 <estimate+0x8c8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80091fe:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	dbbb      	blt.n	8009180 <estimate+0x6d8>
    }
    bul_num_e=num1;
 8009208:	4a59      	ldr	r2, [pc, #356]	; (8009370 <estimate+0x8c8>)
 800920a:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 800920e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6013      	str	r3, [r2, #0]
    for(int i=0;i<bul_num_h;i++){
 8009216:	2300      	movs	r3, #0
 8009218:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800921c:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e036      	b.n	8009292 <estimate+0x7ea>
        if(flag2[i])hero_bul[num2++]=copy2[i];
 8009224:	f507 5314 	add.w	r3, r7, #9472	; 0x2500
 8009228:	3b1c      	subs	r3, #28
 800922a:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800922e:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01f      	beq.n	800927c <estimate+0x7d4>
 800923c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009240:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 800924c:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8009250:	600a      	str	r2, [r1, #0]
 8009252:	4a48      	ldr	r2, [pc, #288]	; (8009374 <estimate+0x8cc>)
 8009254:	015b      	lsls	r3, r3, #5
 8009256:	18d1      	adds	r1, r2, r3
 8009258:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800925c:	3b2c      	subs	r3, #44	; 0x2c
 800925e:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8009262:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	0152      	lsls	r2, r2, #5
 800926a:	4413      	add	r3, r2
 800926c:	460c      	mov	r4, r1
 800926e:	461d      	mov	r5, r3
 8009270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i=0;i<bul_num_h;i++){
 800927c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009280:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800928c:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	4b39      	ldr	r3, [pc, #228]	; (8009378 <estimate+0x8d0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800929a:	f102 0258 	add.w	r2, r2, #88	; 0x58
 800929e:	6812      	ldr	r2, [r2, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	dbbf      	blt.n	8009224 <estimate+0x77c>
    }
    bul_num_h=num2;
 80092a4:	4a34      	ldr	r2, [pc, #208]	; (8009378 <estimate+0x8d0>)
 80092a6:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80092aa:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6013      	str	r3, [r2, #0]
    num3=1;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80092b8:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80092bc:	6013      	str	r3, [r2, #0]
    for(int i=1;i<fly_num;i++){
 80092be:	2301      	movs	r3, #1
 80092c0:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80092c4:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	e03a      	b.n	8009342 <estimate+0x89a>
        if(flag3[i])flys[num3++]=copy3[i];
 80092cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80092d0:	3b7c      	subs	r3, #124	; 0x7c
 80092d2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80092d6:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d023      	beq.n	800932c <estimate+0x884>
 80092e4:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80092e8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 80092f4:	f101 0170 	add.w	r1, r1, #112	; 0x70
 80092f8:	600a      	str	r2, [r1, #0]
 80092fa:	4a20      	ldr	r2, [pc, #128]	; (800937c <estimate+0x8d4>)
 80092fc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	18d0      	adds	r0, r2, r3
 8009306:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800930a:	3b2c      	subs	r3, #44	; 0x2c
 800930c:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8009310:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800931a:	fb01 f202 	mul.w	r2, r1, r2
 800931e:	4413      	add	r3, r2
 8009320:	4619      	mov	r1, r3
 8009322:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8009326:	461a      	mov	r2, r3
 8009328:	f003 fa5e 	bl	800c7e8 <memcpy>
    for(int i=1;i<fly_num;i++){
 800932c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8009330:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800933c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <estimate+0x8d8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800934a:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800934e:	6812      	ldr	r2, [r2, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	dbbb      	blt.n	80092cc <estimate+0x824>
    }
    fly_num=num3;
 8009354:	4a0a      	ldr	r2, [pc, #40]	; (8009380 <estimate+0x8d8>)
 8009356:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 800935a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6013      	str	r3, [r2, #0]
}
 8009362:	bf00      	nop
 8009364:	f507 47a8 	add.w	r7, r7, #21504	; 0x5400
 8009368:	46bd      	mov	sp, r7
 800936a:	bdb0      	pop	{r4, r5, r7, pc}
 800936c:	2000383c 	.word	0x2000383c
 8009370:	20003660 	.word	0x20003660
 8009374:	200004c0 	.word	0x200004c0
 8009378:	200053bc 	.word	0x200053bc
 800937c:	20001180 	.word	0x20001180
 8009380:	20003658 	.word	0x20003658

08009384 <move>:
//move all bullet
void move(int move_state){
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
    if(move_state==1){
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d107      	bne.n	80093a2 <move+0x1e>
        flys[0].x+=flys[0].vx;
 8009392:	4b2c      	ldr	r3, [pc, #176]	; (8009444 <move+0xc0>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b2b      	ldr	r3, [pc, #172]	; (8009444 <move+0xc0>)
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	4413      	add	r3, r2
 800939c:	4a29      	ldr	r2, [pc, #164]	; (8009444 <move+0xc0>)
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e009      	b.n	80093b6 <move+0x32>
    }else if(move_state==2){
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d106      	bne.n	80093b6 <move+0x32>
        flys[0].x+=flys[0].vx;
 80093a8:	4b26      	ldr	r3, [pc, #152]	; (8009444 <move+0xc0>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	4b25      	ldr	r3, [pc, #148]	; (8009444 <move+0xc0>)
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	4a24      	ldr	r2, [pc, #144]	; (8009444 <move+0xc0>)
 80093b4:	6013      	str	r3, [r2, #0]
    }
    for(int i=1;i<fly_num;i++){
 80093b6:	2301      	movs	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	e005      	b.n	80093c8 <move+0x44>
    	move_fly(i);
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f000 f997 	bl	80096f0 <move_fly>
    for(int i=1;i<fly_num;i++){
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	3301      	adds	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	4b1f      	ldr	r3, [pc, #124]	; (8009448 <move+0xc4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	dbf4      	blt.n	80093bc <move+0x38>
    }
    for(int i=0;i<fly_num;i++){
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	e005      	b.n	80093e4 <move+0x60>
        changeFlyPos(i);
 80093d8:	6938      	ldr	r0, [r7, #16]
 80093da:	f7ff fa15 	bl	8008808 <changeFlyPos>
    for(int i=0;i<fly_num;i++){
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	3301      	adds	r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <move+0xc4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	dbf4      	blt.n	80093d8 <move+0x54>
    }
    for(int i=0;i<bul_num_e;i++){
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e00a      	b.n	800940a <move+0x86>
        bullet_move(i,0);
 80093f4:	2100      	movs	r1, #0
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f82e 	bl	8009458 <bullet_move>
        changeBulletPos(i,0);
 80093fc:	2100      	movs	r1, #0
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7ff f9f6 	bl	80087f0 <changeBulletPos>
    for(int i=0;i<bul_num_e;i++){
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <move+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	429a      	cmp	r2, r3
 8009412:	dbef      	blt.n	80093f4 <move+0x70>
    }
    for(int i=0;i<bul_num_h;i++){
 8009414:	2300      	movs	r3, #0
 8009416:	60bb      	str	r3, [r7, #8]
 8009418:	e00a      	b.n	8009430 <move+0xac>
        bullet_move(i,1);
 800941a:	2101      	movs	r1, #1
 800941c:	68b8      	ldr	r0, [r7, #8]
 800941e:	f000 f81b 	bl	8009458 <bullet_move>
        changeBulletPos(i,1);
 8009422:	2101      	movs	r1, #1
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f7ff f9e3 	bl	80087f0 <changeBulletPos>
    for(int i=0;i<bul_num_h;i++){
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	3301      	adds	r3, #1
 800942e:	60bb      	str	r3, [r7, #8]
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <move+0xcc>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	429a      	cmp	r2, r3
 8009438:	dbef      	blt.n	800941a <move+0x96>
    }
}
 800943a:	bf00      	nop
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20001180 	.word	0x20001180
 8009448:	20003658 	.word	0x20003658
 800944c:	20003660 	.word	0x20003660
 8009450:	200053bc 	.word	0x200053bc
 8009454:	00000000 	.word	0x00000000

08009458 <bullet_move>:
void bullet_move(int i,int isHero){
 8009458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800945c:	b08a      	sub	sp, #40	; 0x28
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
    int type;
    int cnt,dx=0,dy=0,dir_y;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
    int dir_x=1;
 800946c:	2301      	movs	r3, #1
 800946e:	613b      	str	r3, [r7, #16]
    if(isHero){
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d02c      	beq.n	80094d0 <bullet_move+0x78>
        cnt=hero_bul[i].cnt;
 8009476:	4a98      	ldr	r2, [pc, #608]	; (80096d8 <bullet_move+0x280>)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	015b      	lsls	r3, r3, #5
 800947c:	4413      	add	r3, r2
 800947e:	3314      	adds	r3, #20
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	623b      	str	r3, [r7, #32]
        type=hero_bul[i].type;
 8009484:	4a94      	ldr	r2, [pc, #592]	; (80096d8 <bullet_move+0x280>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	015b      	lsls	r3, r3, #5
 800948a:	4413      	add	r3, r2
 800948c:	3318      	adds	r3, #24
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
        dir_y=-1;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295
 8009496:	617b      	str	r3, [r7, #20]
        hero_bul[i].cnt++;
 8009498:	4a8f      	ldr	r2, [pc, #572]	; (80096d8 <bullet_move+0x280>)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	015b      	lsls	r3, r3, #5
 800949e:	4413      	add	r3, r2
 80094a0:	3314      	adds	r3, #20
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	498c      	ldr	r1, [pc, #560]	; (80096d8 <bullet_move+0x280>)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	015b      	lsls	r3, r3, #5
 80094ac:	440b      	add	r3, r1
 80094ae:	3314      	adds	r3, #20
 80094b0:	601a      	str	r2, [r3, #0]
        if(hero_bul[i].isMir)dir_x=-1;
 80094b2:	4a89      	ldr	r2, [pc, #548]	; (80096d8 <bullet_move+0x280>)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	015b      	lsls	r3, r3, #5
 80094b8:	4413      	add	r3, r2
 80094ba:	331c      	adds	r3, #28
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <bullet_move+0x72>
 80094c2:	f04f 33ff 	mov.w	r3, #4294967295
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	e02d      	b.n	8009526 <bullet_move+0xce>
        else dir_x=1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	e02a      	b.n	8009526 <bullet_move+0xce>
    }else{
        cnt=enemy_bul[i].cnt;
 80094d0:	4a82      	ldr	r2, [pc, #520]	; (80096dc <bullet_move+0x284>)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	015b      	lsls	r3, r3, #5
 80094d6:	4413      	add	r3, r2
 80094d8:	3314      	adds	r3, #20
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	623b      	str	r3, [r7, #32]
        type=enemy_bul[i].type;
 80094de:	4a7f      	ldr	r2, [pc, #508]	; (80096dc <bullet_move+0x284>)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	015b      	lsls	r3, r3, #5
 80094e4:	4413      	add	r3, r2
 80094e6:	3318      	adds	r3, #24
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24
        dir_y=1;
 80094ec:	2301      	movs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
        enemy_bul[i].cnt++;
 80094f0:	4a7a      	ldr	r2, [pc, #488]	; (80096dc <bullet_move+0x284>)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	015b      	lsls	r3, r3, #5
 80094f6:	4413      	add	r3, r2
 80094f8:	3314      	adds	r3, #20
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	4977      	ldr	r1, [pc, #476]	; (80096dc <bullet_move+0x284>)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	015b      	lsls	r3, r3, #5
 8009504:	440b      	add	r3, r1
 8009506:	3314      	adds	r3, #20
 8009508:	601a      	str	r2, [r3, #0]
        if(enemy_bul[i].isMir)dir_x=-1;
 800950a:	4a74      	ldr	r2, [pc, #464]	; (80096dc <bullet_move+0x284>)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	015b      	lsls	r3, r3, #5
 8009510:	4413      	add	r3, r2
 8009512:	331c      	adds	r3, #28
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <bullet_move+0xca>
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	e001      	b.n	8009526 <bullet_move+0xce>
        else dir_x=1;
 8009522:	2301      	movs	r3, #1
 8009524:	613b      	str	r3, [r7, #16]
    }

    if(type==BULLET_MOVE_LINE){
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2b01      	cmp	r3, #1
 800952a:	d104      	bne.n	8009536 <bullet_move+0xde>
        dx=0; dy=6;
 800952c:	2300      	movs	r3, #0
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	2306      	movs	r3, #6
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	e080      	b.n	8009638 <bullet_move+0x1e0>
    }else if(type==BULLET_MOVE_SEMICIRCLE){
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	2b05      	cmp	r3, #5
 800953a:	d161      	bne.n	8009600 <bullet_move+0x1a8>
    	double angle=(cnt*20-90)*3.1415/180;
 800953c:	6a3a      	ldr	r2, [r7, #32]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	3b5a      	subs	r3, #90	; 0x5a
 8009548:	4618      	mov	r0, r3
 800954a:	f7f6 ffbf 	bl	80004cc <__aeabi_i2d>
 800954e:	a360      	add	r3, pc, #384	; (adr r3, 80096d0 <bullet_move+0x278>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f7 f824 	bl	80005a0 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4610      	mov	r0, r2
 800955e:	4619      	mov	r1, r3
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <bullet_move+0x288>)
 8009566:	f7f7 f945 	bl	80007f4 <__aeabi_ddiv>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    	dx=-sin(angle)*6;
 8009572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009576:	f003 fde9 	bl	800d14c <sin>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4690      	mov	r8, r2
 8009580:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <bullet_move+0x28c>)
 800958a:	4640      	mov	r0, r8
 800958c:	4649      	mov	r1, r9
 800958e:	f7f7 f807 	bl	80005a0 <__aeabi_dmul>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4610      	mov	r0, r2
 8009598:	4619      	mov	r1, r3
 800959a:	f7f7 fa9b 	bl	8000ad4 <__aeabi_d2iz>
 800959e:	4603      	mov	r3, r0
 80095a0:	61fb      	str	r3, [r7, #28]
    	dy=-cos(angle)*6;
 80095a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095a6:	f003 fd9b 	bl	800d0e0 <cos>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4614      	mov	r4, r2
 80095b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	4b4a      	ldr	r3, [pc, #296]	; (80096e4 <bullet_move+0x28c>)
 80095ba:	4620      	mov	r0, r4
 80095bc:	4629      	mov	r1, r5
 80095be:	f7f6 ffef 	bl	80005a0 <__aeabi_dmul>
 80095c2:	4603      	mov	r3, r0
 80095c4:	460c      	mov	r4, r1
 80095c6:	4618      	mov	r0, r3
 80095c8:	4621      	mov	r1, r4
 80095ca:	f7f7 fa83 	bl	8000ad4 <__aeabi_d2iz>
 80095ce:	4603      	mov	r3, r0
 80095d0:	61bb      	str	r3, [r7, #24]
    	if((cnt*20)%360<180){
 80095d2:	6a3a      	ldr	r2, [r7, #32]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4a42      	ldr	r2, [pc, #264]	; (80096e8 <bullet_move+0x290>)
 80095de:	fb82 1203 	smull	r1, r2, r2, r3
 80095e2:	441a      	add	r2, r3
 80095e4:	1211      	asrs	r1, r2, #8
 80095e6:	17da      	asrs	r2, r3, #31
 80095e8:	1a8a      	subs	r2, r1, r2
 80095ea:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80095ee:	fb01 f202 	mul.w	r2, r1, r2
 80095f2:	1a9a      	subs	r2, r3, r2
 80095f4:	2ab3      	cmp	r2, #179	; 0xb3
 80095f6:	dc1f      	bgt.n	8009638 <bullet_move+0x1e0>
    		dy=-dy;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	425b      	negs	r3, r3
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	e01b      	b.n	8009638 <bullet_move+0x1e0>
    	}
    }else if(type==BULLET_MOVE_XIE60){
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	2b02      	cmp	r3, #2
 8009604:	d104      	bne.n	8009610 <bullet_move+0x1b8>
    	dx=1; dy=6;
 8009606:	2301      	movs	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	2306      	movs	r3, #6
 800960c:	61bb      	str	r3, [r7, #24]
 800960e:	e013      	b.n	8009638 <bullet_move+0x1e0>
    }else if(type==BULLET_MOVE_XIE45){
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	2b03      	cmp	r3, #3
 8009614:	d104      	bne.n	8009620 <bullet_move+0x1c8>
    	dx=3; dy=6;
 8009616:	2303      	movs	r3, #3
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	2306      	movs	r3, #6
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	e00b      	b.n	8009638 <bullet_move+0x1e0>
    }else if(type==BULLET_MOVE_XIE30){
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b04      	cmp	r3, #4
 8009624:	d104      	bne.n	8009630 <bullet_move+0x1d8>
    	dx=4; dy=6;
 8009626:	2304      	movs	r3, #4
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	2306      	movs	r3, #6
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e003      	b.n	8009638 <bullet_move+0x1e0>
    }else{
    	dx=0; dy=6;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	2306      	movs	r3, #6
 8009636:	61bb      	str	r3, [r7, #24]
    }
    if(isHero){
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d020      	beq.n	8009680 <bullet_move+0x228>
        hero_bul[i].x+=dx*dir_x;
 800963e:	4a26      	ldr	r2, [pc, #152]	; (80096d8 <bullet_move+0x280>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	015b      	lsls	r3, r3, #5
 8009644:	4413      	add	r3, r2
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	6939      	ldr	r1, [r7, #16]
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	441a      	add	r2, r3
 8009652:	4921      	ldr	r1, [pc, #132]	; (80096d8 <bullet_move+0x280>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	015b      	lsls	r3, r3, #5
 8009658:	440b      	add	r3, r1
 800965a:	601a      	str	r2, [r3, #0]
        hero_bul[i].y+=dy*dir_y;
 800965c:	4a1e      	ldr	r2, [pc, #120]	; (80096d8 <bullet_move+0x280>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	015b      	lsls	r3, r3, #5
 8009662:	4413      	add	r3, r2
 8009664:	3304      	adds	r3, #4
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	441a      	add	r2, r3
 8009672:	4919      	ldr	r1, [pc, #100]	; (80096d8 <bullet_move+0x280>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	015b      	lsls	r3, r3, #5
 8009678:	440b      	add	r3, r1
 800967a:	3304      	adds	r3, #4
 800967c:	601a      	str	r2, [r3, #0]
    }else{
        enemy_bul[i].x+=dx*dir_x;
        enemy_bul[i].y+=dy*dir_y;
    }
}
 800967e:	e01f      	b.n	80096c0 <bullet_move+0x268>
        enemy_bul[i].x+=dx*dir_x;
 8009680:	4a16      	ldr	r2, [pc, #88]	; (80096dc <bullet_move+0x284>)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	015b      	lsls	r3, r3, #5
 8009686:	4413      	add	r3, r2
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	6939      	ldr	r1, [r7, #16]
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	441a      	add	r2, r3
 8009694:	4911      	ldr	r1, [pc, #68]	; (80096dc <bullet_move+0x284>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	015b      	lsls	r3, r3, #5
 800969a:	440b      	add	r3, r1
 800969c:	601a      	str	r2, [r3, #0]
        enemy_bul[i].y+=dy*dir_y;
 800969e:	4a0f      	ldr	r2, [pc, #60]	; (80096dc <bullet_move+0x284>)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	015b      	lsls	r3, r3, #5
 80096a4:	4413      	add	r3, r2
 80096a6:	3304      	adds	r3, #4
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	6979      	ldr	r1, [r7, #20]
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	441a      	add	r2, r3
 80096b4:	4909      	ldr	r1, [pc, #36]	; (80096dc <bullet_move+0x284>)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	015b      	lsls	r3, r3, #5
 80096ba:	440b      	add	r3, r1
 80096bc:	3304      	adds	r3, #4
 80096be:	601a      	str	r2, [r3, #0]
}
 80096c0:	bf00      	nop
 80096c2:	3728      	adds	r7, #40	; 0x28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
 80096d0:	c083126f 	.word	0xc083126f
 80096d4:	400921ca 	.word	0x400921ca
 80096d8:	200004c0 	.word	0x200004c0
 80096dc:	2000383c 	.word	0x2000383c
 80096e0:	40668000 	.word	0x40668000
 80096e4:	40180000 	.word	0x40180000
 80096e8:	b60b60b7 	.word	0xb60b60b7
 80096ec:	00000000 	.word	0x00000000

080096f0 <move_fly>:

void move_fly(int i){
 80096f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]

	int t = flys[i].cnt;
 80096fa:	4acb      	ldr	r2, [pc, #812]	; (8009a28 <move_fly+0x338>)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	330c      	adds	r3, #12
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	617b      	str	r3, [r7, #20]
	if(flys[i].move_type==FLY_MOVE_SHIFT){
 800970e:	4ac6      	ldr	r2, [pc, #792]	; (8009a28 <move_fly+0x338>)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009716:	fb01 f303 	mul.w	r3, r1, r3
 800971a:	4413      	add	r3, r2
 800971c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b03      	cmp	r3, #3
 8009724:	d16c      	bne.n	8009800 <move_fly+0x110>
		if(flys[i].cnt%30<15){
 8009726:	4ac0      	ldr	r2, [pc, #768]	; (8009a28 <move_fly+0x338>)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	4413      	add	r3, r2
 8009734:	330c      	adds	r3, #12
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	4bbc      	ldr	r3, [pc, #752]	; (8009a2c <move_fly+0x33c>)
 800973a:	fb83 1302 	smull	r1, r3, r3, r2
 800973e:	4413      	add	r3, r2
 8009740:	1119      	asrs	r1, r3, #4
 8009742:	17d3      	asrs	r3, r2, #31
 8009744:	1ac9      	subs	r1, r1, r3
 8009746:	460b      	mov	r3, r1
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	1a5b      	subs	r3, r3, r1
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	1ad1      	subs	r1, r2, r3
 8009750:	290e      	cmp	r1, #14
 8009752:	dc1b      	bgt.n	800978c <move_fly+0x9c>
			flys[i].x += 3; flys[i].vx =3;
 8009754:	4ab4      	ldr	r2, [pc, #720]	; (8009a28 <move_fly+0x338>)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	1cda      	adds	r2, r3, #3
 8009766:	49b0      	ldr	r1, [pc, #704]	; (8009a28 <move_fly+0x338>)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800976e:	fb00 f303 	mul.w	r3, r0, r3
 8009772:	440b      	add	r3, r1
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	4aac      	ldr	r2, [pc, #688]	; (8009a28 <move_fly+0x338>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	3310      	adds	r3, #16
 8009786:	2203      	movs	r2, #3
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	e01b      	b.n	80097c4 <move_fly+0xd4>
		}else{
			flys[i].x += -3; flys[i].vx = -3;
 800978c:	4aa6      	ldr	r2, [pc, #664]	; (8009a28 <move_fly+0x338>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	4413      	add	r3, r2
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	1eda      	subs	r2, r3, #3
 800979e:	49a2      	ldr	r1, [pc, #648]	; (8009a28 <move_fly+0x338>)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80097a6:	fb00 f303 	mul.w	r3, r0, r3
 80097aa:	440b      	add	r3, r1
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	4a9e      	ldr	r2, [pc, #632]	; (8009a28 <move_fly+0x338>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	3310      	adds	r3, #16
 80097be:	f06f 0202 	mvn.w	r2, #2
 80097c2:	601a      	str	r2, [r3, #0]
		}
		flys[i].y +=1; flys[i].vy= 1;
 80097c4:	4a98      	ldr	r2, [pc, #608]	; (8009a28 <move_fly+0x338>)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	4413      	add	r3, r2
 80097d2:	3304      	adds	r3, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	4993      	ldr	r1, [pc, #588]	; (8009a28 <move_fly+0x338>)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80097e0:	fb00 f303 	mul.w	r3, r0, r3
 80097e4:	440b      	add	r3, r1
 80097e6:	3304      	adds	r3, #4
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	4a8f      	ldr	r2, [pc, #572]	; (8009a28 <move_fly+0x338>)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80097f2:	fb01 f303 	mul.w	r3, r1, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	3314      	adds	r3, #20
 80097fa:	2201      	movs	r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e196      	b.n	8009b2e <move_fly+0x43e>
	}else if(flys[i].move_type==FLY_MOVE_CIRCLE){
 8009800:	4a89      	ldr	r2, [pc, #548]	; (8009a28 <move_fly+0x338>)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	4413      	add	r3, r2
 800980e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b04      	cmp	r3, #4
 8009816:	f040 80bc 	bne.w	8009992 <move_fly+0x2a2>
		double angle=t*5*3.1415/180;
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7f6 fe52 	bl	80004cc <__aeabi_i2d>
 8009828:	a37d      	add	r3, pc, #500	; (adr r3, 8009a20 <move_fly+0x330>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 feb7 	bl	80005a0 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4610      	mov	r0, r2
 8009838:	4619      	mov	r1, r3
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	4b7c      	ldr	r3, [pc, #496]	; (8009a30 <move_fly+0x340>)
 8009840:	f7f6 ffd8 	bl	80007f4 <__aeabi_ddiv>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	e9c7 2302 	strd	r2, r3, [r7, #8]
		flys[i].x+=cos(angle)*2; flys[i].vx=cos(angle)*2;
 800984c:	4a76      	ldr	r2, [pc, #472]	; (8009a28 <move_fly+0x338>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009854:	fb01 f303 	mul.w	r3, r1, r3
 8009858:	4413      	add	r3, r2
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f7f6 fe35 	bl	80004cc <__aeabi_i2d>
 8009862:	4682      	mov	sl, r0
 8009864:	468b      	mov	fp, r1
 8009866:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800986a:	f003 fc39 	bl	800d0e0 <cos>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	f7f6 fcdf 	bl	8000234 <__adddf3>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4650      	mov	r0, sl
 800987c:	4659      	mov	r1, fp
 800987e:	f7f6 fcd9 	bl	8000234 <__adddf3>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	f7f7 f923 	bl	8000ad4 <__aeabi_d2iz>
 800988e:	4a66      	ldr	r2, [pc, #408]	; (8009a28 <move_fly+0x338>)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	6018      	str	r0, [r3, #0]
 800989e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098a2:	f003 fc1d 	bl	800d0e0 <cos>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	f7f6 fcc3 	bl	8000234 <__adddf3>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7f7 f90d 	bl	8000ad4 <__aeabi_d2iz>
 80098ba:	4a5b      	ldr	r2, [pc, #364]	; (8009a28 <move_fly+0x338>)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80098c2:	fb01 f303 	mul.w	r3, r1, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	3310      	adds	r3, #16
 80098ca:	6018      	str	r0, [r3, #0]
		flys[i].y+=-sin(angle)*2+1; flys[i].vy=-sin(angle)*2+1;
 80098cc:	4a56      	ldr	r2, [pc, #344]	; (8009a28 <move_fly+0x338>)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7f6 fdf4 	bl	80004cc <__aeabi_i2d>
 80098e4:	4682      	mov	sl, r0
 80098e6:	468b      	mov	fp, r1
 80098e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098ec:	f003 fc2e 	bl	800d14c <sin>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4690      	mov	r8, r2
 80098f6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80098fa:	4642      	mov	r2, r8
 80098fc:	464b      	mov	r3, r9
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f6 fc97 	bl	8000234 <__adddf3>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4610      	mov	r0, r2
 800990c:	4619      	mov	r1, r3
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	4b48      	ldr	r3, [pc, #288]	; (8009a34 <move_fly+0x344>)
 8009914:	f7f6 fc8e 	bl	8000234 <__adddf3>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4650      	mov	r0, sl
 800991e:	4659      	mov	r1, fp
 8009920:	f7f6 fc88 	bl	8000234 <__adddf3>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4610      	mov	r0, r2
 800992a:	4619      	mov	r1, r3
 800992c:	f7f7 f8d2 	bl	8000ad4 <__aeabi_d2iz>
 8009930:	4a3d      	ldr	r2, [pc, #244]	; (8009a28 <move_fly+0x338>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	4413      	add	r3, r2
 800993e:	3304      	adds	r3, #4
 8009940:	6018      	str	r0, [r3, #0]
 8009942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009946:	f003 fc01 	bl	800d14c <sin>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4614      	mov	r4, r2
 8009950:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009954:	4622      	mov	r2, r4
 8009956:	462b      	mov	r3, r5
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	f7f6 fc6a 	bl	8000234 <__adddf3>
 8009960:	4603      	mov	r3, r0
 8009962:	460c      	mov	r4, r1
 8009964:	4618      	mov	r0, r3
 8009966:	4621      	mov	r1, r4
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <move_fly+0x344>)
 800996e:	f7f6 fc61 	bl	8000234 <__adddf3>
 8009972:	4603      	mov	r3, r0
 8009974:	460c      	mov	r4, r1
 8009976:	4618      	mov	r0, r3
 8009978:	4621      	mov	r1, r4
 800997a:	f7f7 f8ab 	bl	8000ad4 <__aeabi_d2iz>
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <move_fly+0x338>)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009986:	fb01 f303 	mul.w	r3, r1, r3
 800998a:	4413      	add	r3, r2
 800998c:	3314      	adds	r3, #20
 800998e:	6018      	str	r0, [r3, #0]
 8009990:	e0cd      	b.n	8009b2e <move_fly+0x43e>
	}else if(flys[i].move_type==FLY_MOVE_QUICK){
 8009992:	4a25      	ldr	r2, [pc, #148]	; (8009a28 <move_fly+0x338>)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	4413      	add	r3, r2
 80099a0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d146      	bne.n	8009a38 <move_fly+0x348>
		flys[i].x += 0; flys[i].vx = 0;
 80099aa:	4a1f      	ldr	r2, [pc, #124]	; (8009a28 <move_fly+0x338>)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	491b      	ldr	r1, [pc, #108]	; (8009a28 <move_fly+0x338>)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80099c2:	fb00 f303 	mul.w	r3, r0, r3
 80099c6:	440b      	add	r3, r1
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	4a17      	ldr	r2, [pc, #92]	; (8009a28 <move_fly+0x338>)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	3310      	adds	r3, #16
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]
		flys[i].y +=3; flys[i].vy= 3;
 80099de:	4a12      	ldr	r2, [pc, #72]	; (8009a28 <move_fly+0x338>)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	3304      	adds	r3, #4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	1cda      	adds	r2, r3, #3
 80099f2:	490d      	ldr	r1, [pc, #52]	; (8009a28 <move_fly+0x338>)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80099fa:	fb00 f303 	mul.w	r3, r0, r3
 80099fe:	440b      	add	r3, r1
 8009a00:	3304      	adds	r3, #4
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <move_fly+0x338>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	4413      	add	r3, r2
 8009a12:	3314      	adds	r3, #20
 8009a14:	2203      	movs	r2, #3
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	e089      	b.n	8009b2e <move_fly+0x43e>
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w
 8009a20:	c083126f 	.word	0xc083126f
 8009a24:	400921ca 	.word	0x400921ca
 8009a28:	20001180 	.word	0x20001180
 8009a2c:	88888889 	.word	0x88888889
 8009a30:	40668000 	.word	0x40668000
 8009a34:	3ff00000 	.word	0x3ff00000
	}else if(flys[i].move_type==FLY_MOVE_NORMAL){
 8009a38:	4a49      	ldr	r2, [pc, #292]	; (8009b60 <move_fly+0x470>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009a40:	fb01 f303 	mul.w	r3, r1, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d137      	bne.n	8009ac0 <move_fly+0x3d0>
		flys[i].x += 0; flys[i].vx = 0;
 8009a50:	4a43      	ldr	r2, [pc, #268]	; (8009b60 <move_fly+0x470>)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	493f      	ldr	r1, [pc, #252]	; (8009b60 <move_fly+0x470>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8009a68:	fb00 f303 	mul.w	r3, r0, r3
 8009a6c:	440b      	add	r3, r1
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	4a3b      	ldr	r2, [pc, #236]	; (8009b60 <move_fly+0x470>)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009a78:	fb01 f303 	mul.w	r3, r1, r3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3310      	adds	r3, #16
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
		flys[i].y +=1; flys[i].vy= 1;
 8009a84:	4a36      	ldr	r2, [pc, #216]	; (8009b60 <move_fly+0x470>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	4413      	add	r3, r2
 8009a92:	3304      	adds	r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	4931      	ldr	r1, [pc, #196]	; (8009b60 <move_fly+0x470>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8009aa0:	fb00 f303 	mul.w	r3, r0, r3
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	4a2d      	ldr	r2, [pc, #180]	; (8009b60 <move_fly+0x470>)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3314      	adds	r3, #20
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e036      	b.n	8009b2e <move_fly+0x43e>
	}else{
		flys[i].x += 0; flys[i].vx = 0;
 8009ac0:	4a27      	ldr	r2, [pc, #156]	; (8009b60 <move_fly+0x470>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	4413      	add	r3, r2
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	4923      	ldr	r1, [pc, #140]	; (8009b60 <move_fly+0x470>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8009ad8:	fb00 f303 	mul.w	r3, r0, r3
 8009adc:	440b      	add	r3, r1
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	4a1f      	ldr	r2, [pc, #124]	; (8009b60 <move_fly+0x470>)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	4413      	add	r3, r2
 8009aee:	3310      	adds	r3, #16
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
		flys[i].y +=1; flys[i].vy= 1;
 8009af4:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <move_fly+0x470>)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	4413      	add	r3, r2
 8009b02:	3304      	adds	r3, #4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	4915      	ldr	r1, [pc, #84]	; (8009b60 <move_fly+0x470>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8009b10:	fb00 f303 	mul.w	r3, r0, r3
 8009b14:	440b      	add	r3, r1
 8009b16:	3304      	adds	r3, #4
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <move_fly+0x470>)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009b22:	fb01 f303 	mul.w	r3, r1, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	3314      	adds	r3, #20
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
	}
	flys[i].cnt++;
 8009b2e:	4a0c      	ldr	r2, [pc, #48]	; (8009b60 <move_fly+0x470>)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	4907      	ldr	r1, [pc, #28]	; (8009b60 <move_fly+0x470>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8009b4a:	fb00 f303 	mul.w	r3, r0, r3
 8009b4e:	440b      	add	r3, r1
 8009b50:	330c      	adds	r3, #12
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001180 	.word	0x20001180

08009b64 <is_fire>:


int is_fire(Fire *fire){
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	if(!fire->enable){
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <is_fire+0x14>
		return 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e028      	b.n	8009bca <is_fire+0x66>
	}
	int cnt = fire->cnt%(fire->sleep_time+fire->fire_time*fire->fire_num);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	68d1      	ldr	r1, [r2, #12]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6852      	ldr	r2, [r2, #4]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	6880      	ldr	r0, [r0, #8]
 8009b88:	fb00 f202 	mul.w	r2, r0, r2
 8009b8c:	440a      	add	r2, r1
 8009b8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b92:	fb02 f201 	mul.w	r2, r2, r1
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
	if(cnt>=fire->fire_time*fire->fire_num){
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6892      	ldr	r2, [r2, #8]
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	db01      	blt.n	8009bb0 <is_fire+0x4c>
		return 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e00c      	b.n	8009bca <is_fire+0x66>
	}
	if(cnt%(fire->fire_time)==0){
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8009bba:	fb02 f201 	mul.w	r2, r2, r1
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <is_fire+0x64>
		return 1;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e000      	b.n	8009bca <is_fire+0x66>
	}
	return 0;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bc80      	pop	{r7}
 8009bd2:	4770      	bx	lr

08009bd4 <bullet_factory>:
Bullet bullet_factory(int i,int j){
 8009bd4:	b4b0      	push	{r4, r5, r7}
 8009bd6:	b08d      	sub	sp, #52	; 0x34
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
	Bullet bul;
	bul.vx = flys[i].vx;bul.vy=flys[i].vy;
 8009be0:	4a22      	ldr	r2, [pc, #136]	; (8009c6c <bullet_factory+0x98>)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	4413      	add	r3, r2
 8009bee:	3310      	adds	r3, #16
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	61bb      	str	r3, [r7, #24]
 8009bf4:	4a1d      	ldr	r2, [pc, #116]	; (8009c6c <bullet_factory+0x98>)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	3314      	adds	r3, #20
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	61fb      	str	r3, [r7, #28]
	bul.cnt=0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
	bul.type=flys[i].fires[j].move_type;
 8009c0c:	4817      	ldr	r0, [pc, #92]	; (8009c6c <bullet_factory+0x98>)
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8009c1e:	fb02 f201 	mul.w	r2, r2, r1
 8009c22:	4413      	add	r3, r2
 8009c24:	4403      	add	r3, r0
 8009c26:	332c      	adds	r3, #44	; 0x2c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
	bul.power=flys[i].fires[j].power;
 8009c2c:	480f      	ldr	r0, [pc, #60]	; (8009c6c <bullet_factory+0x98>)
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8009c3e:	fb02 f201 	mul.w	r2, r2, r1
 8009c42:	4413      	add	r3, r2
 8009c44:	4403      	add	r3, r0
 8009c46:	3334      	adds	r3, #52	; 0x34
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	623b      	str	r3, [r7, #32]
	return bul;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	461d      	mov	r5, r3
 8009c50:	f107 0410 	add.w	r4, r7, #16
 8009c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009c5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	3734      	adds	r7, #52	; 0x34
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bcb0      	pop	{r4, r5, r7}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20001180 	.word	0x20001180

08009c70 <fire_factory>:
Fire fire_factory(int type){
 8009c70:	b4b0      	push	{r4, r5, r7}
 8009c72:	b08d      	sub	sp, #52	; 0x34
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
	Fire fire;
	fire.cnt=0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
	fire.enable=1;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	623b      	str	r3, [r7, #32]
	fire.shape=FIRE_SHAPE_NORMAL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	62bb      	str	r3, [r7, #40]	; 0x28
	fire.move_type=BULLET_MOVE_LINE;
 8009c86:	2301      	movs	r3, #1
 8009c88:	61fb      	str	r3, [r7, #28]
	fire.power=1;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
	if(type==FIRE_SLOW_LINE){
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d106      	bne.n	8009ca2 <fire_factory+0x32>
		fire.fire_time=7;
 8009c94:	2307      	movs	r3, #7
 8009c96:	613b      	str	r3, [r7, #16]
		fire.fire_num=3;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	617b      	str	r3, [r7, #20]
		fire.sleep_time=20;
 8009c9c:	2314      	movs	r3, #20
 8009c9e:	61bb      	str	r3, [r7, #24]
 8009ca0:	e063      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_HIGH_LINE){
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d106      	bne.n	8009cb6 <fire_factory+0x46>
		fire.fire_time=6;
 8009ca8:	2306      	movs	r3, #6
 8009caa:	613b      	str	r3, [r7, #16]
		fire.fire_num=6;
 8009cac:	2306      	movs	r3, #6
 8009cae:	617b      	str	r3, [r7, #20]
		fire.sleep_time=12;
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e059      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_MULTI_LINE60){
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d10a      	bne.n	8009cd2 <fire_factory+0x62>
		fire.fire_time=7;
 8009cbc:	2307      	movs	r3, #7
 8009cbe:	613b      	str	r3, [r7, #16]
		fire.fire_num=4;
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	617b      	str	r3, [r7, #20]
		fire.sleep_time=8;
 8009cc4:	2308      	movs	r3, #8
 8009cc6:	61bb      	str	r3, [r7, #24]
		fire.move_type=BULLET_MOVE_XIE60;
 8009cc8:	2302      	movs	r3, #2
 8009cca:	61fb      	str	r3, [r7, #28]
		fire.biMir=1;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd0:	e04b      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_MULTI_LINE45){
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d10a      	bne.n	8009cee <fire_factory+0x7e>
		fire.fire_time=7;
 8009cd8:	2307      	movs	r3, #7
 8009cda:	613b      	str	r3, [r7, #16]
		fire.fire_num=4;
 8009cdc:	2304      	movs	r3, #4
 8009cde:	617b      	str	r3, [r7, #20]
		fire.sleep_time=8;
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	61bb      	str	r3, [r7, #24]
		fire.move_type=BULLET_MOVE_XIE45;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	61fb      	str	r3, [r7, #28]
		fire.biMir=1;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cec:	e03d      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_MULTI_LINE30){
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b05      	cmp	r3, #5
 8009cf2:	d10a      	bne.n	8009d0a <fire_factory+0x9a>
		fire.fire_time=7;
 8009cf4:	2307      	movs	r3, #7
 8009cf6:	613b      	str	r3, [r7, #16]
		fire.fire_num=4;
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	617b      	str	r3, [r7, #20]
		fire.sleep_time=8;
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	61bb      	str	r3, [r7, #24]
		fire.move_type=BULLET_MOVE_XIE30;
 8009d00:	2304      	movs	r3, #4
 8009d02:	61fb      	str	r3, [r7, #28]
		fire.biMir=1;
 8009d04:	2301      	movs	r3, #1
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d08:	e02f      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_HEART){
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	d10a      	bne.n	8009d26 <fire_factory+0xb6>
		fire.fire_time=1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
		fire.fire_num=1;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
		fire.sleep_time=50;
 8009d18:	2332      	movs	r3, #50	; 0x32
 8009d1a:	61bb      	str	r3, [r7, #24]
		fire.power=3;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
		fire.shape=FIRE_SHAPE_HEART;
 8009d20:	2301      	movs	r3, #1
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d24:	e021      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_SNAKE){
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b07      	cmp	r3, #7
 8009d2a:	d10a      	bne.n	8009d42 <fire_factory+0xd2>
		fire.fire_time=3;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	613b      	str	r3, [r7, #16]
		fire.fire_num=5;
 8009d30:	2305      	movs	r3, #5
 8009d32:	617b      	str	r3, [r7, #20]
		fire.sleep_time=0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
		fire.move_type=BULLET_MOVE_SEMICIRCLE;
 8009d38:	2305      	movs	r3, #5
 8009d3a:	61fb      	str	r3, [r7, #28]
		fire.biMir=0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d40:	e013      	b.n	8009d6a <fire_factory+0xfa>
	}else if(type==FIRE_SPIRAL){
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	d10a      	bne.n	8009d5e <fire_factory+0xee>
		fire.fire_time=4;
 8009d48:	2304      	movs	r3, #4
 8009d4a:	613b      	str	r3, [r7, #16]
		fire.fire_num=5;
 8009d4c:	2305      	movs	r3, #5
 8009d4e:	617b      	str	r3, [r7, #20]
		fire.sleep_time=0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61bb      	str	r3, [r7, #24]
		fire.move_type=BULLET_MOVE_SEMICIRCLE;
 8009d54:	2305      	movs	r3, #5
 8009d56:	61fb      	str	r3, [r7, #28]
		fire.biMir=1;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d5c:	e005      	b.n	8009d6a <fire_factory+0xfa>
	}else{
		fire.fire_time=5;
 8009d5e:	2305      	movs	r3, #5
 8009d60:	613b      	str	r3, [r7, #16]
		fire.fire_num=3;
 8009d62:	2303      	movs	r3, #3
 8009d64:	617b      	str	r3, [r7, #20]
		fire.sleep_time=30;
 8009d66:	231e      	movs	r3, #30
 8009d68:	61bb      	str	r3, [r7, #24]
	}
	return fire;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	461d      	mov	r5, r3
 8009d6e:	f107 040c 	add.w	r4, r7, #12
 8009d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	602b      	str	r3, [r5, #0]
}
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	3734      	adds	r7, #52	; 0x34
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bcb0      	pop	{r4, r5, r7}
 8009d86:	4770      	bx	lr

08009d88 <fly_factory>:
#define FLY_CHONGER_C 3
#define FLY_MOVER_A 4
#define FLY_MOVER_B 5
#define FLY_MOVER_C 6
#define FLY_STORYER 7
Fly fly_factory(int type){
 8009d88:	b5b0      	push	{r4, r5, r7, lr}
 8009d8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d94:	6018      	str	r0, [r3, #0]
 8009d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d9a:	6019      	str	r1, [r3, #0]
	Fly fly;
	fly.x=0; fly.y=0;
 8009d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009da8:	2200      	movs	r2, #0
 8009daa:	605a      	str	r2, [r3, #4]
	fly.vx=0;fly.vy=0;fly.cnt=0;
 8009dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009db0:	2200      	movs	r2, #0
 8009db2:	611a      	str	r2, [r3, #16]
 8009db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009db8:	2200      	movs	r2, #0
 8009dba:	615a      	str	r2, [r3, #20]
 8009dbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	60da      	str	r2, [r3, #12]
	fly.hp=1;
 8009dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dc8:	2201      	movs	r2, #1
 8009dca:	609a      	str	r2, [r3, #8]
	if(type==FLY_CHONGER_A){
 8009dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d11e      	bne.n	8009e14 <fly_factory+0x8c>
        fly.score=1; fly.move_type=FLY_MOVE_NORMAL;
 8009dd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009de0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009de4:	2202      	movs	r2, #2
 8009de6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_SLOW_LINE);
 8009dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dee:	2201      	movs	r2, #1
 8009df0:	619a      	str	r2, [r3, #24]
 8009df2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009df6:	463b      	mov	r3, r7
 8009df8:	2101      	movs	r1, #1
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff ff38 	bl	8009c70 <fire_factory>
 8009e00:	463b      	mov	r3, r7
 8009e02:	341c      	adds	r4, #28
 8009e04:	461d      	mov	r5, r3
 8009e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	e119      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_CHONGER_B){
 8009e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d11e      	bne.n	8009e5c <fly_factory+0xd4>
        fly.score=2; fly.move_type=FLY_MOVE_NORMAL;
 8009e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e22:	2202      	movs	r2, #2
 8009e24:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_MULTI_LINE60);
 8009e32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e36:	2201      	movs	r2, #1
 8009e38:	619a      	str	r2, [r3, #24]
 8009e3a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009e3e:	463b      	mov	r3, r7
 8009e40:	2103      	movs	r1, #3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff ff14 	bl	8009c70 <fire_factory>
 8009e48:	463b      	mov	r3, r7
 8009e4a:	341c      	adds	r4, #28
 8009e4c:	461d      	mov	r5, r3
 8009e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	e0f5      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_CHONGER_C){
 8009e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d136      	bne.n	8009ed4 <fly_factory+0x14c>
        fly.score=3; fly.move_type=FLY_MOVE_QUICK;
 8009e66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e74:	2201      	movs	r2, #1
 8009e76:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=2; fly.fires[0]=fire_factory(FIRE_MULTI_LINE45);
 8009e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e7e:	2202      	movs	r2, #2
 8009e80:	619a      	str	r2, [r3, #24]
 8009e82:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009e86:	463b      	mov	r3, r7
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fef0 	bl	8009c70 <fire_factory>
 8009e90:	463b      	mov	r3, r7
 8009e92:	341c      	adds	r4, #28
 8009e94:	461d      	mov	r5, r3
 8009e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	6023      	str	r3, [r4, #0]
		fly.fires[1]=fire_factory(FIRE_MULTI_LINE60);
 8009ea2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	2103      	movs	r1, #3
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fee0 	bl	8009c70 <fire_factory>
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	3440      	adds	r4, #64	; 0x40
 8009eb4:	461d      	mov	r5, r3
 8009eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	6023      	str	r3, [r4, #0]
		fly.fires[0].power=2;
 8009ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	635a      	str	r2, [r3, #52]	; 0x34
		fly.fires[1].power=2;
 8009eca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ece:	2202      	movs	r2, #2
 8009ed0:	659a      	str	r2, [r3, #88]	; 0x58
 8009ed2:	e0b9      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_MOVER_A){
 8009ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d11e      	bne.n	8009f1c <fly_factory+0x194>
        fly.score=1; fly.move_type=FLY_MOVE_SHIFT;
 8009ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009ee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009eec:	2203      	movs	r2, #3
 8009eee:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_SLOW_LINE);
 8009ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	619a      	str	r2, [r3, #24]
 8009efa:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009efe:	463b      	mov	r3, r7
 8009f00:	2101      	movs	r1, #1
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff feb4 	bl	8009c70 <fire_factory>
 8009f08:	463b      	mov	r3, r7
 8009f0a:	341c      	adds	r4, #28
 8009f0c:	461d      	mov	r5, r3
 8009f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	e095      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_MOVER_B){
 8009f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d11e      	bne.n	8009f64 <fly_factory+0x1dc>
        fly.score=2; fly.move_type=FLY_MOVE_SHIFT;
 8009f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009f30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f34:	2203      	movs	r2, #3
 8009f36:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_HIGH_LINE);
 8009f3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f3e:	2201      	movs	r2, #1
 8009f40:	619a      	str	r2, [r3, #24]
 8009f42:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009f46:	463b      	mov	r3, r7
 8009f48:	2102      	movs	r1, #2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fe90 	bl	8009c70 <fire_factory>
 8009f50:	463b      	mov	r3, r7
 8009f52:	341c      	adds	r4, #28
 8009f54:	461d      	mov	r5, r3
 8009f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	e071      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_MOVER_C){
 8009f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b06      	cmp	r3, #6
 8009f6c:	d122      	bne.n	8009fb4 <fly_factory+0x22c>
	    fly.score=3; fly.move_type=FLY_MOVE_SHIFT;
 8009f6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f72:	2203      	movs	r2, #3
 8009f74:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009f78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_SNAKE);
 8009f82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f86:	2201      	movs	r2, #1
 8009f88:	619a      	str	r2, [r3, #24]
 8009f8a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009f8e:	463b      	mov	r3, r7
 8009f90:	2107      	movs	r1, #7
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fe6c 	bl	8009c70 <fire_factory>
 8009f98:	463b      	mov	r3, r7
 8009f9a:	341c      	adds	r4, #28
 8009f9c:	461d      	mov	r5, r3
 8009f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	6023      	str	r3, [r4, #0]
		fly.fires[0].power=2;
 8009faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fae:	2202      	movs	r2, #2
 8009fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8009fb2:	e049      	b.n	800a048 <fly_factory+0x2c0>
	}else if(type==FLY_STORYER){
 8009fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b07      	cmp	r3, #7
 8009fbc:	d122      	bne.n	800a004 <fly_factory+0x27c>
	    fly.score=4; fly.move_type=FLY_MOVE_CIRCLE;
 8009fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_SPIRAL);
 8009fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	619a      	str	r2, [r3, #24]
 8009fda:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8009fde:	463b      	mov	r3, r7
 8009fe0:	2108      	movs	r1, #8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fe44 	bl	8009c70 <fire_factory>
 8009fe8:	463b      	mov	r3, r7
 8009fea:	341c      	adds	r4, #28
 8009fec:	461d      	mov	r5, r3
 8009fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	6023      	str	r3, [r4, #0]
		fly.fires[0].power=3;
 8009ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ffe:	2203      	movs	r2, #3
 800a000:	635a      	str	r2, [r3, #52]	; 0x34
 800a002:	e021      	b.n	800a048 <fly_factory+0x2c0>
	}else{
		fly.hp=1; fly.score=1; fly.move_type=FLY_MOVE_NORMAL;
 800a004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a008:	2201      	movs	r2, #1
 800a00a:	609a      	str	r2, [r3, #8]
 800a00c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a010:	2201      	movs	r2, #1
 800a012:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 800a016:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a01a:	2202      	movs	r2, #2
 800a01c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		fly.fire_num=1; fly.fires[0]=fire_factory(FIRE_SLOW_LINE);
 800a020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a024:	2201      	movs	r2, #1
 800a026:	619a      	str	r2, [r3, #24]
 800a028:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800a02c:	463b      	mov	r3, r7
 800a02e:	2101      	movs	r1, #1
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff fe1d 	bl	8009c70 <fire_factory>
 800a036:	463b      	mov	r3, r7
 800a038:	341c      	adds	r4, #28
 800a03a:	461d      	mov	r5, r3
 800a03c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a03e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	6023      	str	r3, [r4, #0]

	}
	return fly;
 800a048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a052:	4610      	mov	r0, r2
 800a054:	4619      	mov	r1, r3
 800a056:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 800a05a:	461a      	mov	r2, r3
 800a05c:	f002 fbc4 	bl	800c7e8 <memcpy>

}
 800a060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a070 <add_heart_bul>:

void add_heart_bul(int index,Bullet bul){
 800a070:	b084      	sub	sp, #16
 800a072:	b5b0      	push	{r4, r5, r7, lr}
 800a074:	b0e8      	sub	sp, #416	; 0x1a0
 800a076:	af00      	add	r7, sp, #0
 800a078:	1d3c      	adds	r4, r7, #4
 800a07a:	6020      	str	r0, [r4, #0]
 800a07c:	f507 70da 	add.w	r0, r7, #436	; 0x1b4
 800a080:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int xv[50]={36,31,25,17,8,5,4,7,13,19,27,32,37,41,47,55,64,67,68,65,59,53,45,40};
 800a084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a088:	22c8      	movs	r2, #200	; 0xc8
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f002 fbb6 	bl	800c7fe <memset>
 800a092:	2324      	movs	r3, #36	; 0x24
 800a094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a098:	231f      	movs	r3, #31
 800a09a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a09e:	2319      	movs	r3, #25
 800a0a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a0a4:	2311      	movs	r3, #17
 800a0a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0b0:	2305      	movs	r3, #5
 800a0b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0b6:	2304      	movs	r3, #4
 800a0b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0bc:	2307      	movs	r3, #7
 800a0be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a0c2:	230d      	movs	r3, #13
 800a0c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0c8:	2313      	movs	r3, #19
 800a0ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0ce:	231b      	movs	r3, #27
 800a0d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0d4:	2320      	movs	r3, #32
 800a0d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a0da:	2325      	movs	r3, #37	; 0x25
 800a0dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a0e0:	2329      	movs	r3, #41	; 0x29
 800a0e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a0e6:	232f      	movs	r3, #47	; 0x2f
 800a0e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0ec:	2337      	movs	r3, #55	; 0x37
 800a0ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a0f8:	2343      	movs	r3, #67	; 0x43
 800a0fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a0fe:	2344      	movs	r3, #68	; 0x44
 800a100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a104:	2341      	movs	r3, #65	; 0x41
 800a106:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a10a:	233b      	movs	r3, #59	; 0x3b
 800a10c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a110:	2335      	movs	r3, #53	; 0x35
 800a112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a116:	232d      	movs	r3, #45	; 0x2d
 800a118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a11c:	2328      	movs	r3, #40	; 0x28
 800a11e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	int yv[50]={20,13,9,8,14,22,30,39,44,49,54,59,66,13,9,8,14,22,30,39,44,49,54,59};
 800a122:	f107 030c 	add.w	r3, r7, #12
 800a126:	4618      	mov	r0, r3
 800a128:	23c8      	movs	r3, #200	; 0xc8
 800a12a:	461a      	mov	r2, r3
 800a12c:	2100      	movs	r1, #0
 800a12e:	f002 fb66 	bl	800c7fe <memset>
 800a132:	f107 030c 	add.w	r3, r7, #12
 800a136:	2214      	movs	r2, #20
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f107 030c 	add.w	r3, r7, #12
 800a13e:	220d      	movs	r2, #13
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	f107 030c 	add.w	r3, r7, #12
 800a146:	2209      	movs	r2, #9
 800a148:	609a      	str	r2, [r3, #8]
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	2208      	movs	r2, #8
 800a150:	60da      	str	r2, [r3, #12]
 800a152:	f107 030c 	add.w	r3, r7, #12
 800a156:	220e      	movs	r2, #14
 800a158:	611a      	str	r2, [r3, #16]
 800a15a:	f107 030c 	add.w	r3, r7, #12
 800a15e:	2216      	movs	r2, #22
 800a160:	615a      	str	r2, [r3, #20]
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	221e      	movs	r2, #30
 800a168:	619a      	str	r2, [r3, #24]
 800a16a:	f107 030c 	add.w	r3, r7, #12
 800a16e:	2227      	movs	r2, #39	; 0x27
 800a170:	61da      	str	r2, [r3, #28]
 800a172:	f107 030c 	add.w	r3, r7, #12
 800a176:	222c      	movs	r2, #44	; 0x2c
 800a178:	621a      	str	r2, [r3, #32]
 800a17a:	f107 030c 	add.w	r3, r7, #12
 800a17e:	2231      	movs	r2, #49	; 0x31
 800a180:	625a      	str	r2, [r3, #36]	; 0x24
 800a182:	f107 030c 	add.w	r3, r7, #12
 800a186:	2236      	movs	r2, #54	; 0x36
 800a188:	629a      	str	r2, [r3, #40]	; 0x28
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	223b      	movs	r2, #59	; 0x3b
 800a190:	62da      	str	r2, [r3, #44]	; 0x2c
 800a192:	f107 030c 	add.w	r3, r7, #12
 800a196:	2242      	movs	r2, #66	; 0x42
 800a198:	631a      	str	r2, [r3, #48]	; 0x30
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	220d      	movs	r2, #13
 800a1a0:	635a      	str	r2, [r3, #52]	; 0x34
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	2209      	movs	r2, #9
 800a1a8:	639a      	str	r2, [r3, #56]	; 0x38
 800a1aa:	f107 030c 	add.w	r3, r7, #12
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	63da      	str	r2, [r3, #60]	; 0x3c
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	220e      	movs	r2, #14
 800a1b8:	641a      	str	r2, [r3, #64]	; 0x40
 800a1ba:	f107 030c 	add.w	r3, r7, #12
 800a1be:	2216      	movs	r2, #22
 800a1c0:	645a      	str	r2, [r3, #68]	; 0x44
 800a1c2:	f107 030c 	add.w	r3, r7, #12
 800a1c6:	221e      	movs	r2, #30
 800a1c8:	649a      	str	r2, [r3, #72]	; 0x48
 800a1ca:	f107 030c 	add.w	r3, r7, #12
 800a1ce:	2227      	movs	r2, #39	; 0x27
 800a1d0:	64da      	str	r2, [r3, #76]	; 0x4c
 800a1d2:	f107 030c 	add.w	r3, r7, #12
 800a1d6:	222c      	movs	r2, #44	; 0x2c
 800a1d8:	651a      	str	r2, [r3, #80]	; 0x50
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	2231      	movs	r2, #49	; 0x31
 800a1e0:	655a      	str	r2, [r3, #84]	; 0x54
 800a1e2:	f107 030c 	add.w	r3, r7, #12
 800a1e6:	2236      	movs	r2, #54	; 0x36
 800a1e8:	659a      	str	r2, [r3, #88]	; 0x58
 800a1ea:	f107 030c 	add.w	r3, r7, #12
 800a1ee:	223b      	movs	r2, #59	; 0x3b
 800a1f0:	65da      	str	r2, [r3, #92]	; 0x5c
	for(int i=0;i<24;i++){
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800a1f8:	e07b      	b.n	800a2f2 <add_heart_bul+0x282>
		bul.x=xv[i]-35;
 800a1fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800a204:	4413      	add	r3, r2
 800a206:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 800a20a:	3b23      	subs	r3, #35	; 0x23
 800a20c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		bul.y=yv[i]-35;
 800a210:	f107 030c 	add.w	r3, r7, #12
 800a214:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21c:	3b23      	subs	r3, #35	; 0x23
 800a21e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		if(index==0){
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d12f      	bne.n	800a28a <add_heart_bul+0x21a>
			bul.x = bul.x+flys[index].x;
 800a22a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800a22e:	4937      	ldr	r1, [pc, #220]	; (800a30c <add_heart_bul+0x29c>)
 800a230:	1d3b      	adds	r3, r7, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800a238:	fb00 f303 	mul.w	r3, r0, r3
 800a23c:	440b      	add	r3, r1
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
			bul.y = bul.y+flys[index].y-35;
 800a246:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800a24a:	4930      	ldr	r1, [pc, #192]	; (800a30c <add_heart_bul+0x29c>)
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800a254:	fb00 f303 	mul.w	r3, r0, r3
 800a258:	440b      	add	r3, r1
 800a25a:	3304      	adds	r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4413      	add	r3, r2
 800a260:	3b23      	subs	r3, #35	; 0x23
 800a262:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
			hero_bul[bul_num_h++]=bul;
 800a266:	4b2a      	ldr	r3, [pc, #168]	; (800a310 <add_heart_bul+0x2a0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	4928      	ldr	r1, [pc, #160]	; (800a310 <add_heart_bul+0x2a0>)
 800a26e:	600a      	str	r2, [r1, #0]
 800a270:	4a28      	ldr	r2, [pc, #160]	; (800a314 <add_heart_bul+0x2a4>)
 800a272:	015b      	lsls	r3, r3, #5
 800a274:	4413      	add	r3, r2
 800a276:	461d      	mov	r5, r3
 800a278:	f507 74da 	add.w	r4, r7, #436	; 0x1b4
 800a27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a27e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a284:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a288:	e02e      	b.n	800a2e8 <add_heart_bul+0x278>
		}else{
			bul.x = bul.x+flys[index].x;
 800a28a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800a28e:	491f      	ldr	r1, [pc, #124]	; (800a30c <add_heart_bul+0x29c>)
 800a290:	1d3b      	adds	r3, r7, #4
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800a298:	fb00 f303 	mul.w	r3, r0, r3
 800a29c:	440b      	add	r3, r1
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
			bul.y = -bul.y+flys[index].y+35;
 800a2a6:	4a19      	ldr	r2, [pc, #100]	; (800a30c <add_heart_bul+0x29c>)
 800a2a8:	1d3b      	adds	r3, r7, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a2b0:	fb01 f303 	mul.w	r3, r1, r3
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	3323      	adds	r3, #35	; 0x23
 800a2c2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
			enemy_bul[bul_num_e++]=bul;
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <add_heart_bul+0x2a8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	4912      	ldr	r1, [pc, #72]	; (800a318 <add_heart_bul+0x2a8>)
 800a2ce:	600a      	str	r2, [r1, #0]
 800a2d0:	4a12      	ldr	r2, [pc, #72]	; (800a31c <add_heart_bul+0x2ac>)
 800a2d2:	015b      	lsls	r3, r3, #5
 800a2d4:	4413      	add	r3, r2
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	f507 74da 	add.w	r4, r7, #436	; 0x1b4
 800a2dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a2e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for(int i=0;i<24;i++){
 800a2e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800a2f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a2f6:	2b17      	cmp	r3, #23
 800a2f8:	f77f af7f 	ble.w	800a1fa <add_heart_bul+0x18a>
		}
	}
}
 800a2fc:	bf00      	nop
 800a2fe:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800a302:	46bd      	mov	sp, r7
 800a304:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a308:	b004      	add	sp, #16
 800a30a:	4770      	bx	lr
 800a30c:	20001180 	.word	0x20001180
 800a310:	200053bc 	.word	0x200053bc
 800a314:	200004c0 	.word	0x200004c0
 800a318:	20003660 	.word	0x20003660
 800a31c:	2000383c 	.word	0x2000383c

0800a320 <generate_bullet>:
void generate_bullet(){
 800a320:	b5b0      	push	{r4, r5, r7, lr}
 800a322:	b0a0      	sub	sp, #128	; 0x80
 800a324:	af06      	add	r7, sp, #24
    for(int i=0;i<fly_num;i++){
 800a326:	2300      	movs	r3, #0
 800a328:	667b      	str	r3, [r7, #100]	; 0x64
 800a32a:	e136      	b.n	800a59a <generate_bullet+0x27a>
    	for(int j=0;j<flys[i].fire_num;j++){
 800a32c:	2300      	movs	r3, #0
 800a32e:	663b      	str	r3, [r7, #96]	; 0x60
 800a330:	e123      	b.n	800a57a <generate_bullet+0x25a>

    		if(is_fire(&flys[i].fires[j])){
 800a332:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a334:	4613      	mov	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a33e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a342:	fb01 f202 	mul.w	r2, r1, r2
 800a346:	4413      	add	r3, r2
 800a348:	3318      	adds	r3, #24
 800a34a:	4a99      	ldr	r2, [pc, #612]	; (800a5b0 <generate_bullet+0x290>)
 800a34c:	4413      	add	r3, r2
 800a34e:	3304      	adds	r3, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff fc07 	bl	8009b64 <is_fire>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80db 	beq.w	800a514 <generate_bullet+0x1f4>
    			Bullet bul,bul2;
    			if(flys[i].fires[j].shape==0){
 800a35e:	4894      	ldr	r0, [pc, #592]	; (800a5b0 <generate_bullet+0x290>)
 800a360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a362:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a364:	4613      	mov	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a370:	fb02 f201 	mul.w	r2, r2, r1
 800a374:	4413      	add	r3, r2
 800a376:	4403      	add	r3, r0
 800a378:	3338      	adds	r3, #56	; 0x38
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 8096 	bne.w	800a4ae <generate_bullet+0x18e>

            		bul = bullet_factory(i,j);
 800a382:	f107 0320 	add.w	r3, r7, #32
 800a386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a388:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fc22 	bl	8009bd4 <bullet_factory>
            		bul.x=flys[i].x; bul.y=flys[i].y;
 800a390:	4a87      	ldr	r2, [pc, #540]	; (800a5b0 <generate_bullet+0x290>)
 800a392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a394:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a398:	fb01 f303 	mul.w	r3, r1, r3
 800a39c:	4413      	add	r3, r2
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	623b      	str	r3, [r7, #32]
 800a3a2:	4a83      	ldr	r2, [pc, #524]	; (800a5b0 <generate_bullet+0x290>)
 800a3a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a3aa:	fb01 f303 	mul.w	r3, r1, r3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
            		bul.isMir=0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            		if(i==0){
 800a3ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d111      	bne.n	800a3e4 <generate_bullet+0xc4>
            			hero_bul[bul_num_h++]=bul;
 800a3c0:	4b7c      	ldr	r3, [pc, #496]	; (800a5b4 <generate_bullet+0x294>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	497b      	ldr	r1, [pc, #492]	; (800a5b4 <generate_bullet+0x294>)
 800a3c8:	600a      	str	r2, [r1, #0]
 800a3ca:	4a7b      	ldr	r2, [pc, #492]	; (800a5b8 <generate_bullet+0x298>)
 800a3cc:	015b      	lsls	r3, r3, #5
 800a3ce:	4413      	add	r3, r2
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	f107 0420 	add.w	r4, r7, #32
 800a3d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a3de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a3e2:	e010      	b.n	800a406 <generate_bullet+0xe6>
            		}else{
            			enemy_bul[bul_num_e++]=bul;
 800a3e4:	4b75      	ldr	r3, [pc, #468]	; (800a5bc <generate_bullet+0x29c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	4974      	ldr	r1, [pc, #464]	; (800a5bc <generate_bullet+0x29c>)
 800a3ec:	600a      	str	r2, [r1, #0]
 800a3ee:	4a74      	ldr	r2, [pc, #464]	; (800a5c0 <generate_bullet+0x2a0>)
 800a3f0:	015b      	lsls	r3, r3, #5
 800a3f2:	4413      	add	r3, r2
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	f107 0420 	add.w	r4, r7, #32
 800a3fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a402:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            		}
            		if(flys[i].fires[j].biMir){
 800a406:	486a      	ldr	r0, [pc, #424]	; (800a5b0 <generate_bullet+0x290>)
 800a408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a40a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a40c:	4613      	mov	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a418:	fb02 f201 	mul.w	r2, r2, r1
 800a41c:	4413      	add	r3, r2
 800a41e:	4403      	add	r3, r0
 800a420:	333c      	adds	r3, #60	; 0x3c
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d075      	beq.n	800a514 <generate_bullet+0x1f4>
            			bul2 = bullet_factory(i,j);
 800a428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a42c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a42e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fbcf 	bl	8009bd4 <bullet_factory>
            			bul2.x=flys[i].x; bul2.y=flys[i].y;
 800a436:	4a5e      	ldr	r2, [pc, #376]	; (800a5b0 <generate_bullet+0x290>)
 800a438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	4413      	add	r3, r2
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	643b      	str	r3, [r7, #64]	; 0x40
 800a448:	4a59      	ldr	r2, [pc, #356]	; (800a5b0 <generate_bullet+0x290>)
 800a44a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a44c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a450:	fb01 f303 	mul.w	r3, r1, r3
 800a454:	4413      	add	r3, r2
 800a456:	3304      	adds	r3, #4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	647b      	str	r3, [r7, #68]	; 0x44
            			bul2.isMir=1;
 800a45c:	2301      	movs	r3, #1
 800a45e:	65fb      	str	r3, [r7, #92]	; 0x5c
            			if(i==0){
 800a460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a462:	2b00      	cmp	r3, #0
 800a464:	d111      	bne.n	800a48a <generate_bullet+0x16a>
							hero_bul[bul_num_h++]=bul2;
 800a466:	4b53      	ldr	r3, [pc, #332]	; (800a5b4 <generate_bullet+0x294>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	4951      	ldr	r1, [pc, #324]	; (800a5b4 <generate_bullet+0x294>)
 800a46e:	600a      	str	r2, [r1, #0]
 800a470:	4a51      	ldr	r2, [pc, #324]	; (800a5b8 <generate_bullet+0x298>)
 800a472:	015b      	lsls	r3, r3, #5
 800a474:	4413      	add	r3, r2
 800a476:	461d      	mov	r5, r3
 800a478:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800a47c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a47e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a480:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a484:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a488:	e044      	b.n	800a514 <generate_bullet+0x1f4>
						}else{
							enemy_bul[bul_num_e++]=bul2;
 800a48a:	4b4c      	ldr	r3, [pc, #304]	; (800a5bc <generate_bullet+0x29c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	494a      	ldr	r1, [pc, #296]	; (800a5bc <generate_bullet+0x29c>)
 800a492:	600a      	str	r2, [r1, #0]
 800a494:	4a4a      	ldr	r2, [pc, #296]	; (800a5c0 <generate_bullet+0x2a0>)
 800a496:	015b      	lsls	r3, r3, #5
 800a498:	4413      	add	r3, r2
 800a49a:	461d      	mov	r5, r3
 800a49c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800a4a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a4a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a4ac:	e032      	b.n	800a514 <generate_bullet+0x1f4>
						}
            		}
    			}else if(flys[i].fires[j].shape==FIRE_SHAPE_HEART){
 800a4ae:	4840      	ldr	r0, [pc, #256]	; (800a5b0 <generate_bullet+0x290>)
 800a4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a4c0:	fb02 f201 	mul.w	r2, r2, r1
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4403      	add	r3, r0
 800a4c8:	3338      	adds	r3, #56	; 0x38
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d121      	bne.n	800a514 <generate_bullet+0x1f4>
    				bul_num_h=0;
 800a4d0:	4b38      	ldr	r3, [pc, #224]	; (800a5b4 <generate_bullet+0x294>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
    				bul_num_e=0;
 800a4d6:	4b39      	ldr	r3, [pc, #228]	; (800a5bc <generate_bullet+0x29c>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]
    				bul = bullet_factory(i,j);
 800a4dc:	463b      	mov	r3, r7
 800a4de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fb76 	bl	8009bd4 <bullet_factory>
 800a4e8:	f107 0420 	add.w	r4, r7, #32
 800a4ec:	463d      	mov	r5, r7
 800a4ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a4f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    				add_heart_bul(i,bul);
 800a4fa:	466d      	mov	r5, sp
 800a4fc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800a500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f107 0320 	add.w	r3, r7, #32
 800a50c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a50e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a510:	f7ff fdae 	bl	800a070 <add_heart_bul>
    			}

    		}
    		if(flys[i].fires[j].enable){
 800a514:	4826      	ldr	r0, [pc, #152]	; (800a5b0 <generate_bullet+0x290>)
 800a516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a518:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a51a:	4613      	mov	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a526:	fb02 f201 	mul.w	r2, r2, r1
 800a52a:	4413      	add	r3, r2
 800a52c:	4403      	add	r3, r0
 800a52e:	3330      	adds	r3, #48	; 0x30
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d01e      	beq.n	800a574 <generate_bullet+0x254>
    			flys[i].fires[j].cnt++;
 800a536:	481e      	ldr	r0, [pc, #120]	; (800a5b0 <generate_bullet+0x290>)
 800a538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a53a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a53c:	4613      	mov	r3, r2
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a548:	fb02 f201 	mul.w	r2, r2, r1
 800a54c:	4413      	add	r3, r2
 800a54e:	4403      	add	r3, r0
 800a550:	331c      	adds	r3, #28
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	1c59      	adds	r1, r3, #1
 800a556:	4c16      	ldr	r4, [pc, #88]	; (800a5b0 <generate_bullet+0x290>)
 800a558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a55a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a55c:	4613      	mov	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800a568:	fb02 f200 	mul.w	r2, r2, r0
 800a56c:	4413      	add	r3, r2
 800a56e:	4423      	add	r3, r4
 800a570:	331c      	adds	r3, #28
 800a572:	6019      	str	r1, [r3, #0]
    	for(int j=0;j<flys[i].fire_num;j++){
 800a574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a576:	3301      	adds	r3, #1
 800a578:	663b      	str	r3, [r7, #96]	; 0x60
 800a57a:	4a0d      	ldr	r2, [pc, #52]	; (800a5b0 <generate_bullet+0x290>)
 800a57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a57e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a582:	fb01 f303 	mul.w	r3, r1, r3
 800a586:	4413      	add	r3, r2
 800a588:	3318      	adds	r3, #24
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a58e:	429a      	cmp	r2, r3
 800a590:	f6ff aecf 	blt.w	800a332 <generate_bullet+0x12>
    for(int i=0;i<fly_num;i++){
 800a594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a596:	3301      	adds	r3, #1
 800a598:	667b      	str	r3, [r7, #100]	; 0x64
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <generate_bullet+0x2a4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	f6ff aec3 	blt.w	800a32c <generate_bullet+0xc>
    		}
    	}
    }
}
 800a5a6:	bf00      	nop
 800a5a8:	3768      	adds	r7, #104	; 0x68
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20001180 	.word	0x20001180
 800a5b4:	200053bc 	.word	0x200053bc
 800a5b8:	200004c0 	.word	0x200004c0
 800a5bc:	20003660 	.word	0x20003660
 800a5c0:	2000383c 	.word	0x2000383c
 800a5c4:	20003658 	.word	0x20003658

0800a5c8 <generate_fly>:

void generate_fly(){
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b0f9      	sub	sp, #484	; 0x1e4
 800a5cc:	af00      	add	r7, sp, #0
	int hp,type;
	if((game_cnt-level_info.lastTime)>level_info.randTime){
 800a5ce:	4b54      	ldr	r3, [pc, #336]	; (800a720 <generate_fly+0x158>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b54      	ldr	r3, [pc, #336]	; (800a724 <generate_fly+0x15c>)
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	4b52      	ldr	r3, [pc, #328]	; (800a724 <generate_fly+0x15c>)
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	f340 809a 	ble.w	800a716 <generate_fly+0x14e>
		if(fly_num>MAX_FLY_IN_SCREEN)return;
 800a5e2:	4b51      	ldr	r3, [pc, #324]	; (800a728 <generate_fly+0x160>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	f300 8094 	bgt.w	800a714 <generate_fly+0x14c>
		srand(HAL_GetTick());
 800a5ec:	f7f6 fd96 	bl	800111c <HAL_GetTick>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f002 f90c 	bl	800c810 <srand>
		level_info.pos%=3;
 800a5f8:	4b4a      	ldr	r3, [pc, #296]	; (800a724 <generate_fly+0x15c>)
 800a5fa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a5fc:	4b4b      	ldr	r3, [pc, #300]	; (800a72c <generate_fly+0x164>)
 800a5fe:	fb83 3201 	smull	r3, r2, r3, r1
 800a602:	17cb      	asrs	r3, r1, #31
 800a604:	1ad2      	subs	r2, r2, r3
 800a606:	4613      	mov	r3, r2
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	4413      	add	r3, r2
 800a60c:	1aca      	subs	r2, r1, r3
 800a60e:	4b45      	ldr	r3, [pc, #276]	; (800a724 <generate_fly+0x15c>)
 800a610:	649a      	str	r2, [r3, #72]	; 0x48
		hp=rand()%(level_info.maxHP-level_info.minHP+1)+level_info.minHP;
 800a612:	f002 f921 	bl	800c858 <rand>
 800a616:	4602      	mov	r2, r0
 800a618:	4b42      	ldr	r3, [pc, #264]	; (800a724 <generate_fly+0x15c>)
 800a61a:	6919      	ldr	r1, [r3, #16]
 800a61c:	4b41      	ldr	r3, [pc, #260]	; (800a724 <generate_fly+0x15c>)
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	1acb      	subs	r3, r1, r3
 800a622:	3301      	adds	r3, #1
 800a624:	fb92 f1f3 	sdiv	r1, r2, r3
 800a628:	fb03 f301 	mul.w	r3, r3, r1
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	4b3d      	ldr	r3, [pc, #244]	; (800a724 <generate_fly+0x15c>)
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	4413      	add	r3, r2
 800a634:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		type=level_info.enemy_type[rand()%level_info.enemy_type_num];
 800a638:	f002 f90e 	bl	800c858 <rand>
 800a63c:	4602      	mov	r2, r0
 800a63e:	4b39      	ldr	r3, [pc, #228]	; (800a724 <generate_fly+0x15c>)
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	fb92 f1f3 	sdiv	r1, r2, r3
 800a646:	fb03 f301 	mul.w	r3, r3, r1
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	4a35      	ldr	r2, [pc, #212]	; (800a724 <generate_fly+0x15c>)
 800a64e:	3306      	adds	r3, #6
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		Fly fly=fly_factory(type); fly.hp=hp; fly.score*=fly.hp;
 800a65a:	1d3b      	adds	r3, r7, #4
 800a65c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff fb91 	bl	8009d88 <fly_factory>
 800a666:	1d3b      	adds	r3, r7, #4
 800a668:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800a66c:	609a      	str	r2, [r3, #8]
 800a66e:	1d3b      	adds	r3, r7, #4
 800a670:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a674:	1d3a      	adds	r2, r7, #4
 800a676:	6892      	ldr	r2, [r2, #8]
 800a678:	fb02 f203 	mul.w	r2, r2, r3
 800a67c:	1d3b      	adds	r3, r7, #4
 800a67e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		fly.x=rand()%80+level_info.pos*80;fly.y = SCREEN_TOP+10;
 800a682:	f002 f8e9 	bl	800c858 <rand>
 800a686:	4601      	mov	r1, r0
 800a688:	4b29      	ldr	r3, [pc, #164]	; (800a730 <generate_fly+0x168>)
 800a68a:	fb83 2301 	smull	r2, r3, r3, r1
 800a68e:	115a      	asrs	r2, r3, #5
 800a690:	17cb      	asrs	r3, r1, #31
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	1aca      	subs	r2, r1, r3
 800a69e:	4b21      	ldr	r3, [pc, #132]	; (800a724 <generate_fly+0x15c>)
 800a6a0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	441a      	add	r2, r3
 800a6ac:	1d3b      	adds	r3, r7, #4
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	1d3b      	adds	r3, r7, #4
 800a6b2:	2228      	movs	r2, #40	; 0x28
 800a6b4:	605a      	str	r2, [r3, #4]
		flys[fly_num++]=fly;
 800a6b6:	4b1c      	ldr	r3, [pc, #112]	; (800a728 <generate_fly+0x160>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	491a      	ldr	r1, [pc, #104]	; (800a728 <generate_fly+0x160>)
 800a6be:	600a      	str	r2, [r1, #0]
 800a6c0:	4a1c      	ldr	r2, [pc, #112]	; (800a734 <generate_fly+0x16c>)
 800a6c2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800a6c6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ca:	441a      	add	r2, r3
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f002 f886 	bl	800c7e8 <memcpy>
		level_info.randTime=level_info.minTime+rand()%(level_info.maxTime-level_info.minTime);
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <generate_fly+0x15c>)
 800a6de:	685c      	ldr	r4, [r3, #4]
 800a6e0:	f002 f8ba 	bl	800c858 <rand>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <generate_fly+0x15c>)
 800a6e8:	6819      	ldr	r1, [r3, #0]
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <generate_fly+0x15c>)
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	fb92 f1f3 	sdiv	r1, r2, r3
 800a6f4:	fb03 f301 	mul.w	r3, r3, r1
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	4423      	add	r3, r4
 800a6fc:	4a09      	ldr	r2, [pc, #36]	; (800a724 <generate_fly+0x15c>)
 800a6fe:	60d3      	str	r3, [r2, #12]
		level_info.lastTime=game_cnt;
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <generate_fly+0x158>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a07      	ldr	r2, [pc, #28]	; (800a724 <generate_fly+0x15c>)
 800a706:	6093      	str	r3, [r2, #8]
		level_info.pos++;
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <generate_fly+0x15c>)
 800a70a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70c:	3301      	adds	r3, #1
 800a70e:	4a05      	ldr	r2, [pc, #20]	; (800a724 <generate_fly+0x15c>)
 800a710:	6493      	str	r3, [r2, #72]	; 0x48
 800a712:	e000      	b.n	800a716 <generate_fly+0x14e>
		if(fly_num>MAX_FLY_IN_SCREEN)return;
 800a714:	bf00      	nop
	}
}
 800a716:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd90      	pop	{r4, r7, pc}
 800a71e:	bf00      	nop
 800a720:	20003614 	.word	0x20003614
 800a724:	200037f0 	.word	0x200037f0
 800a728:	20003658 	.word	0x20003658
 800a72c:	55555556 	.word	0x55555556
 800a730:	66666667 	.word	0x66666667
 800a734:	20001180 	.word	0x20001180

0800a738 <DrawMyLine>:
void DrawMyLine(int x1,int y1,int x2,int y2){
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
	x1=(int)((x1-paint.draw_ori_x)*paint.draw_size_x)+paint.draw_new_x;
 800a746:	4b4f      	ldr	r3, [pc, #316]	; (800a884 <DrawMyLine+0x14c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f6 fac2 	bl	8000cd8 <__aeabi_i2f>
 800a754:	4602      	mov	r2, r0
 800a756:	4b4b      	ldr	r3, [pc, #300]	; (800a884 <DrawMyLine+0x14c>)
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7f6 fb0f 	bl	8000d80 <__aeabi_fmul>
 800a762:	4603      	mov	r3, r0
 800a764:	4618      	mov	r0, r3
 800a766:	f7f6 fc5b 	bl	8001020 <__aeabi_f2iz>
 800a76a:	4602      	mov	r2, r0
 800a76c:	4b45      	ldr	r3, [pc, #276]	; (800a884 <DrawMyLine+0x14c>)
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	4413      	add	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
	y1=(int)((y1-paint.draw_ori_y)*paint.draw_size_y)+paint.draw_new_y;
 800a774:	4b43      	ldr	r3, [pc, #268]	; (800a884 <DrawMyLine+0x14c>)
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7f6 faab 	bl	8000cd8 <__aeabi_i2f>
 800a782:	4602      	mov	r2, r0
 800a784:	4b3f      	ldr	r3, [pc, #252]	; (800a884 <DrawMyLine+0x14c>)
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f7f6 faf8 	bl	8000d80 <__aeabi_fmul>
 800a790:	4603      	mov	r3, r0
 800a792:	4618      	mov	r0, r3
 800a794:	f7f6 fc44 	bl	8001020 <__aeabi_f2iz>
 800a798:	4602      	mov	r2, r0
 800a79a:	4b3a      	ldr	r3, [pc, #232]	; (800a884 <DrawMyLine+0x14c>)
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	4413      	add	r3, r2
 800a7a0:	60bb      	str	r3, [r7, #8]
	x2=(int)((x2-paint.draw_ori_x)*paint.draw_size_x)+paint.draw_new_x;
 800a7a2:	4b38      	ldr	r3, [pc, #224]	; (800a884 <DrawMyLine+0x14c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f6 fa94 	bl	8000cd8 <__aeabi_i2f>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	4b34      	ldr	r3, [pc, #208]	; (800a884 <DrawMyLine+0x14c>)
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f7f6 fae1 	bl	8000d80 <__aeabi_fmul>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f6 fc2d 	bl	8001020 <__aeabi_f2iz>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <DrawMyLine+0x14c>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	607b      	str	r3, [r7, #4]
	y2=(int)((y2-paint.draw_ori_y)*paint.draw_size_y)+paint.draw_new_y;
 800a7d0:	4b2c      	ldr	r3, [pc, #176]	; (800a884 <DrawMyLine+0x14c>)
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f6 fa7d 	bl	8000cd8 <__aeabi_i2f>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	4b28      	ldr	r3, [pc, #160]	; (800a884 <DrawMyLine+0x14c>)
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7f6 faca 	bl	8000d80 <__aeabi_fmul>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7f6 fc16 	bl	8001020 <__aeabi_f2iz>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	4b23      	ldr	r3, [pc, #140]	; (800a884 <DrawMyLine+0x14c>)
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	603b      	str	r3, [r7, #0]
	if(x1<=0)x1=0;else if(x1>=SCREEN_WIDTH)x1=SCREEN_WIDTH;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	dc02      	bgt.n	800a80a <DrawMyLine+0xd2>
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e004      	b.n	800a814 <DrawMyLine+0xdc>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2bef      	cmp	r3, #239	; 0xef
 800a80e:	dd01      	ble.n	800a814 <DrawMyLine+0xdc>
 800a810:	23f0      	movs	r3, #240	; 0xf0
 800a812:	60fb      	str	r3, [r7, #12]
	if(x2<=0)x2=0;else if(x2>=SCREEN_WIDTH)x2=SCREEN_WIDTH;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dc02      	bgt.n	800a820 <DrawMyLine+0xe8>
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	e004      	b.n	800a82a <DrawMyLine+0xf2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2bef      	cmp	r3, #239	; 0xef
 800a824:	dd01      	ble.n	800a82a <DrawMyLine+0xf2>
 800a826:	23f0      	movs	r3, #240	; 0xf0
 800a828:	607b      	str	r3, [r7, #4]
	if(y1<=0)y1=0;else if(y1>=SCREEN_HEIGHT)y1=SCREEN_HEIGHT;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dc02      	bgt.n	800a836 <DrawMyLine+0xfe>
 800a830:	2300      	movs	r3, #0
 800a832:	60bb      	str	r3, [r7, #8]
 800a834:	e006      	b.n	800a844 <DrawMyLine+0x10c>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a83c:	db02      	blt.n	800a844 <DrawMyLine+0x10c>
 800a83e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a842:	60bb      	str	r3, [r7, #8]
	if(y2<=0)y2=0;else if(y2>=SCREEN_HEIGHT)y2=SCREEN_HEIGHT;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	dc02      	bgt.n	800a850 <DrawMyLine+0x118>
 800a84a:	2300      	movs	r3, #0
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	e006      	b.n	800a85e <DrawMyLine+0x126>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a856:	db02      	blt.n	800a85e <DrawMyLine+0x126>
 800a858:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a85c:	603b      	str	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y2,paint.draw_color);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	b298      	uxth	r0, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	b299      	uxth	r1, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	b29a      	uxth	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	b29c      	uxth	r4, r3
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <DrawMyLine+0x14c>)
 800a870:	8b1b      	ldrh	r3, [r3, #24]
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4623      	mov	r3, r4
 800a876:	f7fd fc93 	bl	80081a0 <LCD_DrawLine>
}
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd90      	pop	{r4, r7, pc}
 800a882:	bf00      	nop
 800a884:	20001140 	.word	0x20001140

0800a888 <draw_fly>:

void draw_fly(int x,int y,float size_x,float size_y,uint16_t color){
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
	paint.draw_ori_x=120; paint.draw_ori_y=185;paint.draw_new_x=x;paint.draw_new_y=y;
 800a896:	4b72      	ldr	r3, [pc, #456]	; (800aa60 <draw_fly+0x1d8>)
 800a898:	2278      	movs	r2, #120	; 0x78
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	4b70      	ldr	r3, [pc, #448]	; (800aa60 <draw_fly+0x1d8>)
 800a89e:	22b9      	movs	r2, #185	; 0xb9
 800a8a0:	605a      	str	r2, [r3, #4]
 800a8a2:	4a6f      	ldr	r2, [pc, #444]	; (800aa60 <draw_fly+0x1d8>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6093      	str	r3, [r2, #8]
 800a8a8:	4a6d      	ldr	r2, [pc, #436]	; (800aa60 <draw_fly+0x1d8>)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	60d3      	str	r3, [r2, #12]
	paint.draw_size_x=size_x; paint.draw_size_y=size_y;
 800a8ae:	4a6c      	ldr	r2, [pc, #432]	; (800aa60 <draw_fly+0x1d8>)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6113      	str	r3, [r2, #16]
 800a8b4:	4a6a      	ldr	r2, [pc, #424]	; (800aa60 <draw_fly+0x1d8>)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6153      	str	r3, [r2, #20]
	paint.draw_color=color;
 800a8ba:	4a69      	ldr	r2, [pc, #420]	; (800aa60 <draw_fly+0x1d8>)
 800a8bc:	8b3b      	ldrh	r3, [r7, #24]
 800a8be:	8313      	strh	r3, [r2, #24]
	DrawMyLine(120, 80, 115, 85);
 800a8c0:	2355      	movs	r3, #85	; 0x55
 800a8c2:	2273      	movs	r2, #115	; 0x73
 800a8c4:	2150      	movs	r1, #80	; 0x50
 800a8c6:	2078      	movs	r0, #120	; 0x78
 800a8c8:	f7ff ff36 	bl	800a738 <DrawMyLine>
	DrawMyLine(115, 85, 110, 140);
 800a8cc:	238c      	movs	r3, #140	; 0x8c
 800a8ce:	226e      	movs	r2, #110	; 0x6e
 800a8d0:	2155      	movs	r1, #85	; 0x55
 800a8d2:	2073      	movs	r0, #115	; 0x73
 800a8d4:	f7ff ff30 	bl	800a738 <DrawMyLine>

	DrawMyLine(120, 80, 125, 85);
 800a8d8:	2355      	movs	r3, #85	; 0x55
 800a8da:	227d      	movs	r2, #125	; 0x7d
 800a8dc:	2150      	movs	r1, #80	; 0x50
 800a8de:	2078      	movs	r0, #120	; 0x78
 800a8e0:	f7ff ff2a 	bl	800a738 <DrawMyLine>
	DrawMyLine(125, 85, 130, 140);
 800a8e4:	238c      	movs	r3, #140	; 0x8c
 800a8e6:	2282      	movs	r2, #130	; 0x82
 800a8e8:	2155      	movs	r1, #85	; 0x55
 800a8ea:	207d      	movs	r0, #125	; 0x7d
 800a8ec:	f7ff ff24 	bl	800a738 <DrawMyLine>

	DrawMyLine(110, 140, 80, 155);
 800a8f0:	239b      	movs	r3, #155	; 0x9b
 800a8f2:	2250      	movs	r2, #80	; 0x50
 800a8f4:	218c      	movs	r1, #140	; 0x8c
 800a8f6:	206e      	movs	r0, #110	; 0x6e
 800a8f8:	f7ff ff1e 	bl	800a738 <DrawMyLine>
	DrawMyLine(130, 140, 160, 155);
 800a8fc:	239b      	movs	r3, #155	; 0x9b
 800a8fe:	22a0      	movs	r2, #160	; 0xa0
 800a900:	218c      	movs	r1, #140	; 0x8c
 800a902:	2082      	movs	r0, #130	; 0x82
 800a904:	f7ff ff18 	bl	800a738 <DrawMyLine>

	DrawMyLine(80, 155, 105, 150);
 800a908:	2396      	movs	r3, #150	; 0x96
 800a90a:	2269      	movs	r2, #105	; 0x69
 800a90c:	219b      	movs	r1, #155	; 0x9b
 800a90e:	2050      	movs	r0, #80	; 0x50
 800a910:	f7ff ff12 	bl	800a738 <DrawMyLine>
	DrawMyLine(160, 155, 135, 150);
 800a914:	2396      	movs	r3, #150	; 0x96
 800a916:	2287      	movs	r2, #135	; 0x87
 800a918:	219b      	movs	r1, #155	; 0x9b
 800a91a:	20a0      	movs	r0, #160	; 0xa0
 800a91c:	f7ff ff0c 	bl	800a738 <DrawMyLine>

	DrawMyLine(105, 150, 50, 185);
 800a920:	23b9      	movs	r3, #185	; 0xb9
 800a922:	2232      	movs	r2, #50	; 0x32
 800a924:	2196      	movs	r1, #150	; 0x96
 800a926:	2069      	movs	r0, #105	; 0x69
 800a928:	f7ff ff06 	bl	800a738 <DrawMyLine>
	DrawMyLine(135, 150, 190, 185);
 800a92c:	23b9      	movs	r3, #185	; 0xb9
 800a92e:	22be      	movs	r2, #190	; 0xbe
 800a930:	2196      	movs	r1, #150	; 0x96
 800a932:	2087      	movs	r0, #135	; 0x87
 800a934:	f7ff ff00 	bl	800a738 <DrawMyLine>

	DrawMyLine(50, 185, 45, 205);
 800a938:	23cd      	movs	r3, #205	; 0xcd
 800a93a:	222d      	movs	r2, #45	; 0x2d
 800a93c:	21b9      	movs	r1, #185	; 0xb9
 800a93e:	2032      	movs	r0, #50	; 0x32
 800a940:	f7ff fefa 	bl	800a738 <DrawMyLine>
	DrawMyLine(190, 185, 195, 205);
 800a944:	23cd      	movs	r3, #205	; 0xcd
 800a946:	22c3      	movs	r2, #195	; 0xc3
 800a948:	21b9      	movs	r1, #185	; 0xb9
 800a94a:	20be      	movs	r0, #190	; 0xbe
 800a94c:	f7ff fef4 	bl	800a738 <DrawMyLine>

	DrawMyLine(45, 205, 105, 190);
 800a950:	23be      	movs	r3, #190	; 0xbe
 800a952:	2269      	movs	r2, #105	; 0x69
 800a954:	21cd      	movs	r1, #205	; 0xcd
 800a956:	202d      	movs	r0, #45	; 0x2d
 800a958:	f7ff feee 	bl	800a738 <DrawMyLine>
	DrawMyLine(195, 205, 135, 190);
 800a95c:	23be      	movs	r3, #190	; 0xbe
 800a95e:	2287      	movs	r2, #135	; 0x87
 800a960:	21cd      	movs	r1, #205	; 0xcd
 800a962:	20c3      	movs	r0, #195	; 0xc3
 800a964:	f7ff fee8 	bl	800a738 <DrawMyLine>

	DrawMyLine(105, 190, 105, 200);
 800a968:	23c8      	movs	r3, #200	; 0xc8
 800a96a:	2269      	movs	r2, #105	; 0x69
 800a96c:	21be      	movs	r1, #190	; 0xbe
 800a96e:	2069      	movs	r0, #105	; 0x69
 800a970:	f7ff fee2 	bl	800a738 <DrawMyLine>
	DrawMyLine(135, 190, 135, 200);
 800a974:	23c8      	movs	r3, #200	; 0xc8
 800a976:	2287      	movs	r2, #135	; 0x87
 800a978:	21be      	movs	r1, #190	; 0xbe
 800a97a:	2087      	movs	r0, #135	; 0x87
 800a97c:	f7ff fedc 	bl	800a738 <DrawMyLine>

	DrawMyLine(105, 200, 70, 220);
 800a980:	23dc      	movs	r3, #220	; 0xdc
 800a982:	2246      	movs	r2, #70	; 0x46
 800a984:	21c8      	movs	r1, #200	; 0xc8
 800a986:	2069      	movs	r0, #105	; 0x69
 800a988:	f7ff fed6 	bl	800a738 <DrawMyLine>
	DrawMyLine(135, 200, 170, 220);
 800a98c:	23dc      	movs	r3, #220	; 0xdc
 800a98e:	22aa      	movs	r2, #170	; 0xaa
 800a990:	21c8      	movs	r1, #200	; 0xc8
 800a992:	2087      	movs	r0, #135	; 0x87
 800a994:	f7ff fed0 	bl	800a738 <DrawMyLine>

	DrawMyLine(70, 220, 75, 230);
 800a998:	23e6      	movs	r3, #230	; 0xe6
 800a99a:	224b      	movs	r2, #75	; 0x4b
 800a99c:	21dc      	movs	r1, #220	; 0xdc
 800a99e:	2046      	movs	r0, #70	; 0x46
 800a9a0:	f7ff feca 	bl	800a738 <DrawMyLine>
	DrawMyLine(170, 220, 165, 230);
 800a9a4:	23e6      	movs	r3, #230	; 0xe6
 800a9a6:	22a5      	movs	r2, #165	; 0xa5
 800a9a8:	21dc      	movs	r1, #220	; 0xdc
 800a9aa:	20aa      	movs	r0, #170	; 0xaa
 800a9ac:	f7ff fec4 	bl	800a738 <DrawMyLine>

	DrawMyLine(75, 230, 105, 225);
 800a9b0:	23e1      	movs	r3, #225	; 0xe1
 800a9b2:	2269      	movs	r2, #105	; 0x69
 800a9b4:	21e6      	movs	r1, #230	; 0xe6
 800a9b6:	204b      	movs	r0, #75	; 0x4b
 800a9b8:	f7ff febe 	bl	800a738 <DrawMyLine>
	DrawMyLine(165, 230, 135, 225);
 800a9bc:	23e1      	movs	r3, #225	; 0xe1
 800a9be:	2287      	movs	r2, #135	; 0x87
 800a9c0:	21e6      	movs	r1, #230	; 0xe6
 800a9c2:	20a5      	movs	r0, #165	; 0xa5
 800a9c4:	f7ff feb8 	bl	800a738 <DrawMyLine>

	DrawMyLine(107, 185, 107, 235);
 800a9c8:	23eb      	movs	r3, #235	; 0xeb
 800a9ca:	226b      	movs	r2, #107	; 0x6b
 800a9cc:	21b9      	movs	r1, #185	; 0xb9
 800a9ce:	206b      	movs	r0, #107	; 0x6b
 800a9d0:	f7ff feb2 	bl	800a738 <DrawMyLine>
	DrawMyLine(133, 185, 133, 235);
 800a9d4:	23eb      	movs	r3, #235	; 0xeb
 800a9d6:	2285      	movs	r2, #133	; 0x85
 800a9d8:	21b9      	movs	r1, #185	; 0xb9
 800a9da:	2085      	movs	r0, #133	; 0x85
 800a9dc:	f7ff feac 	bl	800a738 <DrawMyLine>

	DrawMyLine(115, 185, 115, 235);
 800a9e0:	23eb      	movs	r3, #235	; 0xeb
 800a9e2:	2273      	movs	r2, #115	; 0x73
 800a9e4:	21b9      	movs	r1, #185	; 0xb9
 800a9e6:	2073      	movs	r0, #115	; 0x73
 800a9e8:	f7ff fea6 	bl	800a738 <DrawMyLine>
	DrawMyLine(125, 185, 125, 235);
 800a9ec:	23eb      	movs	r3, #235	; 0xeb
 800a9ee:	227d      	movs	r2, #125	; 0x7d
 800a9f0:	21b9      	movs	r1, #185	; 0xb9
 800a9f2:	207d      	movs	r0, #125	; 0x7d
 800a9f4:	f7ff fea0 	bl	800a738 <DrawMyLine>

	DrawMyLine(107, 185, 111, 175);
 800a9f8:	23af      	movs	r3, #175	; 0xaf
 800a9fa:	226f      	movs	r2, #111	; 0x6f
 800a9fc:	21b9      	movs	r1, #185	; 0xb9
 800a9fe:	206b      	movs	r0, #107	; 0x6b
 800aa00:	f7ff fe9a 	bl	800a738 <DrawMyLine>
	DrawMyLine(111, 175, 115, 185);
 800aa04:	23b9      	movs	r3, #185	; 0xb9
 800aa06:	2273      	movs	r2, #115	; 0x73
 800aa08:	21af      	movs	r1, #175	; 0xaf
 800aa0a:	206f      	movs	r0, #111	; 0x6f
 800aa0c:	f7ff fe94 	bl	800a738 <DrawMyLine>
	DrawMyLine(133, 185, 129, 175);
 800aa10:	23af      	movs	r3, #175	; 0xaf
 800aa12:	2281      	movs	r2, #129	; 0x81
 800aa14:	21b9      	movs	r1, #185	; 0xb9
 800aa16:	2085      	movs	r0, #133	; 0x85
 800aa18:	f7ff fe8e 	bl	800a738 <DrawMyLine>
	DrawMyLine(129, 175, 125, 185);
 800aa1c:	23b9      	movs	r3, #185	; 0xb9
 800aa1e:	227d      	movs	r2, #125	; 0x7d
 800aa20:	21af      	movs	r1, #175	; 0xaf
 800aa22:	2081      	movs	r0, #129	; 0x81
 800aa24:	f7ff fe88 	bl	800a738 <DrawMyLine>

	DrawMyLine(107, 235, 111, 245);
 800aa28:	23f5      	movs	r3, #245	; 0xf5
 800aa2a:	226f      	movs	r2, #111	; 0x6f
 800aa2c:	21eb      	movs	r1, #235	; 0xeb
 800aa2e:	206b      	movs	r0, #107	; 0x6b
 800aa30:	f7ff fe82 	bl	800a738 <DrawMyLine>
	DrawMyLine(111, 245, 115, 235);
 800aa34:	23eb      	movs	r3, #235	; 0xeb
 800aa36:	2273      	movs	r2, #115	; 0x73
 800aa38:	21f5      	movs	r1, #245	; 0xf5
 800aa3a:	206f      	movs	r0, #111	; 0x6f
 800aa3c:	f7ff fe7c 	bl	800a738 <DrawMyLine>
	DrawMyLine(133, 235, 129, 245);
 800aa40:	23f5      	movs	r3, #245	; 0xf5
 800aa42:	2281      	movs	r2, #129	; 0x81
 800aa44:	21eb      	movs	r1, #235	; 0xeb
 800aa46:	2085      	movs	r0, #133	; 0x85
 800aa48:	f7ff fe76 	bl	800a738 <DrawMyLine>
	DrawMyLine(129, 245, 125, 235);
 800aa4c:	23eb      	movs	r3, #235	; 0xeb
 800aa4e:	227d      	movs	r2, #125	; 0x7d
 800aa50:	21f5      	movs	r1, #245	; 0xf5
 800aa52:	2081      	movs	r0, #129	; 0x81
 800aa54:	f7ff fe70 	bl	800a738 <DrawMyLine>
}
 800aa58:	bf00      	nop
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20001140 	.word	0x20001140

0800aa64 <draw_bullet>:


	DrawMyLine(75, 230,165,230);*/

}
void draw_bullet(int x,int y,uint16_t color){
 800aa64:	b590      	push	{r4, r7, lr}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
	LCD_Fill(x-2, y-2, x+2, y+2,color);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	3b02      	subs	r3, #2
 800aa78:	b298      	uxth	r0, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b02      	subs	r3, #2
 800aa80:	b299      	uxth	r1, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3302      	adds	r3, #2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3302      	adds	r3, #2
 800aa90:	b29c      	uxth	r4, r3
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4623      	mov	r3, r4
 800aa98:	f7fd faf6 	bl	8008088 <LCD_Fill>
}
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <draw_screen>:
void draw_screen(){
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b089      	sub	sp, #36	; 0x24
 800aaa8:	af02      	add	r7, sp, #8
	draw_fly(flys[0].x,flys[0].y,0.22f,0.22f,BLACK);
 800aaaa:	4b7d      	ldr	r3, [pc, #500]	; (800aca0 <draw_screen+0x1fc>)
 800aaac:	6818      	ldr	r0, [r3, #0]
 800aaae:	4b7c      	ldr	r3, [pc, #496]	; (800aca0 <draw_screen+0x1fc>)
 800aab0:	6859      	ldr	r1, [r3, #4]
 800aab2:	2300      	movs	r3, #0
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	4b7b      	ldr	r3, [pc, #492]	; (800aca4 <draw_screen+0x200>)
 800aab8:	4a7a      	ldr	r2, [pc, #488]	; (800aca4 <draw_screen+0x200>)
 800aaba:	f7ff fee5 	bl	800a888 <draw_fly>
	LCD_Fill(flys[0].x-4,flys[0].y-4,flys[0].x+4,flys[0].y+4,RED);
 800aabe:	4b78      	ldr	r3, [pc, #480]	; (800aca0 <draw_screen+0x1fc>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	3b04      	subs	r3, #4
 800aac6:	b298      	uxth	r0, r3
 800aac8:	4b75      	ldr	r3, [pc, #468]	; (800aca0 <draw_screen+0x1fc>)
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	3b04      	subs	r3, #4
 800aad0:	b299      	uxth	r1, r3
 800aad2:	4b73      	ldr	r3, [pc, #460]	; (800aca0 <draw_screen+0x1fc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	3304      	adds	r3, #4
 800aada:	b29a      	uxth	r2, r3
 800aadc:	4b70      	ldr	r3, [pc, #448]	; (800aca0 <draw_screen+0x1fc>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	3304      	adds	r3, #4
 800aae4:	b29c      	uxth	r4, r3
 800aae6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4623      	mov	r3, r4
 800aaee:	f7fd facb 	bl	8008088 <LCD_Fill>
	for(int i=1;i<fly_num;i++){
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	e065      	b.n	800abc4 <draw_screen+0x120>
		uint16_t color =GRAY;
 800aaf8:	f248 4330 	movw	r3, #33840	; 0x8430
 800aafc:	827b      	strh	r3, [r7, #18]
		if(flys[i].hp==5)color=RED;
 800aafe:	4a68      	ldr	r2, [pc, #416]	; (800aca0 <draw_screen+0x1fc>)
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab06:	fb01 f303 	mul.w	r3, r1, r3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b05      	cmp	r3, #5
 800ab12:	d103      	bne.n	800ab1c <draw_screen+0x78>
 800ab14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ab18:	827b      	strh	r3, [r7, #18]
 800ab1a:	e039      	b.n	800ab90 <draw_screen+0xec>
		else if(flys[i].hp==4)color=MAGENTA;
 800ab1c:	4a60      	ldr	r2, [pc, #384]	; (800aca0 <draw_screen+0x1fc>)
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d103      	bne.n	800ab3a <draw_screen+0x96>
 800ab32:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800ab36:	827b      	strh	r3, [r7, #18]
 800ab38:	e02a      	b.n	800ab90 <draw_screen+0xec>
		else if(flys[i].hp==3)color=BLUE;
 800ab3a:	4a59      	ldr	r2, [pc, #356]	; (800aca0 <draw_screen+0x1fc>)
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab42:	fb01 f303 	mul.w	r3, r1, r3
 800ab46:	4413      	add	r3, r2
 800ab48:	3308      	adds	r3, #8
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d102      	bne.n	800ab56 <draw_screen+0xb2>
 800ab50:	231f      	movs	r3, #31
 800ab52:	827b      	strh	r3, [r7, #18]
 800ab54:	e01c      	b.n	800ab90 <draw_screen+0xec>
		else if(flys[i].hp==2)color=LIGHTBLUE;
 800ab56:	4a52      	ldr	r2, [pc, #328]	; (800aca0 <draw_screen+0x1fc>)
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	3308      	adds	r3, #8
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d103      	bne.n	800ab74 <draw_screen+0xd0>
 800ab6c:	f647 537c 	movw	r3, #32124	; 0x7d7c
 800ab70:	827b      	strh	r3, [r7, #18]
 800ab72:	e00d      	b.n	800ab90 <draw_screen+0xec>
		else if(flys[i].hp==1)color=GRAY;
 800ab74:	4a4a      	ldr	r2, [pc, #296]	; (800aca0 <draw_screen+0x1fc>)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	4413      	add	r3, r2
 800ab82:	3308      	adds	r3, #8
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d102      	bne.n	800ab90 <draw_screen+0xec>
 800ab8a:	f248 4330 	movw	r3, #33840	; 0x8430
 800ab8e:	827b      	strh	r3, [r7, #18]
        draw_fly(flys[i].x,flys[i].y,0.2f,-0.2f,color);
 800ab90:	4a43      	ldr	r2, [pc, #268]	; (800aca0 <draw_screen+0x1fc>)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	4a3f      	ldr	r2, [pc, #252]	; (800aca0 <draw_screen+0x1fc>)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800aba8:	fb01 f303 	mul.w	r3, r1, r3
 800abac:	4413      	add	r3, r2
 800abae:	3304      	adds	r3, #4
 800abb0:	6819      	ldr	r1, [r3, #0]
 800abb2:	8a7b      	ldrh	r3, [r7, #18]
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	4b3c      	ldr	r3, [pc, #240]	; (800aca8 <draw_screen+0x204>)
 800abb8:	4a3c      	ldr	r2, [pc, #240]	; (800acac <draw_screen+0x208>)
 800abba:	f7ff fe65 	bl	800a888 <draw_fly>
	for(int i=1;i<fly_num;i++){
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	3301      	adds	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	4b3a      	ldr	r3, [pc, #232]	; (800acb0 <draw_screen+0x20c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	429a      	cmp	r2, r3
 800abcc:	db94      	blt.n	800aaf8 <draw_screen+0x54>
		//draw_fly_simple(flys[i].x,flys[i].y,0.2f,-0.2f,color);
	}
	for(int i=0;i<bul_num_e;i++){
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e035      	b.n	800ac40 <draw_screen+0x19c>
		uint16_t color=BLACK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	817b      	strh	r3, [r7, #10]
		if(enemy_bul[i].power==1)color =GRAYBLUE;
 800abd8:	4a36      	ldr	r2, [pc, #216]	; (800acb4 <draw_screen+0x210>)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	015b      	lsls	r3, r3, #5
 800abde:	4413      	add	r3, r2
 800abe0:	3310      	adds	r3, #16
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d103      	bne.n	800abf0 <draw_screen+0x14c>
 800abe8:	f245 4358 	movw	r3, #21592	; 0x5458
 800abec:	817b      	strh	r3, [r7, #10]
 800abee:	e015      	b.n	800ac1c <draw_screen+0x178>
		else if(enemy_bul[i].power==2)color =BLUE;
 800abf0:	4a30      	ldr	r2, [pc, #192]	; (800acb4 <draw_screen+0x210>)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	015b      	lsls	r3, r3, #5
 800abf6:	4413      	add	r3, r2
 800abf8:	3310      	adds	r3, #16
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d102      	bne.n	800ac06 <draw_screen+0x162>
 800ac00:	231f      	movs	r3, #31
 800ac02:	817b      	strh	r3, [r7, #10]
 800ac04:	e00a      	b.n	800ac1c <draw_screen+0x178>
		else if(enemy_bul[i].power==3)color =RED;
 800ac06:	4a2b      	ldr	r2, [pc, #172]	; (800acb4 <draw_screen+0x210>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	015b      	lsls	r3, r3, #5
 800ac0c:	4413      	add	r3, r2
 800ac0e:	3310      	adds	r3, #16
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d102      	bne.n	800ac1c <draw_screen+0x178>
 800ac16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ac1a:	817b      	strh	r3, [r7, #10]
        draw_bullet(enemy_bul[i].x,enemy_bul[i].y,color);
 800ac1c:	4a25      	ldr	r2, [pc, #148]	; (800acb4 <draw_screen+0x210>)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	015b      	lsls	r3, r3, #5
 800ac22:	4413      	add	r3, r2
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	4a23      	ldr	r2, [pc, #140]	; (800acb4 <draw_screen+0x210>)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	015b      	lsls	r3, r3, #5
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3304      	adds	r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	897a      	ldrh	r2, [r7, #10]
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7ff ff15 	bl	800aa64 <draw_bullet>
	for(int i=0;i<bul_num_e;i++){
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <draw_screen+0x214>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	dbc4      	blt.n	800abd4 <draw_screen+0x130>
	}
	for(int i=0;i<bul_num_h;i++){
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	e01e      	b.n	800ac8e <draw_screen+0x1ea>
		uint16_t color=BLACK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	807b      	strh	r3, [r7, #2]
		if(hero_bul[i].power==3){
 800ac54:	4a19      	ldr	r2, [pc, #100]	; (800acbc <draw_screen+0x218>)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	015b      	lsls	r3, r3, #5
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d102      	bne.n	800ac6a <draw_screen+0x1c6>
			color=RED;
 800ac64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ac68:	807b      	strh	r3, [r7, #2]
		}
        draw_bullet(hero_bul[i].x,hero_bul[i].y,color);
 800ac6a:	4a14      	ldr	r2, [pc, #80]	; (800acbc <draw_screen+0x218>)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	015b      	lsls	r3, r3, #5
 800ac70:	4413      	add	r3, r2
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	4a11      	ldr	r2, [pc, #68]	; (800acbc <draw_screen+0x218>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	015b      	lsls	r3, r3, #5
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	887a      	ldrh	r2, [r7, #2]
 800ac82:	4619      	mov	r1, r3
 800ac84:	f7ff feee 	bl	800aa64 <draw_bullet>
	for(int i=0;i<bul_num_h;i++){
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	607b      	str	r3, [r7, #4]
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <draw_screen+0x21c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	dbdb      	blt.n	800ac50 <draw_screen+0x1ac>
	}
}
 800ac98:	bf00      	nop
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}
 800aca0:	20001180 	.word	0x20001180
 800aca4:	3e6147ae 	.word	0x3e6147ae
 800aca8:	be4ccccd 	.word	0xbe4ccccd
 800acac:	3e4ccccd 	.word	0x3e4ccccd
 800acb0:	20003658 	.word	0x20003658
 800acb4:	2000383c 	.word	0x2000383c
 800acb8:	20003660 	.word	0x20003660
 800acbc:	200004c0 	.word	0x200004c0
 800acc0:	200053bc 	.word	0x200053bc

0800acc4 <clear_screen>:
void clear_screen(){
 800acc4:	b590      	push	{r4, r7, lr}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af02      	add	r7, sp, #8
    for(int i=0;i<bul_num_e;i++){
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e012      	b.n	800acf6 <clear_screen+0x32>
        draw_bullet(enemy_bul[i].x,enemy_bul[i].y,bg_color);
 800acd0:	4a3f      	ldr	r2, [pc, #252]	; (800add0 <clear_screen+0x10c>)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	015b      	lsls	r3, r3, #5
 800acd6:	4413      	add	r3, r2
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	4a3d      	ldr	r2, [pc, #244]	; (800add0 <clear_screen+0x10c>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	015b      	lsls	r3, r3, #5
 800ace0:	4413      	add	r3, r2
 800ace2:	3304      	adds	r3, #4
 800ace4:	6819      	ldr	r1, [r3, #0]
 800ace6:	4b3b      	ldr	r3, [pc, #236]	; (800add4 <clear_screen+0x110>)
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f7ff feba 	bl	800aa64 <draw_bullet>
    for(int i=0;i<bul_num_e;i++){
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3301      	adds	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	4b38      	ldr	r3, [pc, #224]	; (800add8 <clear_screen+0x114>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	dbe7      	blt.n	800acd0 <clear_screen+0xc>
	}
	for(int i=0;i<bul_num_h;i++){
 800ad00:	2300      	movs	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]
 800ad04:	e012      	b.n	800ad2c <clear_screen+0x68>
        draw_bullet(hero_bul[i].x,hero_bul[i].y,bg_color);
 800ad06:	4a35      	ldr	r2, [pc, #212]	; (800addc <clear_screen+0x118>)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	015b      	lsls	r3, r3, #5
 800ad0c:	4413      	add	r3, r2
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	4a32      	ldr	r2, [pc, #200]	; (800addc <clear_screen+0x118>)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	015b      	lsls	r3, r3, #5
 800ad16:	4413      	add	r3, r2
 800ad18:	3304      	adds	r3, #4
 800ad1a:	6819      	ldr	r1, [r3, #0]
 800ad1c:	4b2d      	ldr	r3, [pc, #180]	; (800add4 <clear_screen+0x110>)
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	461a      	mov	r2, r3
 800ad22:	f7ff fe9f 	bl	800aa64 <draw_bullet>
	for(int i=0;i<bul_num_h;i++){
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60bb      	str	r3, [r7, #8]
 800ad2c:	4b2c      	ldr	r3, [pc, #176]	; (800ade0 <clear_screen+0x11c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	dbe7      	blt.n	800ad06 <clear_screen+0x42>
	}

	draw_fly(flys[0].x,flys[0].y,0.22f,0.22f,bg_color);
 800ad36:	4b2b      	ldr	r3, [pc, #172]	; (800ade4 <clear_screen+0x120>)
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	4b2a      	ldr	r3, [pc, #168]	; (800ade4 <clear_screen+0x120>)
 800ad3c:	6859      	ldr	r1, [r3, #4]
 800ad3e:	4b25      	ldr	r3, [pc, #148]	; (800add4 <clear_screen+0x110>)
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	4b28      	ldr	r3, [pc, #160]	; (800ade8 <clear_screen+0x124>)
 800ad46:	4a28      	ldr	r2, [pc, #160]	; (800ade8 <clear_screen+0x124>)
 800ad48:	f7ff fd9e 	bl	800a888 <draw_fly>
	LCD_Fill(flys[0].x-4,flys[0].y-4,flys[0].x+4,flys[0].y+4,bg_color);
 800ad4c:	4b25      	ldr	r3, [pc, #148]	; (800ade4 <clear_screen+0x120>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b04      	subs	r3, #4
 800ad54:	b298      	uxth	r0, r3
 800ad56:	4b23      	ldr	r3, [pc, #140]	; (800ade4 <clear_screen+0x120>)
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	3b04      	subs	r3, #4
 800ad5e:	b299      	uxth	r1, r3
 800ad60:	4b20      	ldr	r3, [pc, #128]	; (800ade4 <clear_screen+0x120>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	3304      	adds	r3, #4
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <clear_screen+0x120>)
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	3304      	adds	r3, #4
 800ad72:	b29c      	uxth	r4, r3
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <clear_screen+0x110>)
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4623      	mov	r3, r4
 800ad7c:	f7fd f984 	bl	8008088 <LCD_Fill>
	for(int i=1;i<fly_num;i++){
 800ad80:	2301      	movs	r3, #1
 800ad82:	607b      	str	r3, [r7, #4]
 800ad84:	e01a      	b.n	800adbc <clear_screen+0xf8>
        draw_fly(flys[i].x,flys[i].y,0.2f,-0.2f,bg_color);
 800ad86:	4a17      	ldr	r2, [pc, #92]	; (800ade4 <clear_screen+0x120>)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ad8e:	fb01 f303 	mul.w	r3, r1, r3
 800ad92:	4413      	add	r3, r2
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	4a13      	ldr	r2, [pc, #76]	; (800ade4 <clear_screen+0x120>)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ad9e:	fb01 f303 	mul.w	r3, r1, r3
 800ada2:	4413      	add	r3, r2
 800ada4:	3304      	adds	r3, #4
 800ada6:	6819      	ldr	r1, [r3, #0]
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <clear_screen+0x110>)
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <clear_screen+0x128>)
 800adb0:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <clear_screen+0x12c>)
 800adb2:	f7ff fd69 	bl	800a888 <draw_fly>
	for(int i=1;i<fly_num;i++){
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3301      	adds	r3, #1
 800adba:	607b      	str	r3, [r7, #4]
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <clear_screen+0x130>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	dbdf      	blt.n	800ad86 <clear_screen+0xc2>
        //draw_fly_simple(flys[i].x,flys[i].y,0.2f,-0.2f,bg_color);
	}
}
 800adc6:	bf00      	nop
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}
 800adce:	bf00      	nop
 800add0:	2000383c 	.word	0x2000383c
 800add4:	200004bc 	.word	0x200004bc
 800add8:	20003660 	.word	0x20003660
 800addc:	200004c0 	.word	0x200004c0
 800ade0:	200053bc 	.word	0x200053bc
 800ade4:	20001180 	.word	0x20001180
 800ade8:	3e6147ae 	.word	0x3e6147ae
 800adec:	be4ccccd 	.word	0xbe4ccccd
 800adf0:	3e4ccccd 	.word	0x3e4ccccd
 800adf4:	20003658 	.word	0x20003658

0800adf8 <control>:

void control(){
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
    if(key_a==1 && key_c==0)move_state=1;// 1 left ,2 right
 800adfc:	4b14      	ldr	r3, [pc, #80]	; (800ae50 <control+0x58>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d107      	bne.n	800ae14 <control+0x1c>
 800ae04:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <control+0x5c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <control+0x1c>
 800ae0c:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <control+0x60>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	e00e      	b.n	800ae32 <control+0x3a>
    else if(key_c==1 && key_a==0)move_state=2;
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <control+0x5c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d107      	bne.n	800ae2c <control+0x34>
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <control+0x58>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <control+0x34>
 800ae24:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <control+0x60>)
 800ae26:	2202      	movs	r2, #2
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	e002      	b.n	800ae32 <control+0x3a>
    else move_state=0;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <control+0x60>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
    generate_fly();
 800ae32:	f7ff fbc9 	bl	800a5c8 <generate_fly>
    generate_bullet();
 800ae36:	f7ff fa73 	bl	800a320 <generate_bullet>
    move(move_state);
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <control+0x60>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe faa0 	bl	8009384 <move>
    estimate();
 800ae44:	f7fd fe30 	bl	8008aa8 <estimate>
    change_level();
 800ae48:	f000 feea 	bl	800bc20 <change_level>
}
 800ae4c:	bf00      	nop
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20000490 	.word	0x20000490
 800ae54:	20000498 	.word	0x20000498
 800ae58:	20003664 	.word	0x20003664

0800ae5c <BossControl>:
void BossControl(){
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
    if(key_a==1 && key_c==0)move_state=1;// 1 left ,2 right
 800ae60:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <BossControl+0x58>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d107      	bne.n	800ae78 <BossControl+0x1c>
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <BossControl+0x5c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <BossControl+0x1c>
 800ae70:	4b12      	ldr	r3, [pc, #72]	; (800aebc <BossControl+0x60>)
 800ae72:	2201      	movs	r2, #1
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	e00e      	b.n	800ae96 <BossControl+0x3a>
    else if(key_c==1 && key_a==0)move_state=2;
 800ae78:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <BossControl+0x5c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d107      	bne.n	800ae90 <BossControl+0x34>
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <BossControl+0x58>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d103      	bne.n	800ae90 <BossControl+0x34>
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <BossControl+0x60>)
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e002      	b.n	800ae96 <BossControl+0x3a>
    else move_state=0;
 800ae90:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <BossControl+0x60>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
    BossAction();
 800ae96:	f000 f97b 	bl	800b190 <BossAction>
    generate_bullet();
 800ae9a:	f7ff fa41 	bl	800a320 <generate_bullet>
    move(move_state);
 800ae9e:	4b07      	ldr	r3, [pc, #28]	; (800aebc <BossControl+0x60>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe fa6e 	bl	8009384 <move>
    estimate();
 800aea8:	f7fd fdfe 	bl	8008aa8 <estimate>
    estimateBoss();
 800aeac:	f000 f894 	bl	800afd8 <estimateBoss>
}
 800aeb0:	bf00      	nop
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	20000490 	.word	0x20000490
 800aeb8:	20000498 	.word	0x20000498
 800aebc:	20003664 	.word	0x20003664

0800aec0 <isHitBoss>:
int isHitBoss(int x,int y){
 800aec0:	b590      	push	{r4, r7, lr}
 800aec2:	b08b      	sub	sp, #44	; 0x2c
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
	int x1=boss.x,x2=boss.x-60,x3=boss.x,x4=boss.x+60;
 800aeca:	4b42      	ldr	r3, [pc, #264]	; (800afd4 <isHitBoss+0x114>)
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	627b      	str	r3, [r7, #36]	; 0x24
 800aed0:	4b40      	ldr	r3, [pc, #256]	; (800afd4 <isHitBoss+0x114>)
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	3b3c      	subs	r3, #60	; 0x3c
 800aed6:	623b      	str	r3, [r7, #32]
 800aed8:	4b3e      	ldr	r3, [pc, #248]	; (800afd4 <isHitBoss+0x114>)
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	61fb      	str	r3, [r7, #28]
 800aede:	4b3d      	ldr	r3, [pc, #244]	; (800afd4 <isHitBoss+0x114>)
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	333c      	adds	r3, #60	; 0x3c
 800aee4:	61bb      	str	r3, [r7, #24]
	int y1=boss.y-30,y2=boss.y,y3=boss.y+30,y4=boss.y;
 800aee6:	4b3b      	ldr	r3, [pc, #236]	; (800afd4 <isHitBoss+0x114>)
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	3b1e      	subs	r3, #30
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	4b39      	ldr	r3, [pc, #228]	; (800afd4 <isHitBoss+0x114>)
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	4b37      	ldr	r3, [pc, #220]	; (800afd4 <isHitBoss+0x114>)
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	331e      	adds	r3, #30
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	4b35      	ldr	r3, [pc, #212]	; (800afd4 <isHitBoss+0x114>)
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	60bb      	str	r3, [r7, #8]
	if((boss.x-x)*(boss.x-x)+(boss.y-y)*(boss.y-y)<15*15){
 800af02:	4b34      	ldr	r3, [pc, #208]	; (800afd4 <isHitBoss+0x114>)
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	4a32      	ldr	r2, [pc, #200]	; (800afd4 <isHitBoss+0x114>)
 800af0c:	6911      	ldr	r1, [r2, #16]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	1a8a      	subs	r2, r1, r2
 800af12:	fb02 f203 	mul.w	r2, r2, r3
 800af16:	4b2f      	ldr	r3, [pc, #188]	; (800afd4 <isHitBoss+0x114>)
 800af18:	6959      	ldr	r1, [r3, #20]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	1acb      	subs	r3, r1, r3
 800af1e:	492d      	ldr	r1, [pc, #180]	; (800afd4 <isHitBoss+0x114>)
 800af20:	6948      	ldr	r0, [r1, #20]
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	1a41      	subs	r1, r0, r1
 800af26:	fb01 f303 	mul.w	r3, r1, r3
 800af2a:	4413      	add	r3, r2
 800af2c:	2be0      	cmp	r3, #224	; 0xe0
 800af2e:	dc01      	bgt.n	800af34 <isHitBoss+0x74>
		return 2;
 800af30:	2302      	movs	r3, #2
 800af32:	e04a      	b.n	800afca <isHitBoss+0x10a>
	}else if(det(x1-x,y1-y,x2-x,y2-y)<0 &&det(x2-x,y2-y,x3-x,y3-y)<0&&det(x3-x,y3-y,x4-x,y4-y)<0&&det(x4-x,y4-y,x1-x,y1-y)<0){
 800af34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	1ad0      	subs	r0, r2, r3
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	1ad1      	subs	r1, r2, r3
 800af40:	6a3a      	ldr	r2, [r7, #32]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	1ad4      	subs	r4, r2, r3
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	4622      	mov	r2, r4
 800af4e:	f7fd fb51 	bl	80085f4 <det>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	da37      	bge.n	800afc8 <isHitBoss+0x108>
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	1ad0      	subs	r0, r2, r3
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	1ad1      	subs	r1, r2, r3
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	1ad4      	subs	r4, r2, r3
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	4622      	mov	r2, r4
 800af72:	f7fd fb3f 	bl	80085f4 <det>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	da25      	bge.n	800afc8 <isHitBoss+0x108>
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	1ad0      	subs	r0, r2, r3
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	1ad1      	subs	r1, r2, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	1ad4      	subs	r4, r2, r3
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	4622      	mov	r2, r4
 800af96:	f7fd fb2d 	bl	80085f4 <det>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da13      	bge.n	800afc8 <isHitBoss+0x108>
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	1ad0      	subs	r0, r2, r3
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	1ad1      	subs	r1, r2, r3
 800afac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	1ad4      	subs	r4, r2, r3
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	4622      	mov	r2, r4
 800afba:	f7fd fb1b 	bl	80085f4 <det>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da01      	bge.n	800afc8 <isHitBoss+0x108>
		return 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e000      	b.n	800afca <isHitBoss+0x10a>
	}
	return 0;
 800afc8:	2300      	movs	r3, #0
return 0;
}
 800afca:	4618      	mov	r0, r3
 800afcc:	372c      	adds	r7, #44	; 0x2c
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd90      	pop	{r4, r7, pc}
 800afd2:	bf00      	nop
 800afd4:	2000366c 	.word	0x2000366c

0800afd8 <estimateBoss>:
void estimateBoss(){
 800afd8:	b5b0      	push	{r4, r5, r7, lr}
 800afda:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
	    Bullet copy2[MAX_BULLET_HERO];
	    int flag2[MAX_BULLET_ENEMY];
	    int num2=0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800afe8:	f102 0204 	add.w	r2, r2, #4
 800afec:	6013      	str	r3, [r2, #0]
	    for(int i=0;i<bul_num_h;i++){
 800afee:	2300      	movs	r3, #0
 800aff0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	e07c      	b.n	800b0f2 <estimateBoss+0x11a>
	        flag2[i]=1;
 800aff8:	f107 0308 	add.w	r3, r7, #8
 800affc:	3b04      	subs	r3, #4
 800affe:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	2101      	movs	r1, #1
 800b006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	        copy2[i]=hero_bul[i];
 800b00a:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800b00e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	015b      	lsls	r3, r3, #5
 800b016:	18d1      	adds	r1, r2, r3
 800b018:	4a5a      	ldr	r2, [pc, #360]	; (800b184 <estimateBoss+0x1ac>)
 800b01a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	015b      	lsls	r3, r3, #5
 800b022:	4413      	add	r3, r2
 800b024:	460c      	mov	r4, r1
 800b026:	461d      	mov	r5, r3
 800b028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b02a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b02c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        int x=hero_bul[i].x;
 800b034:	4a53      	ldr	r2, [pc, #332]	; (800b184 <estimateBoss+0x1ac>)
 800b036:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	015b      	lsls	r3, r3, #5
 800b03e:	4413      	add	r3, r2
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f8c7 3ff8 	str.w	r3, [r7, #4088]	; 0xff8
	        int y=hero_bul[i].y;
 800b046:	4a4f      	ldr	r2, [pc, #316]	; (800b184 <estimateBoss+0x1ac>)
 800b048:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	015b      	lsls	r3, r3, #5
 800b050:	4413      	add	r3, r2
 800b052:	3304      	adds	r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
			if(isHitBoss(x,y)==1){
 800b05a:	f8d7 1ff4 	ldr.w	r1, [r7, #4084]	; 0xff4
 800b05e:	f8d7 0ff8 	ldr.w	r0, [r7, #4088]	; 0xff8
 800b062:	f7ff ff2d 	bl	800aec0 <isHitBoss>
 800b066:	4603      	mov	r3, r0
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d110      	bne.n	800b08e <estimateBoss+0xb6>
				boss.hp-=1;
 800b06c:	4b46      	ldr	r3, [pc, #280]	; (800b188 <estimateBoss+0x1b0>)
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	3b01      	subs	r3, #1
 800b072:	4a45      	ldr	r2, [pc, #276]	; (800b188 <estimateBoss+0x1b0>)
 800b074:	6053      	str	r3, [r2, #4]
				updateBossHp();
 800b076:	f000 fbc3 	bl	800b800 <updateBossHp>
				flag2[i]=0;
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	3b04      	subs	r3, #4
 800b080:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b084:	6812      	ldr	r2, [r2, #0]
 800b086:	2100      	movs	r1, #0
 800b088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b08c:	e018      	b.n	800b0c0 <estimateBoss+0xe8>
			}else if(isHitBoss(x,y)==2){
 800b08e:	f8d7 1ff4 	ldr.w	r1, [r7, #4084]	; 0xff4
 800b092:	f8d7 0ff8 	ldr.w	r0, [r7, #4088]	; 0xff8
 800b096:	f7ff ff13 	bl	800aec0 <isHitBoss>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d10f      	bne.n	800b0c0 <estimateBoss+0xe8>
				boss.hp-=5;
 800b0a0:	4b39      	ldr	r3, [pc, #228]	; (800b188 <estimateBoss+0x1b0>)
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	3b05      	subs	r3, #5
 800b0a6:	4a38      	ldr	r2, [pc, #224]	; (800b188 <estimateBoss+0x1b0>)
 800b0a8:	6053      	str	r3, [r2, #4]
				updateBossHp();
 800b0aa:	f000 fba9 	bl	800b800 <updateBossHp>
				flag2[i]=0;
 800b0ae:	f107 0308 	add.w	r3, r7, #8
 800b0b2:	3b04      	subs	r3, #4
 800b0b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
	        if(isOutOfRange(x,y)){
 800b0c0:	f8d7 1ff4 	ldr.w	r1, [r7, #4084]	; 0xff4
 800b0c4:	f8d7 0ff8 	ldr.w	r0, [r7, #4088]	; 0xff8
 800b0c8:	f7fd fb6e 	bl	80087a8 <isOutOfRange>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <estimateBoss+0x10c>
	            flag2[i]=0;
 800b0d2:	f107 0308 	add.w	r3, r7, #8
 800b0d6:	3b04      	subs	r3, #4
 800b0d8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0dc:	6812      	ldr	r2, [r2, #0]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for(int i=0;i<bul_num_h;i++){
 800b0e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	4b26      	ldr	r3, [pc, #152]	; (800b18c <estimateBoss+0x1b4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	f6ff af7b 	blt.w	800aff8 <estimateBoss+0x20>
	        }
	    }
	    for(int i=0;i<bul_num_h;i++){
 800b102:	2300      	movs	r3, #0
 800b104:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 800b108:	e029      	b.n	800b15e <estimateBoss+0x186>
	        if(flag2[i])hero_bul[num2++]=copy2[i];
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	3b04      	subs	r3, #4
 800b110:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 800b114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01b      	beq.n	800b154 <estimateBoss+0x17c>
 800b11c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b120:	f103 0304 	add.w	r3, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800b12c:	f101 0104 	add.w	r1, r1, #4
 800b130:	600a      	str	r2, [r1, #0]
 800b132:	4a14      	ldr	r2, [pc, #80]	; (800b184 <estimateBoss+0x1ac>)
 800b134:	015b      	lsls	r3, r3, #5
 800b136:	18d1      	adds	r1, r2, r3
 800b138:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800b13c:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 800b140:	015b      	lsls	r3, r3, #5
 800b142:	4413      	add	r3, r2
 800b144:	460c      	mov	r4, r1
 800b146:	461d      	mov	r5, r3
 800b148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b14a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b14c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    for(int i=0;i<bul_num_h;i++){
 800b154:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 800b158:	3301      	adds	r3, #1
 800b15a:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <estimateBoss+0x1b4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 800b166:	429a      	cmp	r2, r3
 800b168:	dbcf      	blt.n	800b10a <estimateBoss+0x132>
	    }
	    bul_num_h=num2;
 800b16a:	4a08      	ldr	r2, [pc, #32]	; (800b18c <estimateBoss+0x1b4>)
 800b16c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b170:	f103 0304 	add.w	r3, r3, #4
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6013      	str	r3, [r2, #0]
}
 800b178:	bf00      	nop
 800b17a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bdb0      	pop	{r4, r5, r7, pc}
 800b184:	200004c0 	.word	0x200004c0
 800b188:	2000366c 	.word	0x2000366c
 800b18c:	200053bc 	.word	0x200053bc

0800b190 <BossAction>:


void BossAction(){
 800b190:	b5b0      	push	{r4, r5, r7, lr}
 800b192:	b08c      	sub	sp, #48	; 0x30
 800b194:	af00      	add	r7, sp, #0
	int T=boss.T;
 800b196:	4bae      	ldr	r3, [pc, #696]	; (800b450 <BossAction+0x2c0>)
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	62bb      	str	r3, [r7, #40]	; 0x28
	int r=boss.cnt%(4*T);
 800b19c:	4bac      	ldr	r3, [pc, #688]	; (800b450 <BossAction+0x2c0>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a2:	0092      	lsls	r2, r2, #2
 800b1a4:	fb93 f1f2 	sdiv	r1, r3, r2
 800b1a8:	fb02 f201 	mul.w	r2, r2, r1
 800b1ac:	1a9b      	subs	r3, r3, r2
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24
	int r2=boss.cnt%(48*T);
 800b1b0:	4ba7      	ldr	r3, [pc, #668]	; (800b450 <BossAction+0x2c0>)
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	440b      	add	r3, r1
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	fb92 f1f3 	sdiv	r1, r2, r3
 800b1c2:	fb03 f301 	mul.w	r3, r3, r1
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	623b      	str	r3, [r7, #32]
	if(r2==16*T){
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	6a3a      	ldr	r2, [r7, #32]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d108      	bne.n	800b1e6 <BossAction+0x56>
		LCD_Clear(BLACK);
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f7fc fef5 	bl	8007fc4 <LCD_Clear>
		bg_color=BLACK;
 800b1da:	4b9e      	ldr	r3, [pc, #632]	; (800b454 <BossAction+0x2c4>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	801a      	strh	r2, [r3, #0]
		updateInfo();
 800b1e0:	f000 fb3e 	bl	800b860 <updateInfo>
 800b1e4:	e00c      	b.n	800b200 <BossAction+0x70>
	}else if(r2==0){
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <BossAction+0x70>
		LCD_Clear(WHITE);
 800b1ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1f0:	f7fc fee8 	bl	8007fc4 <LCD_Clear>
		bg_color=WHITE;
 800b1f4:	4b97      	ldr	r3, [pc, #604]	; (800b454 <BossAction+0x2c4>)
 800b1f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1fa:	801a      	strh	r2, [r3, #0]
		updateInfo();
 800b1fc:	f000 fb30 	bl	800b860 <updateInfo>
	}
	if(r2>=16*T){
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	011b      	lsls	r3, r3, #4
 800b204:	6a3a      	ldr	r2, [r7, #32]
 800b206:	429a      	cmp	r2, r3
 800b208:	f2c0 80c9 	blt.w	800b39e <BossAction+0x20e>
		if(r2%5==0&&r2<32*T){
 800b20c:	6a39      	ldr	r1, [r7, #32]
 800b20e:	4b92      	ldr	r3, [pc, #584]	; (800b458 <BossAction+0x2c8>)
 800b210:	fb83 2301 	smull	r2, r3, r3, r1
 800b214:	105a      	asrs	r2, r3, #1
 800b216:	17cb      	asrs	r3, r1, #31
 800b218:	1ad2      	subs	r2, r2, r3
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	1aca      	subs	r2, r1, r3
 800b222:	2a00      	cmp	r2, #0
 800b224:	f040 8105 	bne.w	800b432 <BossAction+0x2a2>
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	015b      	lsls	r3, r3, #5
 800b22c:	6a3a      	ldr	r2, [r7, #32]
 800b22e:	429a      	cmp	r2, r3
 800b230:	f280 80ff 	bge.w	800b432 <BossAction+0x2a2>
			for(int i=10;i<SCREEN_WIDTH;i+=40){
 800b234:	230a      	movs	r3, #10
 800b236:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b238:	e020      	b.n	800b27c <BossAction+0xec>
				Bullet bul;
				bul.cnt=0; bul.power=3; bul.type=BULLET_MOVE_SEMICIRCLE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	2303      	movs	r3, #3
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	2305      	movs	r3, #5
 800b244:	61bb      	str	r3, [r7, #24]
				bul.vx=0;bul.vy=0; bul.x=i; bul.y=SCREEN_TOP+10;
 800b246:	2300      	movs	r3, #0
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	2328      	movs	r3, #40	; 0x28
 800b254:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b256:	4b81      	ldr	r3, [pc, #516]	; (800b45c <BossAction+0x2cc>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	497f      	ldr	r1, [pc, #508]	; (800b45c <BossAction+0x2cc>)
 800b25e:	600a      	str	r2, [r1, #0]
 800b260:	4a7f      	ldr	r2, [pc, #508]	; (800b460 <BossAction+0x2d0>)
 800b262:	015b      	lsls	r3, r3, #5
 800b264:	4413      	add	r3, r2
 800b266:	461d      	mov	r5, r3
 800b268:	463c      	mov	r4, r7
 800b26a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b26c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b26e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			for(int i=10;i<SCREEN_WIDTH;i+=40){
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	3328      	adds	r3, #40	; 0x28
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	2bef      	cmp	r3, #239	; 0xef
 800b280:	dddb      	ble.n	800b23a <BossAction+0xaa>
			}
			if(r2%10==0){
 800b282:	6a39      	ldr	r1, [r7, #32]
 800b284:	4b74      	ldr	r3, [pc, #464]	; (800b458 <BossAction+0x2c8>)
 800b286:	fb83 2301 	smull	r2, r3, r3, r1
 800b28a:	109a      	asrs	r2, r3, #2
 800b28c:	17cb      	asrs	r3, r1, #31
 800b28e:	1ad2      	subs	r2, r2, r3
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	1aca      	subs	r2, r1, r3
 800b29a:	2a00      	cmp	r2, #0
 800b29c:	f040 80c9 	bne.w	800b432 <BossAction+0x2a2>
				Bullet bul;bul.cnt=0; bul.power=3; bul.type=BULLET_MOVE_LINE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	613b      	str	r3, [r7, #16]
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	61bb      	str	r3, [r7, #24]
				bul.vx=0;bul.vy=0; bul.x=6; bul.y=SCREEN_TOP+10;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60bb      	str	r3, [r7, #8]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	2306      	movs	r3, #6
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	2328      	movs	r3, #40	; 0x28
 800b2ba:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b2bc:	4b67      	ldr	r3, [pc, #412]	; (800b45c <BossAction+0x2cc>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	4966      	ldr	r1, [pc, #408]	; (800b45c <BossAction+0x2cc>)
 800b2c4:	600a      	str	r2, [r1, #0]
 800b2c6:	4a66      	ldr	r2, [pc, #408]	; (800b460 <BossAction+0x2d0>)
 800b2c8:	015b      	lsls	r3, r3, #5
 800b2ca:	4413      	add	r3, r2
 800b2cc:	461d      	mov	r5, r3
 800b2ce:	463c      	mov	r4, r7
 800b2d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b2d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				bul.vx=0;bul.vy=0; bul.x=15; bul.y=SCREEN_TOP+10;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60bb      	str	r3, [r7, #8]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	230f      	movs	r3, #15
 800b2e6:	603b      	str	r3, [r7, #0]
 800b2e8:	2328      	movs	r3, #40	; 0x28
 800b2ea:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b2ec:	4b5b      	ldr	r3, [pc, #364]	; (800b45c <BossAction+0x2cc>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	495a      	ldr	r1, [pc, #360]	; (800b45c <BossAction+0x2cc>)
 800b2f4:	600a      	str	r2, [r1, #0]
 800b2f6:	4a5a      	ldr	r2, [pc, #360]	; (800b460 <BossAction+0x2d0>)
 800b2f8:	015b      	lsls	r3, r3, #5
 800b2fa:	4413      	add	r3, r2
 800b2fc:	461d      	mov	r5, r3
 800b2fe:	463c      	mov	r4, r7
 800b300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b304:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b308:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				bul.vx=0;bul.vy=0; bul.x=24; bul.y=SCREEN_TOP+10;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60bb      	str	r3, [r7, #8]
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	2318      	movs	r3, #24
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	2328      	movs	r3, #40	; 0x28
 800b31a:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b31c:	4b4f      	ldr	r3, [pc, #316]	; (800b45c <BossAction+0x2cc>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	494e      	ldr	r1, [pc, #312]	; (800b45c <BossAction+0x2cc>)
 800b324:	600a      	str	r2, [r1, #0]
 800b326:	4a4e      	ldr	r2, [pc, #312]	; (800b460 <BossAction+0x2d0>)
 800b328:	015b      	lsls	r3, r3, #5
 800b32a:	4413      	add	r3, r2
 800b32c:	461d      	mov	r5, r3
 800b32e:	463c      	mov	r4, r7
 800b330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b334:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b338:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				bul.vx=0;bul.vy=0; bul.x=SCREEN_WIDTH-5; bul.y=SCREEN_TOP+10;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60bb      	str	r3, [r7, #8]
 800b340:	2300      	movs	r3, #0
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	23eb      	movs	r3, #235	; 0xeb
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	2328      	movs	r3, #40	; 0x28
 800b34a:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b34c:	4b43      	ldr	r3, [pc, #268]	; (800b45c <BossAction+0x2cc>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	4942      	ldr	r1, [pc, #264]	; (800b45c <BossAction+0x2cc>)
 800b354:	600a      	str	r2, [r1, #0]
 800b356:	4a42      	ldr	r2, [pc, #264]	; (800b460 <BossAction+0x2d0>)
 800b358:	015b      	lsls	r3, r3, #5
 800b35a:	4413      	add	r3, r2
 800b35c:	461d      	mov	r5, r3
 800b35e:	463c      	mov	r4, r7
 800b360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b364:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b368:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				bul.vx=0;bul.vy=0; bul.x=SCREEN_WIDTH-11; bul.y=SCREEN_TOP+10;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60bb      	str	r3, [r7, #8]
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	23e5      	movs	r3, #229	; 0xe5
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	2328      	movs	r3, #40	; 0x28
 800b37a:	607b      	str	r3, [r7, #4]
				enemy_bul[bul_num_e++]=bul;
 800b37c:	4b37      	ldr	r3, [pc, #220]	; (800b45c <BossAction+0x2cc>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	4936      	ldr	r1, [pc, #216]	; (800b45c <BossAction+0x2cc>)
 800b384:	600a      	str	r2, [r1, #0]
 800b386:	4a36      	ldr	r2, [pc, #216]	; (800b460 <BossAction+0x2d0>)
 800b388:	015b      	lsls	r3, r3, #5
 800b38a:	4413      	add	r3, r2
 800b38c:	461d      	mov	r5, r3
 800b38e:	463c      	mov	r4, r7
 800b390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b394:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b398:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b39c:	e049      	b.n	800b432 <BossAction+0x2a2>
			}
		}
	}else if(r2<12*T){
 800b39e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	da40      	bge.n	800b432 <BossAction+0x2a2>
		if(r2%6==0){
 800b3b0:	6a39      	ldr	r1, [r7, #32]
 800b3b2:	4b2c      	ldr	r3, [pc, #176]	; (800b464 <BossAction+0x2d4>)
 800b3b4:	fb83 3201 	smull	r3, r2, r3, r1
 800b3b8:	17cb      	asrs	r3, r1, #31
 800b3ba:	1ad2      	subs	r2, r2, r3
 800b3bc:	4613      	mov	r3, r2
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	1aca      	subs	r2, r1, r3
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	d133      	bne.n	800b432 <BossAction+0x2a2>
			Bullet bul;
			bul.cnt=0; bul.power=3;bul.type=BULLET_MOVE_XIE60;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	613b      	str	r3, [r7, #16]
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	61bb      	str	r3, [r7, #24]
			bul.vx=0;bul.vy=0; bul.x=boss.x; bul.y=boss.y; bul.isMir=0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <BossAction+0x2c0>)
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <BossAction+0x2c0>)
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	61fb      	str	r3, [r7, #28]
			enemy_bul[bul_num_e++]=bul;
 800b3ee:	4b1b      	ldr	r3, [pc, #108]	; (800b45c <BossAction+0x2cc>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	4919      	ldr	r1, [pc, #100]	; (800b45c <BossAction+0x2cc>)
 800b3f6:	600a      	str	r2, [r1, #0]
 800b3f8:	4a19      	ldr	r2, [pc, #100]	; (800b460 <BossAction+0x2d0>)
 800b3fa:	015b      	lsls	r3, r3, #5
 800b3fc:	4413      	add	r3, r2
 800b3fe:	461d      	mov	r5, r3
 800b400:	463c      	mov	r4, r7
 800b402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b40a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bul.isMir=1;
 800b40e:	2301      	movs	r3, #1
 800b410:	61fb      	str	r3, [r7, #28]
			enemy_bul[bul_num_e++]=bul;
 800b412:	4b12      	ldr	r3, [pc, #72]	; (800b45c <BossAction+0x2cc>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	4910      	ldr	r1, [pc, #64]	; (800b45c <BossAction+0x2cc>)
 800b41a:	600a      	str	r2, [r1, #0]
 800b41c:	4a10      	ldr	r2, [pc, #64]	; (800b460 <BossAction+0x2d0>)
 800b41e:	015b      	lsls	r3, r3, #5
 800b420:	4413      	add	r3, r2
 800b422:	461d      	mov	r5, r3
 800b424:	463c      	mov	r4, r7
 800b426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b42a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b42e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		}

	}
	if(r<T){
 800b432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	429a      	cmp	r2, r3
 800b438:	da16      	bge.n	800b468 <BossAction+0x2d8>
		boss.x-=8;
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <BossAction+0x2c0>)
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	3b08      	subs	r3, #8
 800b440:	4a03      	ldr	r2, [pc, #12]	; (800b450 <BossAction+0x2c0>)
 800b442:	6113      	str	r3, [r2, #16]
		boss.y+=5;
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <BossAction+0x2c0>)
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	3305      	adds	r3, #5
 800b44a:	4a01      	ldr	r2, [pc, #4]	; (800b450 <BossAction+0x2c0>)
 800b44c:	6153      	str	r3, [r2, #20]
 800b44e:	e037      	b.n	800b4c0 <BossAction+0x330>
 800b450:	2000366c 	.word	0x2000366c
 800b454:	200004bc 	.word	0x200004bc
 800b458:	66666667 	.word	0x66666667
 800b45c:	20003660 	.word	0x20003660
 800b460:	2000383c 	.word	0x2000383c
 800b464:	2aaaaaab 	.word	0x2aaaaaab
	}else if(r<2*T){
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46e:	429a      	cmp	r2, r3
 800b470:	da0a      	bge.n	800b488 <BossAction+0x2f8>
		boss.x+=8;
 800b472:	4b18      	ldr	r3, [pc, #96]	; (800b4d4 <BossAction+0x344>)
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	3308      	adds	r3, #8
 800b478:	4a16      	ldr	r2, [pc, #88]	; (800b4d4 <BossAction+0x344>)
 800b47a:	6113      	str	r3, [r2, #16]
		boss.y+=5;
 800b47c:	4b15      	ldr	r3, [pc, #84]	; (800b4d4 <BossAction+0x344>)
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	3305      	adds	r3, #5
 800b482:	4a14      	ldr	r2, [pc, #80]	; (800b4d4 <BossAction+0x344>)
 800b484:	6153      	str	r3, [r2, #20]
 800b486:	e01b      	b.n	800b4c0 <BossAction+0x330>
	}else if(r<3*T){
 800b488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b48a:	4613      	mov	r3, r2
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	4413      	add	r3, r2
 800b490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b492:	429a      	cmp	r2, r3
 800b494:	da0a      	bge.n	800b4ac <BossAction+0x31c>
		boss.x+=8;
 800b496:	4b0f      	ldr	r3, [pc, #60]	; (800b4d4 <BossAction+0x344>)
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	3308      	adds	r3, #8
 800b49c:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <BossAction+0x344>)
 800b49e:	6113      	str	r3, [r2, #16]
		boss.y-=5;
 800b4a0:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <BossAction+0x344>)
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	3b05      	subs	r3, #5
 800b4a6:	4a0b      	ldr	r2, [pc, #44]	; (800b4d4 <BossAction+0x344>)
 800b4a8:	6153      	str	r3, [r2, #20]
 800b4aa:	e009      	b.n	800b4c0 <BossAction+0x330>
	}else{
		boss.x-=8;
 800b4ac:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <BossAction+0x344>)
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	3b08      	subs	r3, #8
 800b4b2:	4a08      	ldr	r2, [pc, #32]	; (800b4d4 <BossAction+0x344>)
 800b4b4:	6113      	str	r3, [r2, #16]
		boss.y-=5;
 800b4b6:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <BossAction+0x344>)
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	3b05      	subs	r3, #5
 800b4bc:	4a05      	ldr	r2, [pc, #20]	; (800b4d4 <BossAction+0x344>)
 800b4be:	6153      	str	r3, [r2, #20]
	}

	boss.cnt++;
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <BossAction+0x344>)
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	4a03      	ldr	r2, [pc, #12]	; (800b4d4 <BossAction+0x344>)
 800b4c8:	60d3      	str	r3, [r2, #12]
}
 800b4ca:	bf00      	nop
 800b4cc:	3730      	adds	r7, #48	; 0x30
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	2000366c 	.word	0x2000366c

0800b4d8 <drawBoss>:

void drawBoss(){
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
	int x=boss.x;
 800b4de:	4b4a      	ldr	r3, [pc, #296]	; (800b608 <drawBoss+0x130>)
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	607b      	str	r3, [r7, #4]
	int y=boss.y;
 800b4e4:	4b48      	ldr	r3, [pc, #288]	; (800b608 <drawBoss+0x130>)
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	603b      	str	r3, [r7, #0]
	paint.draw_ori_x=0;paint.draw_ori_y=0;paint.draw_new_x=0;paint.draw_new_y=0;
 800b4ea:	4b48      	ldr	r3, [pc, #288]	; (800b60c <drawBoss+0x134>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	4b46      	ldr	r3, [pc, #280]	; (800b60c <drawBoss+0x134>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	605a      	str	r2, [r3, #4]
 800b4f6:	4b45      	ldr	r3, [pc, #276]	; (800b60c <drawBoss+0x134>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	609a      	str	r2, [r3, #8]
 800b4fc:	4b43      	ldr	r3, [pc, #268]	; (800b60c <drawBoss+0x134>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	60da      	str	r2, [r3, #12]
	paint.draw_size_x=1.0f;paint.draw_size_y=1.0f;
 800b502:	4b42      	ldr	r3, [pc, #264]	; (800b60c <drawBoss+0x134>)
 800b504:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b508:	611a      	str	r2, [r3, #16]
 800b50a:	4b40      	ldr	r3, [pc, #256]	; (800b60c <drawBoss+0x134>)
 800b50c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b510:	615a      	str	r2, [r3, #20]
	paint.draw_color=BLACK;
 800b512:	4b3e      	ldr	r3, [pc, #248]	; (800b60c <drawBoss+0x134>)
 800b514:	2200      	movs	r2, #0
 800b516:	831a      	strh	r2, [r3, #24]
	DrawMyLine(x,y-30,x+60,y);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f1a3 011e 	sub.w	r1, r3, #30
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff f906 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y-30,x-60,y);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	f1a3 011e 	sub.w	r1, r3, #30
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff f8fc 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y+30,x-60,y);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	f103 011e 	add.w	r1, r3, #30
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff f8f2 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y+30,x+60,y);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	f103 011e 	add.w	r1, r3, #30
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff f8e8 	bl	800a738 <DrawMyLine>

	if(boss.hp*2>boss.max_hp){
 800b568:	4b27      	ldr	r3, [pc, #156]	; (800b608 <drawBoss+0x130>)
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	005a      	lsls	r2, r3, #1
 800b56e:	4b26      	ldr	r3, [pc, #152]	; (800b608 <drawBoss+0x130>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	dd20      	ble.n	800b5b8 <drawBoss+0xe0>
		LCD_Draw_Circle(x,y,15,BLACK);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	b298      	uxth	r0, r3
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	b299      	uxth	r1, r3
 800b57e:	2300      	movs	r3, #0
 800b580:	220f      	movs	r2, #15
 800b582:	f7fc fe91 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,11,BLACK);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	b298      	uxth	r0, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	b299      	uxth	r1, r3
 800b58e:	2300      	movs	r3, #0
 800b590:	220b      	movs	r2, #11
 800b592:	f7fc fe89 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,7,BLACK);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	b298      	uxth	r0, r3
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	b299      	uxth	r1, r3
 800b59e:	2300      	movs	r3, #0
 800b5a0:	2207      	movs	r2, #7
 800b5a2:	f7fc fe81 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,3,BLACK);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	b298      	uxth	r0, r3
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	b299      	uxth	r1, r3
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	f7fc fe79 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,11,RED);
		LCD_Draw_Circle(x,y,7,RED);
		LCD_Draw_Circle(x,y,3,RED);
	}

}
 800b5b6:	e023      	b.n	800b600 <drawBoss+0x128>
		LCD_Draw_Circle(x,y,15,RED);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	b298      	uxth	r0, r3
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	b299      	uxth	r1, r3
 800b5c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b5c4:	220f      	movs	r2, #15
 800b5c6:	f7fc fe6f 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,11,RED);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	b298      	uxth	r0, r3
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	b299      	uxth	r1, r3
 800b5d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b5d6:	220b      	movs	r2, #11
 800b5d8:	f7fc fe66 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,7,RED);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	b298      	uxth	r0, r3
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	b299      	uxth	r1, r3
 800b5e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b5e8:	2207      	movs	r2, #7
 800b5ea:	f7fc fe5d 	bl	80082a8 <LCD_Draw_Circle>
		LCD_Draw_Circle(x,y,3,RED);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	b298      	uxth	r0, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	b299      	uxth	r1, r3
 800b5f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b5fa:	2203      	movs	r2, #3
 800b5fc:	f7fc fe54 	bl	80082a8 <LCD_Draw_Circle>
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	2000366c 	.word	0x2000366c
 800b60c:	20001140 	.word	0x20001140

0800b610 <clearBoss>:
void clearBoss(){
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
	int x=boss.x;
 800b616:	4b37      	ldr	r3, [pc, #220]	; (800b6f4 <clearBoss+0xe4>)
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	607b      	str	r3, [r7, #4]
	int y=boss.y;
 800b61c:	4b35      	ldr	r3, [pc, #212]	; (800b6f4 <clearBoss+0xe4>)
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	603b      	str	r3, [r7, #0]
	paint.draw_ori_x=0;paint.draw_ori_y=0;paint.draw_new_x=0;paint.draw_new_y=0;
 800b622:	4b35      	ldr	r3, [pc, #212]	; (800b6f8 <clearBoss+0xe8>)
 800b624:	2200      	movs	r2, #0
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	4b33      	ldr	r3, [pc, #204]	; (800b6f8 <clearBoss+0xe8>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	605a      	str	r2, [r3, #4]
 800b62e:	4b32      	ldr	r3, [pc, #200]	; (800b6f8 <clearBoss+0xe8>)
 800b630:	2200      	movs	r2, #0
 800b632:	609a      	str	r2, [r3, #8]
 800b634:	4b30      	ldr	r3, [pc, #192]	; (800b6f8 <clearBoss+0xe8>)
 800b636:	2200      	movs	r2, #0
 800b638:	60da      	str	r2, [r3, #12]
	paint.draw_size_x=1.0f;paint.draw_size_y=1.0f;
 800b63a:	4b2f      	ldr	r3, [pc, #188]	; (800b6f8 <clearBoss+0xe8>)
 800b63c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b640:	611a      	str	r2, [r3, #16]
 800b642:	4b2d      	ldr	r3, [pc, #180]	; (800b6f8 <clearBoss+0xe8>)
 800b644:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b648:	615a      	str	r2, [r3, #20]
	paint.draw_color=bg_color;
 800b64a:	4b2c      	ldr	r3, [pc, #176]	; (800b6fc <clearBoss+0xec>)
 800b64c:	881a      	ldrh	r2, [r3, #0]
 800b64e:	4b2a      	ldr	r3, [pc, #168]	; (800b6f8 <clearBoss+0xe8>)
 800b650:	831a      	strh	r2, [r3, #24]
	DrawMyLine(x,y-30,x+60,y);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	f1a3 011e 	sub.w	r1, r3, #30
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff f869 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y-30,x-60,y);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	f1a3 011e 	sub.w	r1, r3, #30
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff f85f 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y+30,x-60,y);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	f103 011e 	add.w	r1, r3, #30
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff f855 	bl	800a738 <DrawMyLine>
	DrawMyLine(x,y+30,x+60,y);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	f103 011e 	add.w	r1, r3, #30
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff f84b 	bl	800a738 <DrawMyLine>
	LCD_Draw_Circle(x,y,15,bg_color);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	b298      	uxth	r0, r3
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	b299      	uxth	r1, r3
 800b6aa:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <clearBoss+0xec>)
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	220f      	movs	r2, #15
 800b6b0:	f7fc fdfa 	bl	80082a8 <LCD_Draw_Circle>
	LCD_Draw_Circle(x,y,11,bg_color);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	b298      	uxth	r0, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	b299      	uxth	r1, r3
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	; (800b6fc <clearBoss+0xec>)
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	220b      	movs	r2, #11
 800b6c2:	f7fc fdf1 	bl	80082a8 <LCD_Draw_Circle>
	LCD_Draw_Circle(x,y,7,bg_color);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	b298      	uxth	r0, r3
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	b299      	uxth	r1, r3
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <clearBoss+0xec>)
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	2207      	movs	r2, #7
 800b6d4:	f7fc fde8 	bl	80082a8 <LCD_Draw_Circle>
	LCD_Draw_Circle(x,y,3,bg_color);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	b298      	uxth	r0, r3
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	b299      	uxth	r1, r3
 800b6e0:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <clearBoss+0xec>)
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	2203      	movs	r2, #3
 800b6e6:	f7fc fddf 	bl	80082a8 <LCD_Draw_Circle>
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2000366c 	.word	0x2000366c
 800b6f8:	20001140 	.word	0x20001140
 800b6fc:	200004bc 	.word	0x200004bc

0800b700 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	4603      	mov	r3, r0
 800b708:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800b70a:	88fb      	ldrh	r3, [r7, #6]
 800b70c:	2b20      	cmp	r3, #32
 800b70e:	d014      	beq.n	800b73a <HAL_GPIO_EXTI_Callback+0x3a>
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b714:	d027      	beq.n	800b766 <HAL_GPIO_EXTI_Callback+0x66>
 800b716:	2b01      	cmp	r3, #1
 800b718:	d152      	bne.n	800b7c0 <HAL_GPIO_EXTI_Callback+0xc0>
		case KEY_WK_Pin:
			key_a = 1; key_b = key_c = 0;
 800b71a:	4b32      	ldr	r3, [pc, #200]	; (800b7e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	4b31      	ldr	r3, [pc, #196]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	4b30      	ldr	r3, [pc, #192]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a30      	ldr	r2, [pc, #192]	; (800b7ec <HAL_GPIO_EXTI_Callback+0xec>)
 800b72c:	6013      	str	r3, [r2, #0]
			flys[0].vx=-hero.v;
 800b72e:	4b30      	ldr	r3, [pc, #192]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	425b      	negs	r3, r3
 800b734:	4a2f      	ldr	r2, [pc, #188]	; (800b7f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800b736:	6113      	str	r3, [r2, #16]
			break;
 800b738:	e04f      	b.n	800b7da <HAL_GPIO_EXTI_Callback+0xda>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800b73a:	2120      	movs	r1, #32
 800b73c:	482e      	ldr	r0, [pc, #184]	; (800b7f8 <HAL_GPIO_EXTI_Callback+0xf8>)
 800b73e:	f7f5 ff91 	bl	8001664 <HAL_GPIO_ReadPin>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d145      	bne.n	800b7d4 <HAL_GPIO_EXTI_Callback+0xd4>
				key_c = 1; key_a = key_b = 0;
 800b748:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b74a:	2201      	movs	r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <HAL_GPIO_EXTI_Callback+0xec>)
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	4b25      	ldr	r3, [pc, #148]	; (800b7ec <HAL_GPIO_EXTI_Callback+0xec>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a22      	ldr	r2, [pc, #136]	; (800b7e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800b75a:	6013      	str	r3, [r2, #0]
				flys[0].vx=hero.v;
 800b75c:	4b24      	ldr	r3, [pc, #144]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800b762:	6113      	str	r3, [r2, #16]
			}
			break;
 800b764:	e036      	b.n	800b7d4 <HAL_GPIO_EXTI_Callback+0xd4>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 800b766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b76a:	4824      	ldr	r0, [pc, #144]	; (800b7fc <HAL_GPIO_EXTI_Callback+0xfc>)
 800b76c:	f7f5 ff7a 	bl	8001664 <HAL_GPIO_ReadPin>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d130      	bne.n	800b7d8 <HAL_GPIO_EXTI_Callback+0xd8>
				hero.fire_state++;
 800b776:	4b1e      	ldr	r3, [pc, #120]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77a:	3301      	adds	r3, #1
 800b77c:	4a1c      	ldr	r2, [pc, #112]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b77e:	6313      	str	r3, [r2, #48]	; 0x30
				hero.fire_state%=hero.fire_level;
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	4a1a      	ldr	r2, [pc, #104]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	fb93 f1f2 	sdiv	r1, r3, r2
 800b78c:	fb02 f201 	mul.w	r2, r2, r1
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	4a17      	ldr	r2, [pc, #92]	; (800b7f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 800b794:	6313      	str	r3, [r2, #48]	; 0x30
				setHeroFire();
 800b796:	f7fd f88b 	bl	80088b0 <setHeroFire>
				key_b = 1; key_a = key_c = 0;
 800b79a:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <HAL_GPIO_EXTI_Callback+0xec>)
 800b79c:	2201      	movs	r2, #1
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	4b11      	ldr	r3, [pc, #68]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a0e      	ldr	r2, [pc, #56]	; (800b7e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800b7ac:	6013      	str	r3, [r2, #0]
				flys[0].vx=0;
 800b7ae:	4b11      	ldr	r3, [pc, #68]	; (800b7f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	611a      	str	r2, [r3, #16]
				updateInfo();
 800b7b4:	f000 f854 	bl	800b860 <updateInfo>
				HAL_Delay(50);
 800b7b8:	2032      	movs	r0, #50	; 0x32
 800b7ba:	f7f5 fcb9 	bl	8001130 <HAL_Delay>
			}
			break;
 800b7be:	e00b      	b.n	800b7d8 <HAL_GPIO_EXTI_Callback+0xd8>
		default:
			key_a=0; key_b=0; key_c=0;
 800b7c0:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <HAL_GPIO_EXTI_Callback+0xec>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	4b06      	ldr	r3, [pc, #24]	; (800b7e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
	}
//	sprintf(msg,"%d,%d,%d",key_a,key_b,key_c);
//		LCD_ShowString(30, 260, 200, 24, 24, (uint8_t*) msg);

}
 800b7d2:	e002      	b.n	800b7da <HAL_GPIO_EXTI_Callback+0xda>
			break;
 800b7d4:	bf00      	nop
 800b7d6:	e000      	b.n	800b7da <HAL_GPIO_EXTI_Callback+0xda>
			break;
 800b7d8:	bf00      	nop
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000490 	.word	0x20000490
 800b7e8:	20000498 	.word	0x20000498
 800b7ec:	20000494 	.word	0x20000494
 800b7f0:	20003618 	.word	0x20003618
 800b7f4:	20001180 	.word	0x20001180
 800b7f8:	40011000 	.word	0x40011000
 800b7fc:	40010800 	.word	0x40010800

0800b800 <updateBossHp>:
void updateBossHp(){
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af02      	add	r7, sp, #8
	LCD_Fill(0,SCREEN_TOP-5,SCREEN_WIDTH,SCREEN_TOP+5,bg_color);
 800b806:	4b14      	ldr	r3, [pc, #80]	; (800b858 <updateBossHp+0x58>)
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	2323      	movs	r3, #35	; 0x23
 800b80e:	22f0      	movs	r2, #240	; 0xf0
 800b810:	2119      	movs	r1, #25
 800b812:	2000      	movs	r0, #0
 800b814:	f7fc fc38 	bl	8008088 <LCD_Fill>
	if(boss.hp>=0&&boss.max_hp>0){
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <updateBossHp+0x5c>)
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db17      	blt.n	800b850 <updateBossHp+0x50>
 800b820:	4b0e      	ldr	r3, [pc, #56]	; (800b85c <updateBossHp+0x5c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd13      	ble.n	800b850 <updateBossHp+0x50>
		LCD_Fill(0,SCREEN_TOP-5,boss.hp*SCREEN_WIDTH/boss.max_hp,SCREEN_TOP+5,RED);
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <updateBossHp+0x5c>)
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	4613      	mov	r3, r2
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	011b      	lsls	r3, r3, #4
 800b834:	461a      	mov	r2, r3
 800b836:	4b09      	ldr	r3, [pc, #36]	; (800b85c <updateBossHp+0x5c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	fb92 f3f3 	sdiv	r3, r2, r3
 800b83e:	b29a      	uxth	r2, r3
 800b840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	2323      	movs	r3, #35	; 0x23
 800b848:	2119      	movs	r1, #25
 800b84a:	2000      	movs	r0, #0
 800b84c:	f7fc fc1c 	bl	8008088 <LCD_Fill>
	}
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	200004bc 	.word	0x200004bc
 800b85c:	2000366c 	.word	0x2000366c

0800b860 <updateInfo>:
void updateInfo(){
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af02      	add	r7, sp, #8
	sprintf(msg,"Lv%d G:%d Hp:%d %s",level_num,score,myhp,hero.bul_name);
 800b866:	4b0f      	ldr	r3, [pc, #60]	; (800b8a4 <updateInfo+0x44>)
 800b868:	6819      	ldr	r1, [r3, #0]
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <updateInfo+0x48>)
 800b86c:	6818      	ldr	r0, [r3, #0]
 800b86e:	4b0f      	ldr	r3, [pc, #60]	; (800b8ac <updateInfo+0x4c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a0f      	ldr	r2, [pc, #60]	; (800b8b0 <updateInfo+0x50>)
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4603      	mov	r3, r0
 800b87a:	460a      	mov	r2, r1
 800b87c:	490d      	ldr	r1, [pc, #52]	; (800b8b4 <updateInfo+0x54>)
 800b87e:	480e      	ldr	r0, [pc, #56]	; (800b8b8 <updateInfo+0x58>)
 800b880:	f001 f81e 	bl	800c8c0 <siprintf>
	LCD_ShowString(0, 0, 200, SCREEN_TOP, 24, (uint8_t*)msg);
 800b884:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <updateInfo+0x58>)
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	2318      	movs	r3, #24
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	231e      	movs	r3, #30
 800b88e:	22c8      	movs	r2, #200	; 0xc8
 800b890:	2100      	movs	r1, #0
 800b892:	2000      	movs	r0, #0
 800b894:	f7fc fe60 	bl	8008558 <LCD_ShowString>
	updateBossHp();
 800b898:	f7ff ffb2 	bl	800b800 <updateBossHp>

}
 800b89c:	bf00      	nop
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000365c 	.word	0x2000365c
 800b8a8:	20003654 	.word	0x20003654
 800b8ac:	2000117c 	.word	0x2000117c
 800b8b0:	2000364c 	.word	0x2000364c
 800b8b4:	0800e17c 	.word	0x0800e17c
 800b8b8:	2000115c 	.word	0x2000115c

0800b8bc <init_game>:
void init_game(){
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
	hero.fire_level=1;
 800b8c0:	4b14      	ldr	r3, [pc, #80]	; (800b914 <init_game+0x58>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
	hero.fire_name[0]=0;
 800b8c6:	4b13      	ldr	r3, [pc, #76]	; (800b914 <init_game+0x58>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	609a      	str	r2, [r3, #8]
	hero.fire_state=0;
 800b8cc:	4b11      	ldr	r3, [pc, #68]	; (800b914 <init_game+0x58>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	; 0x30
	hero.v=3;
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <init_game+0x58>)
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	605a      	str	r2, [r3, #4]
	myhp=2;
 800b8d8:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <init_game+0x5c>)
 800b8da:	2202      	movs	r2, #2
 800b8dc:	601a      	str	r2, [r3, #0]
	level_num=1;
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <init_game+0x60>)
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
	score=0;
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <init_game+0x64>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
	boss.hp=0;
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <init_game+0x68>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	605a      	str	r2, [r3, #4]
	bg_color=WHITE;
 800b8f0:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <init_game+0x6c>)
 800b8f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8f6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b8fe:	480b      	ldr	r0, [pc, #44]	; (800b92c <init_game+0x70>)
 800b900:	f7f5 fec7 	bl	8001692 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800b904:	2201      	movs	r2, #1
 800b906:	2104      	movs	r1, #4
 800b908:	4809      	ldr	r0, [pc, #36]	; (800b930 <init_game+0x74>)
 800b90a:	f7f5 fec2 	bl	8001692 <HAL_GPIO_WritePin>

}
 800b90e:	bf00      	nop
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20003618 	.word	0x20003618
 800b918:	2000117c 	.word	0x2000117c
 800b91c:	2000365c 	.word	0x2000365c
 800b920:	20003654 	.word	0x20003654
 800b924:	2000366c 	.word	0x2000366c
 800b928:	200004bc 	.word	0x200004bc
 800b92c:	40010800 	.word	0x40010800
 800b930:	40011400 	.word	0x40011400

0800b934 <init_boss>:
void init_boss(){
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
	boss.cnt=0;
 800b938:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <init_boss+0x34>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	60da      	str	r2, [r3, #12]
	boss.max_hp=400;
 800b93e:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <init_boss+0x34>)
 800b940:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b944:	601a      	str	r2, [r3, #0]
	boss.hp=boss.max_hp;
 800b946:	4b08      	ldr	r3, [pc, #32]	; (800b968 <init_boss+0x34>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a07      	ldr	r2, [pc, #28]	; (800b968 <init_boss+0x34>)
 800b94c:	6053      	str	r3, [r2, #4]
	boss.x=120;
 800b94e:	4b06      	ldr	r3, [pc, #24]	; (800b968 <init_boss+0x34>)
 800b950:	2278      	movs	r2, #120	; 0x78
 800b952:	611a      	str	r2, [r3, #16]
	boss.y=SCREEN_TOP+45;
 800b954:	4b04      	ldr	r3, [pc, #16]	; (800b968 <init_boss+0x34>)
 800b956:	224b      	movs	r2, #75	; 0x4b
 800b958:	615a      	str	r2, [r3, #20]
	boss.T=8;
 800b95a:	4b03      	ldr	r3, [pc, #12]	; (800b968 <init_boss+0x34>)
 800b95c:	2208      	movs	r2, #8
 800b95e:	609a      	str	r2, [r3, #8]

}
 800b960:	bf00      	nop
 800b962:	46bd      	mov	sp, r7
 800b964:	bc80      	pop	{r7}
 800b966:	4770      	bx	lr
 800b968:	2000366c 	.word	0x2000366c

0800b96c <init_level>:
void init_level(int level_num){
 800b96c:	b5b0      	push	{r4, r5, r7, lr}
 800b96e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800b972:	af00      	add	r7, sp, #0
 800b974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b978:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800b97a:	2201      	movs	r2, #1
 800b97c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b980:	489e      	ldr	r0, [pc, #632]	; (800bbfc <init_level+0x290>)
 800b982:	f7f5 fe86 	bl	8001692 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800b986:	2201      	movs	r2, #1
 800b988:	2104      	movs	r1, #4
 800b98a:	489d      	ldr	r0, [pc, #628]	; (800bc00 <init_level+0x294>)
 800b98c:	f7f5 fe81 	bl	8001692 <HAL_GPIO_WritePin>

    bul_num_e=0;
 800b990:	4b9c      	ldr	r3, [pc, #624]	; (800bc04 <init_level+0x298>)
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
    bul_num_h=0;
 800b996:	4b9c      	ldr	r3, [pc, #624]	; (800bc08 <init_level+0x29c>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
    fly_num=0;
 800b99c:	4b9b      	ldr	r3, [pc, #620]	; (800bc0c <init_level+0x2a0>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	601a      	str	r2, [r3, #0]


    level_info.maxTime=80;
 800b9a2:	4b9b      	ldr	r3, [pc, #620]	; (800bc10 <init_level+0x2a4>)
 800b9a4:	2250      	movs	r2, #80	; 0x50
 800b9a6:	601a      	str	r2, [r3, #0]
    level_info.minTime=50;
 800b9a8:	4b99      	ldr	r3, [pc, #612]	; (800bc10 <init_level+0x2a4>)
 800b9aa:	2232      	movs	r2, #50	; 0x32
 800b9ac:	605a      	str	r2, [r3, #4]
    level_info.randTime=10;
 800b9ae:	4b98      	ldr	r3, [pc, #608]	; (800bc10 <init_level+0x2a4>)
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	60da      	str	r2, [r3, #12]
    level_info.lastTime=0;
 800b9b4:	4b96      	ldr	r3, [pc, #600]	; (800bc10 <init_level+0x2a4>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	609a      	str	r2, [r3, #8]

    if(level_num==1){
 800b9ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d112      	bne.n	800b9ea <init_level+0x7e>
    	level_info.maxHP=2;
 800b9c4:	4b92      	ldr	r3, [pc, #584]	; (800bc10 <init_level+0x2a4>)
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	611a      	str	r2, [r3, #16]
    	level_info.minHP=1;
 800b9ca:	4b91      	ldr	r3, [pc, #580]	; (800bc10 <init_level+0x2a4>)
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	615a      	str	r2, [r3, #20]
    	level_info.enemy_type_num=2;
 800b9d0:	4b8f      	ldr	r3, [pc, #572]	; (800bc10 <init_level+0x2a4>)
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	619a      	str	r2, [r3, #24]
    	level_info.enemy_type[0]=FLY_CHONGER_A;
 800b9d6:	4b8e      	ldr	r3, [pc, #568]	; (800bc10 <init_level+0x2a4>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	61da      	str	r2, [r3, #28]
    	level_info.enemy_type[1]=FLY_MOVER_A;
 800b9dc:	4b8c      	ldr	r3, [pc, #560]	; (800bc10 <init_level+0x2a4>)
 800b9de:	2204      	movs	r2, #4
 800b9e0:	621a      	str	r2, [r3, #32]
    	level_info.goal=8;
 800b9e2:	4b8b      	ldr	r3, [pc, #556]	; (800bc10 <init_level+0x2a4>)
 800b9e4:	2208      	movs	r2, #8
 800b9e6:	645a      	str	r2, [r3, #68]	; 0x44
 800b9e8:	e05b      	b.n	800baa2 <init_level+0x136>
    }else if(level_num==2){
 800b9ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d118      	bne.n	800ba26 <init_level+0xba>
    	level_info.maxHP=4;
 800b9f4:	4b86      	ldr	r3, [pc, #536]	; (800bc10 <init_level+0x2a4>)
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	611a      	str	r2, [r3, #16]
    	level_info.minHP=2;
 800b9fa:	4b85      	ldr	r3, [pc, #532]	; (800bc10 <init_level+0x2a4>)
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	615a      	str	r2, [r3, #20]
    	level_info.enemy_type_num=4;
 800ba00:	4b83      	ldr	r3, [pc, #524]	; (800bc10 <init_level+0x2a4>)
 800ba02:	2204      	movs	r2, #4
 800ba04:	619a      	str	r2, [r3, #24]
    	level_info.enemy_type[0]=FLY_CHONGER_A;
 800ba06:	4b82      	ldr	r3, [pc, #520]	; (800bc10 <init_level+0x2a4>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	61da      	str	r2, [r3, #28]
    	level_info.enemy_type[1]=FLY_MOVER_A;
 800ba0c:	4b80      	ldr	r3, [pc, #512]	; (800bc10 <init_level+0x2a4>)
 800ba0e:	2204      	movs	r2, #4
 800ba10:	621a      	str	r2, [r3, #32]
    	level_info.enemy_type[2]=FLY_CHONGER_B;
 800ba12:	4b7f      	ldr	r3, [pc, #508]	; (800bc10 <init_level+0x2a4>)
 800ba14:	2202      	movs	r2, #2
 800ba16:	625a      	str	r2, [r3, #36]	; 0x24
    	level_info.enemy_type[3]=FLY_MOVER_B;
 800ba18:	4b7d      	ldr	r3, [pc, #500]	; (800bc10 <init_level+0x2a4>)
 800ba1a:	2205      	movs	r2, #5
 800ba1c:	629a      	str	r2, [r3, #40]	; 0x28
    	level_info.goal=40;
 800ba1e:	4b7c      	ldr	r3, [pc, #496]	; (800bc10 <init_level+0x2a4>)
 800ba20:	2228      	movs	r2, #40	; 0x28
 800ba22:	645a      	str	r2, [r3, #68]	; 0x44
 800ba24:	e03d      	b.n	800baa2 <init_level+0x136>
    }else if(level_num==3){
 800ba26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d11b      	bne.n	800ba68 <init_level+0xfc>
    	level_info.maxHP=5;
 800ba30:	4b77      	ldr	r3, [pc, #476]	; (800bc10 <init_level+0x2a4>)
 800ba32:	2205      	movs	r2, #5
 800ba34:	611a      	str	r2, [r3, #16]
    	level_info.minHP=3;
 800ba36:	4b76      	ldr	r3, [pc, #472]	; (800bc10 <init_level+0x2a4>)
 800ba38:	2203      	movs	r2, #3
 800ba3a:	615a      	str	r2, [r3, #20]
    	level_info.enemy_type_num=5;
 800ba3c:	4b74      	ldr	r3, [pc, #464]	; (800bc10 <init_level+0x2a4>)
 800ba3e:	2205      	movs	r2, #5
 800ba40:	619a      	str	r2, [r3, #24]
    	level_info.enemy_type[0]=FLY_CHONGER_B;
 800ba42:	4b73      	ldr	r3, [pc, #460]	; (800bc10 <init_level+0x2a4>)
 800ba44:	2202      	movs	r2, #2
 800ba46:	61da      	str	r2, [r3, #28]
    	level_info.enemy_type[1]=FLY_MOVER_B;
 800ba48:	4b71      	ldr	r3, [pc, #452]	; (800bc10 <init_level+0x2a4>)
 800ba4a:	2205      	movs	r2, #5
 800ba4c:	621a      	str	r2, [r3, #32]
    	level_info.enemy_type[2]=FLY_CHONGER_C;
 800ba4e:	4b70      	ldr	r3, [pc, #448]	; (800bc10 <init_level+0x2a4>)
 800ba50:	2203      	movs	r2, #3
 800ba52:	625a      	str	r2, [r3, #36]	; 0x24
    	level_info.enemy_type[3]=FLY_MOVER_C;
 800ba54:	4b6e      	ldr	r3, [pc, #440]	; (800bc10 <init_level+0x2a4>)
 800ba56:	2206      	movs	r2, #6
 800ba58:	629a      	str	r2, [r3, #40]	; 0x28
    	level_info.enemy_type[4]=FLY_STORYER;
 800ba5a:	4b6d      	ldr	r3, [pc, #436]	; (800bc10 <init_level+0x2a4>)
 800ba5c:	2207      	movs	r2, #7
 800ba5e:	62da      	str	r2, [r3, #44]	; 0x2c
    	level_info.goal=150;
 800ba60:	4b6b      	ldr	r3, [pc, #428]	; (800bc10 <init_level+0x2a4>)
 800ba62:	2296      	movs	r2, #150	; 0x96
 800ba64:	645a      	str	r2, [r3, #68]	; 0x44
 800ba66:	e01c      	b.n	800baa2 <init_level+0x136>
    }else if(level_num==4){
 800ba68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d105      	bne.n	800ba7e <init_level+0x112>
    	state=5;
 800ba72:	4b68      	ldr	r3, [pc, #416]	; (800bc14 <init_level+0x2a8>)
 800ba74:	2205      	movs	r2, #5
 800ba76:	601a      	str	r2, [r3, #0]
    	init_boss();
 800ba78:	f7ff ff5c 	bl	800b934 <init_boss>
 800ba7c:	e011      	b.n	800baa2 <init_level+0x136>
    }else{
    	level_info.maxHP=2;
 800ba7e:	4b64      	ldr	r3, [pc, #400]	; (800bc10 <init_level+0x2a4>)
 800ba80:	2202      	movs	r2, #2
 800ba82:	611a      	str	r2, [r3, #16]
    	level_info.minHP=1;
 800ba84:	4b62      	ldr	r3, [pc, #392]	; (800bc10 <init_level+0x2a4>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	615a      	str	r2, [r3, #20]
    	level_info.enemy_type_num=2;
 800ba8a:	4b61      	ldr	r3, [pc, #388]	; (800bc10 <init_level+0x2a4>)
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	619a      	str	r2, [r3, #24]
    	level_info.enemy_type[0]=FLY_CHONGER_A;
 800ba90:	4b5f      	ldr	r3, [pc, #380]	; (800bc10 <init_level+0x2a4>)
 800ba92:	2201      	movs	r2, #1
 800ba94:	61da      	str	r2, [r3, #28]
    	level_info.enemy_type[1]=FLY_MOVER_A;
 800ba96:	4b5e      	ldr	r3, [pc, #376]	; (800bc10 <init_level+0x2a4>)
 800ba98:	2204      	movs	r2, #4
 800ba9a:	621a      	str	r2, [r3, #32]
    	level_info.goal=10;
 800ba9c:	4b5c      	ldr	r3, [pc, #368]	; (800bc10 <init_level+0x2a4>)
 800ba9e:	220a      	movs	r2, #10
 800baa0:	645a      	str	r2, [r3, #68]	; 0x44
    }
	Fly fly = fly_factory(1);
 800baa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800baa6:	2101      	movs	r1, #1
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe f96d 	bl	8009d88 <fly_factory>
	fly.x=120; fly.y=SCREEN_HEIGHT-30;
 800baae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bab2:	2278      	movs	r2, #120	; 0x78
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800baba:	f44f 7291 	mov.w	r2, #290	; 0x122
 800babe:	605a      	str	r2, [r3, #4]
	fly.fire_num=8;
 800bac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bac4:	2208      	movs	r2, #8
 800bac6:	619a      	str	r2, [r3, #24]
	fly.fires[0]=fire_factory(FIRE_SLOW_LINE);
 800bac8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bacc:	463b      	mov	r3, r7
 800bace:	2101      	movs	r1, #1
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe f8cd 	bl	8009c70 <fire_factory>
 800bad6:	463b      	mov	r3, r7
 800bad8:	341c      	adds	r4, #28
 800bada:	461d      	mov	r5, r3
 800badc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	6023      	str	r3, [r4, #0]
	fly.fires[1]=fire_factory(FIRE_HIGH_LINE);
 800bae8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800baec:	463b      	mov	r3, r7
 800baee:	2102      	movs	r1, #2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe f8bd 	bl	8009c70 <fire_factory>
 800baf6:	463b      	mov	r3, r7
 800baf8:	3440      	adds	r4, #64	; 0x40
 800bafa:	461d      	mov	r5, r3
 800bafc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bafe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	6023      	str	r3, [r4, #0]
	fly.fires[2]=fire_factory(FIRE_MULTI_LINE60);
 800bb08:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	2103      	movs	r1, #3
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe f8ad 	bl	8009c70 <fire_factory>
 800bb16:	463b      	mov	r3, r7
 800bb18:	3464      	adds	r4, #100	; 0x64
 800bb1a:	461d      	mov	r5, r3
 800bb1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	6023      	str	r3, [r4, #0]
	fly.fires[3]=fire_factory(FIRE_MULTI_LINE45);
 800bb28:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bb2c:	463b      	mov	r3, r7
 800bb2e:	2104      	movs	r1, #4
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fe f89d 	bl	8009c70 <fire_factory>
 800bb36:	463b      	mov	r3, r7
 800bb38:	3488      	adds	r4, #136	; 0x88
 800bb3a:	461d      	mov	r5, r3
 800bb3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	6023      	str	r3, [r4, #0]
	fly.fires[4]=fire_factory(FIRE_MULTI_LINE30);
 800bb48:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	2105      	movs	r1, #5
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe f88d 	bl	8009c70 <fire_factory>
 800bb56:	463b      	mov	r3, r7
 800bb58:	34ac      	adds	r4, #172	; 0xac
 800bb5a:	461d      	mov	r5, r3
 800bb5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	6023      	str	r3, [r4, #0]
	fly.fires[5]=fire_factory(FIRE_HEART);
 800bb68:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	2106      	movs	r1, #6
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe f87d 	bl	8009c70 <fire_factory>
 800bb76:	463b      	mov	r3, r7
 800bb78:	34d0      	adds	r4, #208	; 0xd0
 800bb7a:	461d      	mov	r5, r3
 800bb7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	6023      	str	r3, [r4, #0]
	fly.fires[6]=fire_factory(FIRE_SNAKE);
 800bb88:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bb8c:	463b      	mov	r3, r7
 800bb8e:	2107      	movs	r1, #7
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe f86d 	bl	8009c70 <fire_factory>
 800bb96:	463b      	mov	r3, r7
 800bb98:	34f4      	adds	r4, #244	; 0xf4
 800bb9a:	461d      	mov	r5, r3
 800bb9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	6023      	str	r3, [r4, #0]
	fly.fires[7]=fire_factory(FIRE_SPIRAL);
 800bba8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bbac:	463b      	mov	r3, r7
 800bbae:	2108      	movs	r1, #8
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe f85d 	bl	8009c70 <fire_factory>
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800bbbc:	461d      	mov	r5, r3
 800bbbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbc6:	682b      	ldr	r3, [r5, #0]
 800bbc8:	6023      	str	r3, [r4, #0]
	flys[0]=fly;
 800bbca:	4a13      	ldr	r2, [pc, #76]	; (800bc18 <init_level+0x2ac>)
 800bbcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 800bbd8:	461a      	mov	r2, r3
 800bbda:	f000 fe05 	bl	800c7e8 <memcpy>
	fly_num=1;
 800bbde:	4b0b      	ldr	r3, [pc, #44]	; (800bc0c <init_level+0x2a0>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	601a      	str	r2, [r3, #0]
	setHeroFire();
 800bbe4:	f7fc fe64 	bl	80088b0 <setHeroFire>
    game_cnt=0;
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <init_level+0x2b0>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
    updateInfo();
 800bbee:	f7ff fe37 	bl	800b860 <updateInfo>
}
 800bbf2:	bf00      	nop
 800bbf4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bdb0      	pop	{r4, r5, r7, pc}
 800bbfc:	40010800 	.word	0x40010800
 800bc00:	40011400 	.word	0x40011400
 800bc04:	20003660 	.word	0x20003660
 800bc08:	200053bc 	.word	0x200053bc
 800bc0c:	20003658 	.word	0x20003658
 800bc10:	200037f0 	.word	0x200037f0
 800bc14:	20003610 	.word	0x20003610
 800bc18:	20001180 	.word	0x20001180
 800bc1c:	20003614 	.word	0x20003614

0800bc20 <change_level>:

void change_level(){
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
	if(game_cnt%10==0){
 800bc24:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <change_level+0x50>)
 800bc26:	6819      	ldr	r1, [r3, #0]
 800bc28:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <change_level+0x54>)
 800bc2a:	fb83 2301 	smull	r2, r3, r3, r1
 800bc2e:	109a      	asrs	r2, r3, #2
 800bc30:	17cb      	asrs	r3, r1, #31
 800bc32:	1ad2      	subs	r2, r2, r3
 800bc34:	4613      	mov	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	1aca      	subs	r2, r1, r3
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	d111      	bne.n	800bc66 <change_level+0x46>
		if(level_info.maxTime>30)level_info.maxTime--;
 800bc42:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <change_level+0x58>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b1e      	cmp	r3, #30
 800bc48:	dd04      	ble.n	800bc54 <change_level+0x34>
 800bc4a:	4b0b      	ldr	r3, [pc, #44]	; (800bc78 <change_level+0x58>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4a09      	ldr	r2, [pc, #36]	; (800bc78 <change_level+0x58>)
 800bc52:	6013      	str	r3, [r2, #0]
		if(level_info.minTime>20)level_info.minTime--;
 800bc54:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <change_level+0x58>)
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b14      	cmp	r3, #20
 800bc5a:	dd04      	ble.n	800bc66 <change_level+0x46>
 800bc5c:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <change_level+0x58>)
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4a05      	ldr	r2, [pc, #20]	; (800bc78 <change_level+0x58>)
 800bc64:	6053      	str	r3, [r2, #4]
	}
}
 800bc66:	bf00      	nop
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bc80      	pop	{r7}
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	20003614 	.word	0x20003614
 800bc74:	66666667 	.word	0x66666667
 800bc78:	200037f0 	.word	0x200037f0

0800bc7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08a      	sub	sp, #40	; 0x28
 800bc80:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bc82:	f7f5 f9f3 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bc86:	f000 fa7b 	bl	800c180 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800bc8a:	f7f8 fa6d 	bl	8004168 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bc8e:	f7f6 fea3 	bl	80029d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800bc92:	f000 fce3 	bl	800c65c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800bc96:	f000 fbbf 	bl	800c418 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state=1;key_a=0; key_b=0; key_c=0;
 800bc9a:	4bb6      	ldr	r3, [pc, #728]	; (800bf74 <main+0x2f8>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	4bb5      	ldr	r3, [pc, #724]	; (800bf78 <main+0x2fc>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	4bb5      	ldr	r3, [pc, #724]	; (800bf7c <main+0x300>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	4bb4      	ldr	r3, [pc, #720]	; (800bf80 <main+0x304>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	601a      	str	r2, [r3, #0]
  char msg[30];
  init_game();
 800bcb2:	f7ff fe03 	bl	800b8bc <init_game>
  while (1)
  {//bul_num_e,bul_num_h,fly_num,
	if(state==1){
 800bcb6:	4baf      	ldr	r3, [pc, #700]	; (800bf74 <main+0x2f8>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d14f      	bne.n	800bd5e <main+0xe2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bcc4:	48af      	ldr	r0, [pc, #700]	; (800bf84 <main+0x308>)
 800bcc6:	f7f5 fce4 	bl	8001692 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bcca:	2200      	movs	r2, #0
 800bccc:	2104      	movs	r1, #4
 800bcce:	48ae      	ldr	r0, [pc, #696]	; (800bf88 <main+0x30c>)
 800bcd0:	f7f5 fcdf 	bl	8001692 <HAL_GPIO_WritePin>
		draw_fly(120,185,1,1,RED);
 800bcd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bce2:	21b9      	movs	r1, #185	; 0xb9
 800bce4:	2078      	movs	r0, #120	; 0x78
 800bce6:	f7fe fdcf 	bl	800a888 <draw_fly>
		LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Aircraft Battle");
 800bcea:	4ba8      	ldr	r3, [pc, #672]	; (800bf8c <main+0x310>)
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	2318      	movs	r3, #24
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	2318      	movs	r3, #24
 800bcf4:	22c8      	movs	r2, #200	; 0xc8
 800bcf6:	2128      	movs	r1, #40	; 0x28
 800bcf8:	201e      	movs	r0, #30
 800bcfa:	f7fc fc2d 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(30, 260, 200, 24, 24, (uint8_t*) "Start");
 800bcfe:	4ba4      	ldr	r3, [pc, #656]	; (800bf90 <main+0x314>)
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	2318      	movs	r3, #24
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	2318      	movs	r3, #24
 800bd08:	22c8      	movs	r2, #200	; 0xc8
 800bd0a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800bd0e:	201e      	movs	r0, #30
 800bd10:	f7fc fc22 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(150, 260, 200, 24, 24, (uint8_t*) "Exit");
 800bd14:	4b9f      	ldr	r3, [pc, #636]	; (800bf94 <main+0x318>)
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	2318      	movs	r3, #24
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	2318      	movs	r3, #24
 800bd1e:	22c8      	movs	r2, #200	; 0xc8
 800bd20:	f44f 7182 	mov.w	r1, #260	; 0x104
 800bd24:	2096      	movs	r0, #150	; 0x96
 800bd26:	f7fc fc17 	bl	8008558 <LCD_ShowString>
		if(key_a==1){
 800bd2a:	4b93      	ldr	r3, [pc, #588]	; (800bf78 <main+0x2fc>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d1c1      	bne.n	800bcb6 <main+0x3a>
			state=2;
 800bd32:	4b90      	ldr	r3, [pc, #576]	; (800bf74 <main+0x2f8>)
 800bd34:	2202      	movs	r2, #2
 800bd36:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800bd38:	4b8f      	ldr	r3, [pc, #572]	; (800bf78 <main+0x2fc>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	4b8f      	ldr	r3, [pc, #572]	; (800bf7c <main+0x300>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	4b8e      	ldr	r3, [pc, #568]	; (800bf80 <main+0x304>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
            LCD_Clear(WHITE);
 800bd4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bd4e:	f7fc f939 	bl	8007fc4 <LCD_Clear>
            init_level(level_num);
 800bd52:	4b91      	ldr	r3, [pc, #580]	; (800bf98 <main+0x31c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fe08 	bl	800b96c <init_level>
 800bd5c:	e7ab      	b.n	800bcb6 <main+0x3a>
		}
	}else if(state==2){
 800bd5e:	4b85      	ldr	r3, [pc, #532]	; (800bf74 <main+0x2f8>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d13a      	bne.n	800bddc <main+0x160>
		game_cnt++;
 800bd66:	4b8d      	ldr	r3, [pc, #564]	; (800bf9c <main+0x320>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	4a8b      	ldr	r2, [pc, #556]	; (800bf9c <main+0x320>)
 800bd6e:	6013      	str	r3, [r2, #0]
		control();
 800bd70:	f7ff f842 	bl	800adf8 <control>
		draw_screen();
 800bd74:	f7fe fe96 	bl	800aaa4 <draw_screen>
		HAL_Delay(80);
 800bd78:	2050      	movs	r0, #80	; 0x50
 800bd7a:	f7f5 f9d9 	bl	8001130 <HAL_Delay>
		clear_screen();
 800bd7e:	f7fe ffa1 	bl	800acc4 <clear_screen>
		if(score>level_info.goal){
 800bd82:	4b87      	ldr	r3, [pc, #540]	; (800bfa0 <main+0x324>)
 800bd84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd86:	4b87      	ldr	r3, [pc, #540]	; (800bfa4 <main+0x328>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	da10      	bge.n	800bdb0 <main+0x134>
			state=4;
 800bd8e:	4b79      	ldr	r3, [pc, #484]	; (800bf74 <main+0x2f8>)
 800bd90:	2204      	movs	r2, #4
 800bd92:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800bd94:	4b78      	ldr	r3, [pc, #480]	; (800bf78 <main+0x2fc>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	4b78      	ldr	r3, [pc, #480]	; (800bf7c <main+0x300>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	4b77      	ldr	r3, [pc, #476]	; (800bf80 <main+0x304>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
			LCD_Clear(WHITE);
 800bda6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bdaa:	f7fc f90b 	bl	8007fc4 <LCD_Clear>
 800bdae:	e782      	b.n	800bcb6 <main+0x3a>
		}else if(myhp<=0){
 800bdb0:	4b7d      	ldr	r3, [pc, #500]	; (800bfa8 <main+0x32c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f73f af7e 	bgt.w	800bcb6 <main+0x3a>
			state=3;
 800bdba:	4b6e      	ldr	r3, [pc, #440]	; (800bf74 <main+0x2f8>)
 800bdbc:	2203      	movs	r2, #3
 800bdbe:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800bdc0:	4b6d      	ldr	r3, [pc, #436]	; (800bf78 <main+0x2fc>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	4b6d      	ldr	r3, [pc, #436]	; (800bf7c <main+0x300>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	4b6c      	ldr	r3, [pc, #432]	; (800bf80 <main+0x304>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
			LCD_Clear(WHITE);
 800bdd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bdd6:	f7fc f8f5 	bl	8007fc4 <LCD_Clear>
 800bdda:	e76c      	b.n	800bcb6 <main+0x3a>
		}
	}else if(state==3){
 800bddc:	4b65      	ldr	r3, [pc, #404]	; (800bf74 <main+0x2f8>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d16c      	bne.n	800bebe <main+0x242>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800bde4:	2200      	movs	r2, #0
 800bde6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdea:	4866      	ldr	r0, [pc, #408]	; (800bf84 <main+0x308>)
 800bdec:	f7f5 fc51 	bl	8001692 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	2104      	movs	r1, #4
 800bdf4:	4864      	ldr	r0, [pc, #400]	; (800bf88 <main+0x30c>)
 800bdf6:	f7f5 fc4c 	bl	8001692 <HAL_GPIO_WritePin>
		draw_fly(120,185,1,1,GRAY);
 800bdfa:	f248 4330 	movw	r3, #33840	; 0x8430
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800be08:	21b9      	movs	r1, #185	; 0xb9
 800be0a:	2078      	movs	r0, #120	; 0x78
 800be0c:	f7fe fd3c 	bl	800a888 <draw_fly>
		LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "You are loser!");
 800be10:	4b66      	ldr	r3, [pc, #408]	; (800bfac <main+0x330>)
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	2318      	movs	r3, #24
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	2318      	movs	r3, #24
 800be1a:	22c8      	movs	r2, #200	; 0xc8
 800be1c:	2128      	movs	r1, #40	; 0x28
 800be1e:	201e      	movs	r0, #30
 800be20:	f7fc fb9a 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(30, 260, 200, 24, 24, (uint8_t*) "Restart");
 800be24:	4b62      	ldr	r3, [pc, #392]	; (800bfb0 <main+0x334>)
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	2318      	movs	r3, #24
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	2318      	movs	r3, #24
 800be2e:	22c8      	movs	r2, #200	; 0xc8
 800be30:	f44f 7182 	mov.w	r1, #260	; 0x104
 800be34:	201e      	movs	r0, #30
 800be36:	f7fc fb8f 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(150, 260, 200, 24, 24, (uint8_t*) "Exit");
 800be3a:	4b56      	ldr	r3, [pc, #344]	; (800bf94 <main+0x318>)
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	2318      	movs	r3, #24
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	2318      	movs	r3, #24
 800be44:	22c8      	movs	r2, #200	; 0xc8
 800be46:	f44f 7182 	mov.w	r1, #260	; 0x104
 800be4a:	2096      	movs	r0, #150	; 0x96
 800be4c:	f7fc fb84 	bl	8008558 <LCD_ShowString>
		play_mus();
 800be50:	f000 fbd4 	bl	800c5fc <play_mus>
		if(key_a==1){
 800be54:	4b48      	ldr	r3, [pc, #288]	; (800bf78 <main+0x2fc>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d11a      	bne.n	800be92 <main+0x216>
			init_game();
 800be5c:	f7ff fd2e 	bl	800b8bc <init_game>
			level_num=1;
 800be60:	4b4d      	ldr	r3, [pc, #308]	; (800bf98 <main+0x31c>)
 800be62:	2201      	movs	r2, #1
 800be64:	601a      	str	r2, [r3, #0]
			state=2;
 800be66:	4b43      	ldr	r3, [pc, #268]	; (800bf74 <main+0x2f8>)
 800be68:	2202      	movs	r2, #2
 800be6a:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800be6c:	4b42      	ldr	r3, [pc, #264]	; (800bf78 <main+0x2fc>)
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	4b42      	ldr	r3, [pc, #264]	; (800bf7c <main+0x300>)
 800be74:	2200      	movs	r2, #0
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	4b41      	ldr	r3, [pc, #260]	; (800bf80 <main+0x304>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	601a      	str	r2, [r3, #0]
            LCD_Clear(WHITE);
 800be7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800be82:	f7fc f89f 	bl	8007fc4 <LCD_Clear>
            init_level(level_num);
 800be86:	4b44      	ldr	r3, [pc, #272]	; (800bf98 <main+0x31c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff fd6e 	bl	800b96c <init_level>
 800be90:	e711      	b.n	800bcb6 <main+0x3a>
		}else if(key_b==1){
 800be92:	4b3a      	ldr	r3, [pc, #232]	; (800bf7c <main+0x300>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b01      	cmp	r3, #1
 800be98:	f47f af0d 	bne.w	800bcb6 <main+0x3a>
			state=1;
 800be9c:	4b35      	ldr	r3, [pc, #212]	; (800bf74 <main+0x2f8>)
 800be9e:	2201      	movs	r2, #1
 800bea0:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800bea2:	4b35      	ldr	r3, [pc, #212]	; (800bf78 <main+0x2fc>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	4b34      	ldr	r3, [pc, #208]	; (800bf7c <main+0x300>)
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	4b34      	ldr	r3, [pc, #208]	; (800bf80 <main+0x304>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	601a      	str	r2, [r3, #0]
            LCD_Clear(WHITE);
 800beb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800beb8:	f7fc f884 	bl	8007fc4 <LCD_Clear>
 800bebc:	e6fb      	b.n	800bcb6 <main+0x3a>

		}
	}else if(state==4){
 800bebe:	4b2d      	ldr	r3, [pc, #180]	; (800bf74 <main+0x2f8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	f040 808e 	bne.w	800bfe4 <main+0x368>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800bec8:	2200      	movs	r2, #0
 800beca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bece:	482d      	ldr	r0, [pc, #180]	; (800bf84 <main+0x308>)
 800bed0:	f7f5 fbdf 	bl	8001692 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bed4:	2200      	movs	r2, #0
 800bed6:	2104      	movs	r1, #4
 800bed8:	482b      	ldr	r0, [pc, #172]	; (800bf88 <main+0x30c>)
 800beda:	f7f5 fbda 	bl	8001692 <HAL_GPIO_WritePin>
		draw_fly(120,185,1,1,RED);
 800bede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bee8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800beec:	21b9      	movs	r1, #185	; 0xb9
 800beee:	2078      	movs	r0, #120	; 0x78
 800bef0:	f7fe fcca 	bl	800a888 <draw_fly>
		LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Aircraft Battle");
 800bef4:	4b25      	ldr	r3, [pc, #148]	; (800bf8c <main+0x310>)
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	2318      	movs	r3, #24
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2318      	movs	r3, #24
 800befe:	22c8      	movs	r2, #200	; 0xc8
 800bf00:	2128      	movs	r1, #40	; 0x28
 800bf02:	201e      	movs	r0, #30
 800bf04:	f7fc fb28 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(30, 260, 200, 24, 24, (uint8_t*) "Next Lv ");
 800bf08:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <main+0x338>)
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	2318      	movs	r3, #24
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2318      	movs	r3, #24
 800bf12:	22c8      	movs	r2, #200	; 0xc8
 800bf14:	f44f 7182 	mov.w	r1, #260	; 0x104
 800bf18:	201e      	movs	r0, #30
 800bf1a:	f7fc fb1d 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(150, 260, 200, 24, 24, (uint8_t*) "Exit");
 800bf1e:	4b1d      	ldr	r3, [pc, #116]	; (800bf94 <main+0x318>)
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	2318      	movs	r3, #24
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	2318      	movs	r3, #24
 800bf28:	22c8      	movs	r2, #200	; 0xc8
 800bf2a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800bf2e:	2096      	movs	r0, #150	; 0x96
 800bf30:	f7fc fb12 	bl	8008558 <LCD_ShowString>
			if(key_a==1){
 800bf34:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <main+0x2fc>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d13d      	bne.n	800bfb8 <main+0x33c>
				level_num++;
 800bf3c:	4b16      	ldr	r3, [pc, #88]	; (800bf98 <main+0x31c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3301      	adds	r3, #1
 800bf42:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <main+0x31c>)
 800bf44:	6013      	str	r3, [r2, #0]
				state=2;
 800bf46:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <main+0x2f8>)
 800bf48:	2202      	movs	r2, #2
 800bf4a:	601a      	str	r2, [r3, #0]
				key_a=0; key_b=0; key_c=0;
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	; (800bf78 <main+0x2fc>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <main+0x300>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <main+0x304>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
	            LCD_Clear(WHITE);
 800bf5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bf62:	f7fc f82f 	bl	8007fc4 <LCD_Clear>
	            init_level(level_num);
 800bf66:	4b0c      	ldr	r3, [pc, #48]	; (800bf98 <main+0x31c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff fcfe 	bl	800b96c <init_level>
 800bf70:	e6a1      	b.n	800bcb6 <main+0x3a>
 800bf72:	bf00      	nop
 800bf74:	20003610 	.word	0x20003610
 800bf78:	20000490 	.word	0x20000490
 800bf7c:	20000494 	.word	0x20000494
 800bf80:	20000498 	.word	0x20000498
 800bf84:	40010800 	.word	0x40010800
 800bf88:	40011400 	.word	0x40011400
 800bf8c:	0800e190 	.word	0x0800e190
 800bf90:	0800e1a0 	.word	0x0800e1a0
 800bf94:	0800e1a8 	.word	0x0800e1a8
 800bf98:	2000365c 	.word	0x2000365c
 800bf9c:	20003614 	.word	0x20003614
 800bfa0:	200037f0 	.word	0x200037f0
 800bfa4:	20003654 	.word	0x20003654
 800bfa8:	2000117c 	.word	0x2000117c
 800bfac:	0800e1b0 	.word	0x0800e1b0
 800bfb0:	0800e1c0 	.word	0x0800e1c0
 800bfb4:	0800e1c8 	.word	0x0800e1c8

			}else if(key_b==1){
 800bfb8:	4b64      	ldr	r3, [pc, #400]	; (800c14c <main+0x4d0>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	f47f ae7a 	bne.w	800bcb6 <main+0x3a>
				state=1;
 800bfc2:	4b63      	ldr	r3, [pc, #396]	; (800c150 <main+0x4d4>)
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	601a      	str	r2, [r3, #0]
				key_a=0; key_b=0; key_c=0;
 800bfc8:	4b62      	ldr	r3, [pc, #392]	; (800c154 <main+0x4d8>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	4b5f      	ldr	r3, [pc, #380]	; (800c14c <main+0x4d0>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	4b60      	ldr	r3, [pc, #384]	; (800c158 <main+0x4dc>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]
	            LCD_Clear(WHITE);
 800bfda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bfde:	f7fb fff1 	bl	8007fc4 <LCD_Clear>
 800bfe2:	e668      	b.n	800bcb6 <main+0x3a>
			}
	}else if(state==5){
 800bfe4:	4b5a      	ldr	r3, [pc, #360]	; (800c150 <main+0x4d4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b05      	cmp	r3, #5
 800bfea:	d13c      	bne.n	800c066 <main+0x3ea>
		draw_screen();
 800bfec:	f7fe fd5a 	bl	800aaa4 <draw_screen>
		drawBoss();
 800bff0:	f7ff fa72 	bl	800b4d8 <drawBoss>
		HAL_Delay(80);
 800bff4:	2050      	movs	r0, #80	; 0x50
 800bff6:	f7f5 f89b 	bl	8001130 <HAL_Delay>
		clear_screen();
 800bffa:	f7fe fe63 	bl	800acc4 <clear_screen>
		clearBoss();
 800bffe:	f7ff fb07 	bl	800b610 <clearBoss>
		game_cnt++;
 800c002:	4b56      	ldr	r3, [pc, #344]	; (800c15c <main+0x4e0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a54      	ldr	r2, [pc, #336]	; (800c15c <main+0x4e0>)
 800c00a:	6013      	str	r3, [r2, #0]
		BossControl();
 800c00c:	f7fe ff26 	bl	800ae5c <BossControl>
		if(boss.hp<=0){
 800c010:	4b53      	ldr	r3, [pc, #332]	; (800c160 <main+0x4e4>)
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dc10      	bgt.n	800c03a <main+0x3be>
			state=6;
 800c018:	4b4d      	ldr	r3, [pc, #308]	; (800c150 <main+0x4d4>)
 800c01a:	2206      	movs	r2, #6
 800c01c:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800c01e:	4b4d      	ldr	r3, [pc, #308]	; (800c154 <main+0x4d8>)
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	4b49      	ldr	r3, [pc, #292]	; (800c14c <main+0x4d0>)
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	4b4b      	ldr	r3, [pc, #300]	; (800c158 <main+0x4dc>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
			LCD_Clear(WHITE);
 800c030:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c034:	f7fb ffc6 	bl	8007fc4 <LCD_Clear>
 800c038:	e63d      	b.n	800bcb6 <main+0x3a>
		}else if(myhp<=0){
 800c03a:	4b4a      	ldr	r3, [pc, #296]	; (800c164 <main+0x4e8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f73f ae39 	bgt.w	800bcb6 <main+0x3a>
			state=3;
 800c044:	4b42      	ldr	r3, [pc, #264]	; (800c150 <main+0x4d4>)
 800c046:	2203      	movs	r2, #3
 800c048:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800c04a:	4b42      	ldr	r3, [pc, #264]	; (800c154 <main+0x4d8>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	4b3e      	ldr	r3, [pc, #248]	; (800c14c <main+0x4d0>)
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	4b40      	ldr	r3, [pc, #256]	; (800c158 <main+0x4dc>)
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]
			LCD_Clear(WHITE);
 800c05c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c060:	f7fb ffb0 	bl	8007fc4 <LCD_Clear>
 800c064:	e627      	b.n	800bcb6 <main+0x3a>
		}
	}else if(state==6){
 800c066:	4b3a      	ldr	r3, [pc, #232]	; (800c150 <main+0x4d4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b06      	cmp	r3, #6
 800c06c:	f47f ae23 	bne.w	800bcb6 <main+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800c070:	2200      	movs	r2, #0
 800c072:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c076:	483c      	ldr	r0, [pc, #240]	; (800c168 <main+0x4ec>)
 800c078:	f7f5 fb0b 	bl	8001692 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c07c:	2200      	movs	r2, #0
 800c07e:	2104      	movs	r1, #4
 800c080:	483a      	ldr	r0, [pc, #232]	; (800c16c <main+0x4f0>)
 800c082:	f7f5 fb06 	bl	8001692 <HAL_GPIO_WritePin>
		draw_fly(120,185,1,1,RED);
 800c086:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c090:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c094:	21b9      	movs	r1, #185	; 0xb9
 800c096:	2078      	movs	r0, #120	; 0x78
 800c098:	f7fe fbf6 	bl	800a888 <draw_fly>
		LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "You are winner!");
 800c09c:	4b34      	ldr	r3, [pc, #208]	; (800c170 <main+0x4f4>)
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	2318      	movs	r3, #24
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	2318      	movs	r3, #24
 800c0a6:	22c8      	movs	r2, #200	; 0xc8
 800c0a8:	2128      	movs	r1, #40	; 0x28
 800c0aa:	201e      	movs	r0, #30
 800c0ac:	f7fc fa54 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(30, 260, 200, 24, 24, (uint8_t*) "Again");
 800c0b0:	4b30      	ldr	r3, [pc, #192]	; (800c174 <main+0x4f8>)
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	2318      	movs	r3, #24
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2318      	movs	r3, #24
 800c0ba:	22c8      	movs	r2, #200	; 0xc8
 800c0bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c0c0:	201e      	movs	r0, #30
 800c0c2:	f7fc fa49 	bl	8008558 <LCD_ShowString>
		LCD_ShowString(150, 260, 200, 24, 24, (uint8_t*) "Exit");
 800c0c6:	4b2c      	ldr	r3, [pc, #176]	; (800c178 <main+0x4fc>)
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	2318      	movs	r3, #24
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	2318      	movs	r3, #24
 800c0d0:	22c8      	movs	r2, #200	; 0xc8
 800c0d2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c0d6:	2096      	movs	r0, #150	; 0x96
 800c0d8:	f7fc fa3e 	bl	8008558 <LCD_ShowString>
		if(key_a==1){
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <main+0x4d8>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d11a      	bne.n	800c11a <main+0x49e>
			init_game();
 800c0e4:	f7ff fbea 	bl	800b8bc <init_game>
			level_num=1;
 800c0e8:	4b24      	ldr	r3, [pc, #144]	; (800c17c <main+0x500>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
			state=2;
 800c0ee:	4b18      	ldr	r3, [pc, #96]	; (800c150 <main+0x4d4>)
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	601a      	str	r2, [r3, #0]
			key_a=0; key_b=0; key_c=0;
 800c0f4:	4b17      	ldr	r3, [pc, #92]	; (800c154 <main+0x4d8>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	4b14      	ldr	r3, [pc, #80]	; (800c14c <main+0x4d0>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	4b15      	ldr	r3, [pc, #84]	; (800c158 <main+0x4dc>)
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
            LCD_Clear(WHITE);
 800c106:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c10a:	f7fb ff5b 	bl	8007fc4 <LCD_Clear>
            init_level(level_num);
 800c10e:	4b1b      	ldr	r3, [pc, #108]	; (800c17c <main+0x500>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fc2a 	bl	800b96c <init_level>
 800c118:	e5cd      	b.n	800bcb6 <main+0x3a>
		}else if(key_b==1){
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <main+0x4d0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	f47f adc9 	bne.w	800bcb6 <main+0x3a>
			state=1;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <main+0x4d4>)
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
			init_game();
 800c12a:	f7ff fbc7 	bl	800b8bc <init_game>
			key_a=0; key_b=0; key_c=0;
 800c12e:	4b09      	ldr	r3, [pc, #36]	; (800c154 <main+0x4d8>)
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <main+0x4d0>)
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	4b07      	ldr	r3, [pc, #28]	; (800c158 <main+0x4dc>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
            LCD_Clear(WHITE);
 800c140:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c144:	f7fb ff3e 	bl	8007fc4 <LCD_Clear>
	if(state==1){
 800c148:	e5b5      	b.n	800bcb6 <main+0x3a>
 800c14a:	bf00      	nop
 800c14c:	20000494 	.word	0x20000494
 800c150:	20003610 	.word	0x20003610
 800c154:	20000490 	.word	0x20000490
 800c158:	20000498 	.word	0x20000498
 800c15c:	20003614 	.word	0x20003614
 800c160:	2000366c 	.word	0x2000366c
 800c164:	2000117c 	.word	0x2000117c
 800c168:	40010800 	.word	0x40010800
 800c16c:	40011400 	.word	0x40011400
 800c170:	0800e1d4 	.word	0x0800e1d4
 800c174:	0800e1e4 	.word	0x0800e1e4
 800c178:	0800e1a8 	.word	0x0800e1a8
 800c17c:	2000365c 	.word	0x2000365c

0800c180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b090      	sub	sp, #64	; 0x40
 800c184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c186:	f107 0318 	add.w	r3, r7, #24
 800c18a:	2228      	movs	r2, #40	; 0x28
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 fb35 	bl	800c7fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c194:	1d3b      	adds	r3, r7, #4
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	605a      	str	r2, [r3, #4]
 800c19c:	609a      	str	r2, [r3, #8]
 800c19e:	60da      	str	r2, [r3, #12]
 800c1a0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c1a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c1aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c1b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c1bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800c1be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c1c4:	f107 0318 	add.w	r3, r7, #24
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f5 faab 	bl	8001724 <HAL_RCC_OscConfig>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800c1d4:	f000 f819 	bl	800c20a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c1d8:	230f      	movs	r3, #15
 800c1da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c1dc:	2302      	movs	r3, #2
 800c1de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c1ee:	1d3b      	adds	r3, r7, #4
 800c1f0:	2102      	movs	r1, #2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f5 fd16 	bl	8001c24 <HAL_RCC_ClockConfig>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d001      	beq.n	800c202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800c1fe:	f000 f804 	bl	800c20a <Error_Handler>
  }
}
 800c202:	bf00      	nop
 800c204:	3740      	adds	r7, #64	; 0x40
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c20a:	b480      	push	{r7}
 800c20c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c20e:	bf00      	nop
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr
	...

0800c218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800c21e:	4b16      	ldr	r3, [pc, #88]	; (800c278 <HAL_MspInit+0x60>)
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	4a15      	ldr	r2, [pc, #84]	; (800c278 <HAL_MspInit+0x60>)
 800c224:	f043 0301 	orr.w	r3, r3, #1
 800c228:	6193      	str	r3, [r2, #24]
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <HAL_MspInit+0x60>)
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	60bb      	str	r3, [r7, #8]
 800c234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c236:	4b10      	ldr	r3, [pc, #64]	; (800c278 <HAL_MspInit+0x60>)
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	4a0f      	ldr	r2, [pc, #60]	; (800c278 <HAL_MspInit+0x60>)
 800c23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c240:	61d3      	str	r3, [r2, #28]
 800c242:	4b0d      	ldr	r3, [pc, #52]	; (800c278 <HAL_MspInit+0x60>)
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c24a:	607b      	str	r3, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800c24e:	2005      	movs	r0, #5
 800c250:	f7f5 f85c 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800c254:	4b09      	ldr	r3, [pc, #36]	; (800c27c <HAL_MspInit+0x64>)
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	4a04      	ldr	r2, [pc, #16]	; (800c27c <HAL_MspInit+0x64>)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c270:	bf00      	nop
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40021000 	.word	0x40021000
 800c27c:	40010000 	.word	0x40010000

0800c280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c284:	bf00      	nop
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr

0800c28c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c290:	e7fe      	b.n	800c290 <HardFault_Handler+0x4>

0800c292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c292:	b480      	push	{r7}
 800c294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c296:	e7fe      	b.n	800c296 <MemManage_Handler+0x4>

0800c298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c29c:	e7fe      	b.n	800c29c <BusFault_Handler+0x4>

0800c29e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c2a2:	e7fe      	b.n	800c2a2 <UsageFault_Handler+0x4>

0800c2a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c2a8:	bf00      	nop
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bc80      	pop	{r7}
 800c2ae:	4770      	bx	lr

0800c2b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c2b4:	bf00      	nop
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bc80      	pop	{r7}
 800c2ba:	4770      	bx	lr

0800c2bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr

0800c2c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c2cc:	f7f4 ff14 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c2d0:	bf00      	nop
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c2d8:	2001      	movs	r0, #1
 800c2da:	f7f5 fa0b 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c2de:	bf00      	nop
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800c2e6:	2020      	movs	r0, #32
 800c2e8:	f7f5 fa04 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c2ec:	bf00      	nop
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c2f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c2f8:	f7f5 f9fc 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c2fc:	bf00      	nop
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c308:	4b11      	ldr	r3, [pc, #68]	; (800c350 <_sbrk+0x50>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <_sbrk+0x16>
		heap_end = &end;
 800c310:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <_sbrk+0x50>)
 800c312:	4a10      	ldr	r2, [pc, #64]	; (800c354 <_sbrk+0x54>)
 800c314:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c316:	4b0e      	ldr	r3, [pc, #56]	; (800c350 <_sbrk+0x50>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c31c:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <_sbrk+0x50>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4413      	add	r3, r2
 800c324:	466a      	mov	r2, sp
 800c326:	4293      	cmp	r3, r2
 800c328:	d907      	bls.n	800c33a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c32a:	f000 fa33 	bl	800c794 <__errno>
 800c32e:	4602      	mov	r2, r0
 800c330:	230c      	movs	r3, #12
 800c332:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c334:	f04f 33ff 	mov.w	r3, #4294967295
 800c338:	e006      	b.n	800c348 <_sbrk+0x48>
	}

	heap_end += incr;
 800c33a:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_sbrk+0x50>)
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4413      	add	r3, r2
 800c342:	4a03      	ldr	r2, [pc, #12]	; (800c350 <_sbrk+0x50>)
 800c344:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c346:	68fb      	ldr	r3, [r7, #12]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	2000049c 	.word	0x2000049c
 800c354:	20005448 	.word	0x20005448

0800c358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c358:	b480      	push	{r7}
 800c35a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800c35c:	4b15      	ldr	r3, [pc, #84]	; (800c3b4 <SystemInit+0x5c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a14      	ldr	r2, [pc, #80]	; (800c3b4 <SystemInit+0x5c>)
 800c362:	f043 0301 	orr.w	r3, r3, #1
 800c366:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800c368:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <SystemInit+0x5c>)
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	4911      	ldr	r1, [pc, #68]	; (800c3b4 <SystemInit+0x5c>)
 800c36e:	4b12      	ldr	r3, [pc, #72]	; (800c3b8 <SystemInit+0x60>)
 800c370:	4013      	ands	r3, r2
 800c372:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <SystemInit+0x5c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a0e      	ldr	r2, [pc, #56]	; (800c3b4 <SystemInit+0x5c>)
 800c37a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c37e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c382:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c384:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <SystemInit+0x5c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a0a      	ldr	r2, [pc, #40]	; (800c3b4 <SystemInit+0x5c>)
 800c38a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c38e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800c390:	4b08      	ldr	r3, [pc, #32]	; (800c3b4 <SystemInit+0x5c>)
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4a07      	ldr	r2, [pc, #28]	; (800c3b4 <SystemInit+0x5c>)
 800c396:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800c39a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <SystemInit+0x5c>)
 800c39e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800c3a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800c3a4:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <SystemInit+0x64>)
 800c3a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c3aa:	609a      	str	r2, [r3, #8]
#endif 
}
 800c3ac:	bf00      	nop
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr
 800c3b4:	40021000 	.word	0x40021000
 800c3b8:	f8ff0000 	.word	0xf8ff0000
 800c3bc:	e000ed00 	.word	0xe000ed00

0800c3c0 <delay_ms>:
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void delay_ms(int32_t nms)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 int32_t temp;
 SysTick->LOAD = 8000*nms;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c3ce:	fb02 f203 	mul.w	r2, r2, r3
 800c3d2:	4b10      	ldr	r3, [pc, #64]	; (800c414 <delay_ms+0x54>)
 800c3d4:	605a      	str	r2, [r3, #4]
 SysTick->VAL=0X00;
 800c3d6:	4b0f      	ldr	r3, [pc, #60]	; (800c414 <delay_ms+0x54>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	609a      	str	r2, [r3, #8]
 SysTick->CTRL=0X01;
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <delay_ms+0x54>)
 800c3de:	2201      	movs	r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
  do
  {
       temp=SysTick->CTRL;
 800c3e2:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <delay_ms+0x54>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
  }
     while((temp&0x01)&&(!(temp&(1<<16))));
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d004      	beq.n	800c3fc <delay_ms+0x3c>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d0f2      	beq.n	800c3e2 <delay_ms+0x22>

     SysTick->CTRL=0x00;
 800c3fc:	4b05      	ldr	r3, [pc, #20]	; (800c414 <delay_ms+0x54>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
     SysTick->VAL =0X00;
 800c402:	4b04      	ldr	r3, [pc, #16]	; (800c414 <delay_ms+0x54>)
 800c404:	2200      	movs	r2, #0
 800c406:	609a      	str	r2, [r3, #8]
 }
 800c408:	bf00      	nop
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bc80      	pop	{r7}
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	e000e010 	.word	0xe000e010

0800c418 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c41e:	f107 0320 	add.w	r3, r7, #32
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c428:	1d3b      	adds	r3, r7, #4
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	605a      	str	r2, [r3, #4]
 800c430:	609a      	str	r2, [r3, #8]
 800c432:	60da      	str	r2, [r3, #12]
 800c434:	611a      	str	r2, [r3, #16]
 800c436:	615a      	str	r2, [r3, #20]
 800c438:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800c43a:	4b22      	ldr	r3, [pc, #136]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c43c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800c442:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c444:	224f      	movs	r2, #79	; 0x4f
 800c446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c448:	4b1e      	ldr	r3, [pc, #120]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800c44e:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c450:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c456:	4b1b      	ldr	r3, [pc, #108]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c458:	2200      	movs	r2, #0
 800c45a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c45e:	2200      	movs	r2, #0
 800c460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c462:	4818      	ldr	r0, [pc, #96]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c464:	f7f5 fd7a 	bl	8001f5c <HAL_TIM_PWM_Init>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800c46e:	f7ff fecc 	bl	800c20a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c472:	2300      	movs	r3, #0
 800c474:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c476:	2300      	movs	r3, #0
 800c478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c47a:	f107 0320 	add.w	r3, r7, #32
 800c47e:	4619      	mov	r1, r3
 800c480:	4810      	ldr	r0, [pc, #64]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c482:	f7f6 f93d 	bl	8002700 <HAL_TIMEx_MasterConfigSynchronization>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800c48c:	f7ff febd 	bl	800c20a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c490:	2360      	movs	r3, #96	; 0x60
 800c492:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c4a0:	1d3b      	adds	r3, r7, #4
 800c4a2:	2204      	movs	r2, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4807      	ldr	r0, [pc, #28]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c4a8:	f7f5 fe1a 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800c4b2:	f7ff feaa 	bl	800c20a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800c4b6:	4803      	ldr	r0, [pc, #12]	; (800c4c4 <MX_TIM2_Init+0xac>)
 800c4b8:	f000 f822 	bl	800c500 <HAL_TIM_MspPostInit>

}
 800c4bc:	bf00      	nop
 800c4be:	3728      	adds	r7, #40	; 0x28
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	200053c0 	.word	0x200053c0

0800c4c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d8:	d10b      	bne.n	800c4f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c4da:	4b08      	ldr	r3, [pc, #32]	; (800c4fc <HAL_TIM_PWM_MspInit+0x34>)
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	4a07      	ldr	r2, [pc, #28]	; (800c4fc <HAL_TIM_PWM_MspInit+0x34>)
 800c4e0:	f043 0301 	orr.w	r3, r3, #1
 800c4e4:	61d3      	str	r3, [r2, #28]
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <HAL_TIM_PWM_MspInit+0x34>)
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bc80      	pop	{r7}
 800c4fa:	4770      	bx	lr
 800c4fc:	40021000 	.word	0x40021000

0800c500 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	609a      	str	r2, [r3, #8]
 800c514:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c51e:	d117      	bne.n	800c550 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <HAL_TIM_MspPostInit+0x58>)
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	4a0c      	ldr	r2, [pc, #48]	; (800c558 <HAL_TIM_MspPostInit+0x58>)
 800c526:	f043 0304 	orr.w	r3, r3, #4
 800c52a:	6193      	str	r3, [r2, #24]
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <HAL_TIM_MspPostInit+0x58>)
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c538:	2302      	movs	r3, #2
 800c53a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c53c:	2302      	movs	r3, #2
 800c53e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c540:	2302      	movs	r3, #2
 800c542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c544:	f107 0310 	add.w	r3, r7, #16
 800c548:	4619      	mov	r1, r3
 800c54a:	4804      	ldr	r0, [pc, #16]	; (800c55c <HAL_TIM_MspPostInit+0x5c>)
 800c54c:	f7f4 ff20 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800c550:	bf00      	nop
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	40021000 	.word	0x40021000
 800c55c:	40010800 	.word	0x40010800

0800c560 <sound>:
	 2,2 ,2,4,2,4,2,2,12

};

void sound(int freq)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
	if(freq!=1000)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c56e:	d02f      	beq.n	800c5d0 <sound+0x70>
	{
		int Arr;

		TIM_OC_InitTypeDef sConfigOC = {0};
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	609a      	str	r2, [r3, #8]
 800c57c:	60da      	str	r2, [r3, #12]
 800c57e:	611a      	str	r2, [r3, #16]
 800c580:	615a      	str	r2, [r3, #20]
 800c582:	619a      	str	r2, [r3, #24]
		Arr = 500000/freq;
 800c584:	4a16      	ldr	r2, [pc, #88]	; (800c5e0 <sound+0x80>)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	fb92 f3f3 	sdiv	r3, r2, r3
 800c58c:	627b      	str	r3, [r7, #36]	; 0x24
		htim2.Init.Period = Arr;//改变频率来改变计数器周期
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	4a14      	ldr	r2, [pc, #80]	; (800c5e4 <sound+0x84>)
 800c592:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Init(&htim2);
 800c594:	4813      	ldr	r0, [pc, #76]	; (800c5e4 <sound+0x84>)
 800c596:	f7f5 fce1 	bl	8001f5c <HAL_TIM_PWM_Init>
		sConfigOC.Pulse = Arr/4;
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	da00      	bge.n	800c5a2 <sound+0x42>
 800c5a0:	3303      	adds	r3, #3
 800c5a2:	109b      	asrs	r3, r3, #2
 800c5a4:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c5a6:	2360      	movs	r3, #96	; 0x60
 800c5a8:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	613b      	str	r3, [r7, #16]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61bb      	str	r3, [r7, #24]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c5b2:	f107 0308 	add.w	r3, r7, #8
 800c5b6:	2204      	movs	r2, #4
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	480a      	ldr	r0, [pc, #40]	; (800c5e4 <sound+0x84>)
 800c5bc:	f7f5 fd90 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <sound+0x6a>
		{
			Error_Handler();
 800c5c6:	f7ff fe20 	bl	800c20a <Error_Handler>
		}
		HAL_TIM_MspPostInit(&htim2);
 800c5ca:	4806      	ldr	r0, [pc, #24]	; (800c5e4 <sound+0x84>)
 800c5cc:	f7ff ff98 	bl	800c500 <HAL_TIM_MspPostInit>

	}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);  //使能PWM定时�?
 800c5d0:	2104      	movs	r1, #4
 800c5d2:	4804      	ldr	r0, [pc, #16]	; (800c5e4 <sound+0x84>)
 800c5d4:	f7f5 fcee 	bl	8001fb4 <HAL_TIM_PWM_Start>
}
 800c5d8:	bf00      	nop
 800c5da:	3728      	adds	r7, #40	; 0x28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	0007a120 	.word	0x0007a120
 800c5e4:	200053c0 	.word	0x200053c0

0800c5e8 <buzzer_quit>:


void buzzer_quit()
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);//停止PWM定时�?
 800c5ec:	2104      	movs	r1, #4
 800c5ee:	4802      	ldr	r0, [pc, #8]	; (800c5f8 <buzzer_quit+0x10>)
 800c5f0:	f7f5 fd1e 	bl	8002030 <HAL_TIM_PWM_Stop>
}
 800c5f4:	bf00      	nop
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	200053c0 	.word	0x200053c0

0800c5fc <play_mus>:

void play_mus()//播放音乐
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
	int i;
	for(i=0;i<sizeof(yindiao);i++)
 800c602:	2300      	movs	r3, #0
 800c604:	607b      	str	r3, [r7, #4]
 800c606:	e01b      	b.n	800c640 <play_mus+0x44>
	{
			sound(tone[yindiao[i]]);
 800c608:	4a11      	ldr	r2, [pc, #68]	; (800c650 <play_mus+0x54>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c610:	4a10      	ldr	r2, [pc, #64]	; (800c654 <play_mus+0x58>)
 800c612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ffa2 	bl	800c560 <sound>
			delay_ms(150*dtime[i]);
 800c61c:	4a0e      	ldr	r2, [pc, #56]	; (800c658 <play_mus+0x5c>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c624:	2296      	movs	r2, #150	; 0x96
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff fec8 	bl	800c3c0 <delay_ms>
			buzzer_quit();
 800c630:	f7ff ffda 	bl	800c5e8 <buzzer_quit>
			delay_ms(20);
 800c634:	2014      	movs	r0, #20
 800c636:	f7ff fec3 	bl	800c3c0 <delay_ms>
	for(i=0;i<sizeof(yindiao);i++)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3301      	adds	r3, #1
 800c63e:	607b      	str	r3, [r7, #4]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800c646:	d3df      	bcc.n	800c608 <play_mus+0xc>
	}
}
 800c648:	bf00      	nop
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20000044 	.word	0x20000044
 800c654:	2000000c 	.word	0x2000000c
 800c658:	20000228 	.word	0x20000228

0800c65c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c660:	4b11      	ldr	r3, [pc, #68]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c662:	4a12      	ldr	r2, [pc, #72]	; (800c6ac <MX_USART1_UART_Init+0x50>)
 800c664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c666:	4b10      	ldr	r3, [pc, #64]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c66c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c66e:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c670:	2200      	movs	r2, #0
 800c672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c674:	4b0c      	ldr	r3, [pc, #48]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c676:	2200      	movs	r2, #0
 800c678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c67a:	4b0b      	ldr	r3, [pc, #44]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c680:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c682:	220c      	movs	r2, #12
 800c684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c686:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c688:	2200      	movs	r2, #0
 800c68a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c68e:	2200      	movs	r2, #0
 800c690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c692:	4805      	ldr	r0, [pc, #20]	; (800c6a8 <MX_USART1_UART_Init+0x4c>)
 800c694:	f7f6 f878 	bl	8002788 <HAL_UART_Init>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c69e:	f7ff fdb4 	bl	800c20a <Error_Handler>
  }

}
 800c6a2:	bf00      	nop
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20005400 	.word	0x20005400
 800c6ac:	40013800 	.word	0x40013800

0800c6b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6b8:	f107 0310 	add.w	r3, r7, #16
 800c6bc:	2200      	movs	r2, #0
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	605a      	str	r2, [r3, #4]
 800c6c2:	609a      	str	r2, [r3, #8]
 800c6c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a1c      	ldr	r2, [pc, #112]	; (800c73c <HAL_UART_MspInit+0x8c>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d131      	bne.n	800c734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c6d0:	4b1b      	ldr	r3, [pc, #108]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	4a1a      	ldr	r2, [pc, #104]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6da:	6193      	str	r3, [r2, #24]
 800c6dc:	4b18      	ldr	r3, [pc, #96]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	4a14      	ldr	r2, [pc, #80]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6ee:	f043 0304 	orr.w	r3, r3, #4
 800c6f2:	6193      	str	r3, [r2, #24]
 800c6f4:	4b12      	ldr	r3, [pc, #72]	; (800c740 <HAL_UART_MspInit+0x90>)
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	60bb      	str	r3, [r7, #8]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c700:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c706:	2302      	movs	r3, #2
 800c708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c70a:	2303      	movs	r3, #3
 800c70c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c70e:	f107 0310 	add.w	r3, r7, #16
 800c712:	4619      	mov	r1, r3
 800c714:	480b      	ldr	r0, [pc, #44]	; (800c744 <HAL_UART_MspInit+0x94>)
 800c716:	f7f4 fe3b 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c71a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c71e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c720:	2300      	movs	r3, #0
 800c722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c724:	2300      	movs	r3, #0
 800c726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c728:	f107 0310 	add.w	r3, r7, #16
 800c72c:	4619      	mov	r1, r3
 800c72e:	4805      	ldr	r0, [pc, #20]	; (800c744 <HAL_UART_MspInit+0x94>)
 800c730:	f7f4 fe2e 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c734:	bf00      	nop
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	40013800 	.word	0x40013800
 800c740:	40021000 	.word	0x40021000
 800c744:	40010800 	.word	0x40010800

0800c748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c748:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c74a:	e003      	b.n	800c754 <LoopCopyDataInit>

0800c74c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c74c:	4b0b      	ldr	r3, [pc, #44]	; (800c77c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c74e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c750:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c752:	3104      	adds	r1, #4

0800c754 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c754:	480a      	ldr	r0, [pc, #40]	; (800c780 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c756:	4b0b      	ldr	r3, [pc, #44]	; (800c784 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c758:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c75a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c75c:	d3f6      	bcc.n	800c74c <CopyDataInit>
  ldr r2, =_sbss
 800c75e:	4a0a      	ldr	r2, [pc, #40]	; (800c788 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c760:	e002      	b.n	800c768 <LoopFillZerobss>

0800c762 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c762:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c764:	f842 3b04 	str.w	r3, [r2], #4

0800c768 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c768:	4b08      	ldr	r3, [pc, #32]	; (800c78c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c76a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c76c:	d3f9      	bcc.n	800c762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c76e:	f7ff fdf3 	bl	800c358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c772:	f000 f815 	bl	800c7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c776:	f7ff fa81 	bl	800bc7c <main>
  bx lr
 800c77a:	4770      	bx	lr
  ldr r3, =_sidata
 800c77c:	0800fbd8 	.word	0x0800fbd8
  ldr r0, =_sdata
 800c780:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c784:	20000470 	.word	0x20000470
  ldr r2, =_sbss
 800c788:	20000470 	.word	0x20000470
  ldr r3, = _ebss
 800c78c:	20005444 	.word	0x20005444

0800c790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c790:	e7fe      	b.n	800c790 <ADC1_2_IRQHandler>
	...

0800c794 <__errno>:
 800c794:	4b01      	ldr	r3, [pc, #4]	; (800c79c <__errno+0x8>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	2000040c 	.word	0x2000040c

0800c7a0 <__libc_init_array>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	2500      	movs	r5, #0
 800c7a4:	4e0c      	ldr	r6, [pc, #48]	; (800c7d8 <__libc_init_array+0x38>)
 800c7a6:	4c0d      	ldr	r4, [pc, #52]	; (800c7dc <__libc_init_array+0x3c>)
 800c7a8:	1ba4      	subs	r4, r4, r6
 800c7aa:	10a4      	asrs	r4, r4, #2
 800c7ac:	42a5      	cmp	r5, r4
 800c7ae:	d109      	bne.n	800c7c4 <__libc_init_array+0x24>
 800c7b0:	f001 fcb6 	bl	800e120 <_init>
 800c7b4:	2500      	movs	r5, #0
 800c7b6:	4e0a      	ldr	r6, [pc, #40]	; (800c7e0 <__libc_init_array+0x40>)
 800c7b8:	4c0a      	ldr	r4, [pc, #40]	; (800c7e4 <__libc_init_array+0x44>)
 800c7ba:	1ba4      	subs	r4, r4, r6
 800c7bc:	10a4      	asrs	r4, r4, #2
 800c7be:	42a5      	cmp	r5, r4
 800c7c0:	d105      	bne.n	800c7ce <__libc_init_array+0x2e>
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7c8:	4798      	blx	r3
 800c7ca:	3501      	adds	r5, #1
 800c7cc:	e7ee      	b.n	800c7ac <__libc_init_array+0xc>
 800c7ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7d2:	4798      	blx	r3
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	e7f2      	b.n	800c7be <__libc_init_array+0x1e>
 800c7d8:	0800fbd0 	.word	0x0800fbd0
 800c7dc:	0800fbd0 	.word	0x0800fbd0
 800c7e0:	0800fbd0 	.word	0x0800fbd0
 800c7e4:	0800fbd4 	.word	0x0800fbd4

0800c7e8 <memcpy>:
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	1e43      	subs	r3, r0, #1
 800c7ec:	440a      	add	r2, r1
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	d100      	bne.n	800c7f4 <memcpy+0xc>
 800c7f2:	bd10      	pop	{r4, pc}
 800c7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7fc:	e7f7      	b.n	800c7ee <memcpy+0x6>

0800c7fe <memset>:
 800c7fe:	4603      	mov	r3, r0
 800c800:	4402      	add	r2, r0
 800c802:	4293      	cmp	r3, r2
 800c804:	d100      	bne.n	800c808 <memset+0xa>
 800c806:	4770      	bx	lr
 800c808:	f803 1b01 	strb.w	r1, [r3], #1
 800c80c:	e7f9      	b.n	800c802 <memset+0x4>
	...

0800c810 <srand>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <srand+0x38>)
 800c814:	4605      	mov	r5, r0
 800c816:	681c      	ldr	r4, [r3, #0]
 800c818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c81a:	b97b      	cbnz	r3, 800c83c <srand+0x2c>
 800c81c:	2018      	movs	r0, #24
 800c81e:	f000 f86f 	bl	800c900 <malloc>
 800c822:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <srand+0x3c>)
 800c824:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <srand+0x40>)
 800c826:	63a0      	str	r0, [r4, #56]	; 0x38
 800c828:	e9c0 2300 	strd	r2, r3, [r0]
 800c82c:	4b09      	ldr	r3, [pc, #36]	; (800c854 <srand+0x44>)
 800c82e:	2201      	movs	r2, #1
 800c830:	6083      	str	r3, [r0, #8]
 800c832:	230b      	movs	r3, #11
 800c834:	8183      	strh	r3, [r0, #12]
 800c836:	2300      	movs	r3, #0
 800c838:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c83c:	2200      	movs	r2, #0
 800c83e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c840:	611d      	str	r5, [r3, #16]
 800c842:	615a      	str	r2, [r3, #20]
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	2000040c 	.word	0x2000040c
 800c84c:	abcd330e 	.word	0xabcd330e
 800c850:	e66d1234 	.word	0xe66d1234
 800c854:	0005deec 	.word	0x0005deec

0800c858 <rand>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <rand+0x50>)
 800c85c:	681c      	ldr	r4, [r3, #0]
 800c85e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c860:	b97b      	cbnz	r3, 800c882 <rand+0x2a>
 800c862:	2018      	movs	r0, #24
 800c864:	f000 f84c 	bl	800c900 <malloc>
 800c868:	4a10      	ldr	r2, [pc, #64]	; (800c8ac <rand+0x54>)
 800c86a:	4b11      	ldr	r3, [pc, #68]	; (800c8b0 <rand+0x58>)
 800c86c:	63a0      	str	r0, [r4, #56]	; 0x38
 800c86e:	e9c0 2300 	strd	r2, r3, [r0]
 800c872:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <rand+0x5c>)
 800c874:	2201      	movs	r2, #1
 800c876:	6083      	str	r3, [r0, #8]
 800c878:	230b      	movs	r3, #11
 800c87a:	8183      	strh	r3, [r0, #12]
 800c87c:	2300      	movs	r3, #0
 800c87e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c882:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c884:	480c      	ldr	r0, [pc, #48]	; (800c8b8 <rand+0x60>)
 800c886:	690a      	ldr	r2, [r1, #16]
 800c888:	694b      	ldr	r3, [r1, #20]
 800c88a:	4350      	muls	r0, r2
 800c88c:	4c0b      	ldr	r4, [pc, #44]	; (800c8bc <rand+0x64>)
 800c88e:	fb04 0003 	mla	r0, r4, r3, r0
 800c892:	fba2 2304 	umull	r2, r3, r2, r4
 800c896:	4403      	add	r3, r0
 800c898:	1c54      	adds	r4, r2, #1
 800c89a:	f143 0500 	adc.w	r5, r3, #0
 800c89e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c8a2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	2000040c 	.word	0x2000040c
 800c8ac:	abcd330e 	.word	0xabcd330e
 800c8b0:	e66d1234 	.word	0xe66d1234
 800c8b4:	0005deec 	.word	0x0005deec
 800c8b8:	5851f42d 	.word	0x5851f42d
 800c8bc:	4c957f2d 	.word	0x4c957f2d

0800c8c0 <siprintf>:
 800c8c0:	b40e      	push	{r1, r2, r3}
 800c8c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8c6:	b500      	push	{lr}
 800c8c8:	b09c      	sub	sp, #112	; 0x70
 800c8ca:	ab1d      	add	r3, sp, #116	; 0x74
 800c8cc:	9002      	str	r0, [sp, #8]
 800c8ce:	9006      	str	r0, [sp, #24]
 800c8d0:	9107      	str	r1, [sp, #28]
 800c8d2:	9104      	str	r1, [sp, #16]
 800c8d4:	4808      	ldr	r0, [pc, #32]	; (800c8f8 <siprintf+0x38>)
 800c8d6:	4909      	ldr	r1, [pc, #36]	; (800c8fc <siprintf+0x3c>)
 800c8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8dc:	9105      	str	r1, [sp, #20]
 800c8de:	6800      	ldr	r0, [r0, #0]
 800c8e0:	a902      	add	r1, sp, #8
 800c8e2:	9301      	str	r3, [sp, #4]
 800c8e4:	f000 f914 	bl	800cb10 <_svfiprintf_r>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	9b02      	ldr	r3, [sp, #8]
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	b01c      	add	sp, #112	; 0x70
 800c8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8f4:	b003      	add	sp, #12
 800c8f6:	4770      	bx	lr
 800c8f8:	2000040c 	.word	0x2000040c
 800c8fc:	ffff0208 	.word	0xffff0208

0800c900 <malloc>:
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <malloc+0xc>)
 800c902:	4601      	mov	r1, r0
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	f000 b84f 	b.w	800c9a8 <_malloc_r>
 800c90a:	bf00      	nop
 800c90c:	2000040c 	.word	0x2000040c

0800c910 <_free_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4605      	mov	r5, r0
 800c914:	2900      	cmp	r1, #0
 800c916:	d043      	beq.n	800c9a0 <_free_r+0x90>
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f0c      	subs	r4, r1, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	18e4      	addlt	r4, r4, r3
 800c924:	f000 fbab 	bl	800d07e <__malloc_lock>
 800c928:	4a1e      	ldr	r2, [pc, #120]	; (800c9a4 <_free_r+0x94>)
 800c92a:	6813      	ldr	r3, [r2, #0]
 800c92c:	4610      	mov	r0, r2
 800c92e:	b933      	cbnz	r3, 800c93e <_free_r+0x2e>
 800c930:	6063      	str	r3, [r4, #4]
 800c932:	6014      	str	r4, [r2, #0]
 800c934:	4628      	mov	r0, r5
 800c936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93a:	f000 bba1 	b.w	800d080 <__malloc_unlock>
 800c93e:	42a3      	cmp	r3, r4
 800c940:	d90b      	bls.n	800c95a <_free_r+0x4a>
 800c942:	6821      	ldr	r1, [r4, #0]
 800c944:	1862      	adds	r2, r4, r1
 800c946:	4293      	cmp	r3, r2
 800c948:	bf01      	itttt	eq
 800c94a:	681a      	ldreq	r2, [r3, #0]
 800c94c:	685b      	ldreq	r3, [r3, #4]
 800c94e:	1852      	addeq	r2, r2, r1
 800c950:	6022      	streq	r2, [r4, #0]
 800c952:	6063      	str	r3, [r4, #4]
 800c954:	6004      	str	r4, [r0, #0]
 800c956:	e7ed      	b.n	800c934 <_free_r+0x24>
 800c958:	4613      	mov	r3, r2
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	b10a      	cbz	r2, 800c962 <_free_r+0x52>
 800c95e:	42a2      	cmp	r2, r4
 800c960:	d9fa      	bls.n	800c958 <_free_r+0x48>
 800c962:	6819      	ldr	r1, [r3, #0]
 800c964:	1858      	adds	r0, r3, r1
 800c966:	42a0      	cmp	r0, r4
 800c968:	d10b      	bne.n	800c982 <_free_r+0x72>
 800c96a:	6820      	ldr	r0, [r4, #0]
 800c96c:	4401      	add	r1, r0
 800c96e:	1858      	adds	r0, r3, r1
 800c970:	4282      	cmp	r2, r0
 800c972:	6019      	str	r1, [r3, #0]
 800c974:	d1de      	bne.n	800c934 <_free_r+0x24>
 800c976:	6810      	ldr	r0, [r2, #0]
 800c978:	6852      	ldr	r2, [r2, #4]
 800c97a:	4401      	add	r1, r0
 800c97c:	6019      	str	r1, [r3, #0]
 800c97e:	605a      	str	r2, [r3, #4]
 800c980:	e7d8      	b.n	800c934 <_free_r+0x24>
 800c982:	d902      	bls.n	800c98a <_free_r+0x7a>
 800c984:	230c      	movs	r3, #12
 800c986:	602b      	str	r3, [r5, #0]
 800c988:	e7d4      	b.n	800c934 <_free_r+0x24>
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	1821      	adds	r1, r4, r0
 800c98e:	428a      	cmp	r2, r1
 800c990:	bf01      	itttt	eq
 800c992:	6811      	ldreq	r1, [r2, #0]
 800c994:	6852      	ldreq	r2, [r2, #4]
 800c996:	1809      	addeq	r1, r1, r0
 800c998:	6021      	streq	r1, [r4, #0]
 800c99a:	6062      	str	r2, [r4, #4]
 800c99c:	605c      	str	r4, [r3, #4]
 800c99e:	e7c9      	b.n	800c934 <_free_r+0x24>
 800c9a0:	bd38      	pop	{r3, r4, r5, pc}
 800c9a2:	bf00      	nop
 800c9a4:	200004a0 	.word	0x200004a0

0800c9a8 <_malloc_r>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	1ccd      	adds	r5, r1, #3
 800c9ac:	f025 0503 	bic.w	r5, r5, #3
 800c9b0:	3508      	adds	r5, #8
 800c9b2:	2d0c      	cmp	r5, #12
 800c9b4:	bf38      	it	cc
 800c9b6:	250c      	movcc	r5, #12
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	db01      	blt.n	800c9c2 <_malloc_r+0x1a>
 800c9be:	42a9      	cmp	r1, r5
 800c9c0:	d903      	bls.n	800c9ca <_malloc_r+0x22>
 800c9c2:	230c      	movs	r3, #12
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	f000 fb58 	bl	800d07e <__malloc_lock>
 800c9ce:	4a21      	ldr	r2, [pc, #132]	; (800ca54 <_malloc_r+0xac>)
 800c9d0:	6814      	ldr	r4, [r2, #0]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	b991      	cbnz	r1, 800c9fc <_malloc_r+0x54>
 800c9d6:	4c20      	ldr	r4, [pc, #128]	; (800ca58 <_malloc_r+0xb0>)
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	b91b      	cbnz	r3, 800c9e4 <_malloc_r+0x3c>
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f000 fb17 	bl	800d010 <_sbrk_r>
 800c9e2:	6020      	str	r0, [r4, #0]
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 fb12 	bl	800d010 <_sbrk_r>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d124      	bne.n	800ca3a <_malloc_r+0x92>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	6033      	str	r3, [r6, #0]
 800c9f6:	f000 fb43 	bl	800d080 <__malloc_unlock>
 800c9fa:	e7e4      	b.n	800c9c6 <_malloc_r+0x1e>
 800c9fc:	680b      	ldr	r3, [r1, #0]
 800c9fe:	1b5b      	subs	r3, r3, r5
 800ca00:	d418      	bmi.n	800ca34 <_malloc_r+0x8c>
 800ca02:	2b0b      	cmp	r3, #11
 800ca04:	d90f      	bls.n	800ca26 <_malloc_r+0x7e>
 800ca06:	600b      	str	r3, [r1, #0]
 800ca08:	18cc      	adds	r4, r1, r3
 800ca0a:	50cd      	str	r5, [r1, r3]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 fb37 	bl	800d080 <__malloc_unlock>
 800ca12:	f104 000b 	add.w	r0, r4, #11
 800ca16:	1d23      	adds	r3, r4, #4
 800ca18:	f020 0007 	bic.w	r0, r0, #7
 800ca1c:	1ac3      	subs	r3, r0, r3
 800ca1e:	d0d3      	beq.n	800c9c8 <_malloc_r+0x20>
 800ca20:	425a      	negs	r2, r3
 800ca22:	50e2      	str	r2, [r4, r3]
 800ca24:	e7d0      	b.n	800c9c8 <_malloc_r+0x20>
 800ca26:	684b      	ldr	r3, [r1, #4]
 800ca28:	428c      	cmp	r4, r1
 800ca2a:	bf16      	itet	ne
 800ca2c:	6063      	strne	r3, [r4, #4]
 800ca2e:	6013      	streq	r3, [r2, #0]
 800ca30:	460c      	movne	r4, r1
 800ca32:	e7eb      	b.n	800ca0c <_malloc_r+0x64>
 800ca34:	460c      	mov	r4, r1
 800ca36:	6849      	ldr	r1, [r1, #4]
 800ca38:	e7cc      	b.n	800c9d4 <_malloc_r+0x2c>
 800ca3a:	1cc4      	adds	r4, r0, #3
 800ca3c:	f024 0403 	bic.w	r4, r4, #3
 800ca40:	42a0      	cmp	r0, r4
 800ca42:	d005      	beq.n	800ca50 <_malloc_r+0xa8>
 800ca44:	1a21      	subs	r1, r4, r0
 800ca46:	4630      	mov	r0, r6
 800ca48:	f000 fae2 	bl	800d010 <_sbrk_r>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d0cf      	beq.n	800c9f0 <_malloc_r+0x48>
 800ca50:	6025      	str	r5, [r4, #0]
 800ca52:	e7db      	b.n	800ca0c <_malloc_r+0x64>
 800ca54:	200004a0 	.word	0x200004a0
 800ca58:	200004a4 	.word	0x200004a4

0800ca5c <__ssputs_r>:
 800ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca60:	688e      	ldr	r6, [r1, #8]
 800ca62:	4682      	mov	sl, r0
 800ca64:	429e      	cmp	r6, r3
 800ca66:	460c      	mov	r4, r1
 800ca68:	4690      	mov	r8, r2
 800ca6a:	4699      	mov	r9, r3
 800ca6c:	d837      	bhi.n	800cade <__ssputs_r+0x82>
 800ca6e:	898a      	ldrh	r2, [r1, #12]
 800ca70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca74:	d031      	beq.n	800cada <__ssputs_r+0x7e>
 800ca76:	2302      	movs	r3, #2
 800ca78:	6825      	ldr	r5, [r4, #0]
 800ca7a:	6909      	ldr	r1, [r1, #16]
 800ca7c:	1a6f      	subs	r7, r5, r1
 800ca7e:	6965      	ldr	r5, [r4, #20]
 800ca80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca84:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca88:	f109 0301 	add.w	r3, r9, #1
 800ca8c:	443b      	add	r3, r7
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	bf38      	it	cc
 800ca92:	461d      	movcc	r5, r3
 800ca94:	0553      	lsls	r3, r2, #21
 800ca96:	d530      	bpl.n	800cafa <__ssputs_r+0x9e>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7ff ff85 	bl	800c9a8 <_malloc_r>
 800ca9e:	4606      	mov	r6, r0
 800caa0:	b950      	cbnz	r0, 800cab8 <__ssputs_r+0x5c>
 800caa2:	230c      	movs	r3, #12
 800caa4:	f04f 30ff 	mov.w	r0, #4294967295
 800caa8:	f8ca 3000 	str.w	r3, [sl]
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab8:	463a      	mov	r2, r7
 800caba:	6921      	ldr	r1, [r4, #16]
 800cabc:	f7ff fe94 	bl	800c7e8 <memcpy>
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caca:	81a3      	strh	r3, [r4, #12]
 800cacc:	6126      	str	r6, [r4, #16]
 800cace:	443e      	add	r6, r7
 800cad0:	6026      	str	r6, [r4, #0]
 800cad2:	464e      	mov	r6, r9
 800cad4:	6165      	str	r5, [r4, #20]
 800cad6:	1bed      	subs	r5, r5, r7
 800cad8:	60a5      	str	r5, [r4, #8]
 800cada:	454e      	cmp	r6, r9
 800cadc:	d900      	bls.n	800cae0 <__ssputs_r+0x84>
 800cade:	464e      	mov	r6, r9
 800cae0:	4632      	mov	r2, r6
 800cae2:	4641      	mov	r1, r8
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	f000 fab1 	bl	800d04c <memmove>
 800caea:	68a3      	ldr	r3, [r4, #8]
 800caec:	2000      	movs	r0, #0
 800caee:	1b9b      	subs	r3, r3, r6
 800caf0:	60a3      	str	r3, [r4, #8]
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	441e      	add	r6, r3
 800caf6:	6026      	str	r6, [r4, #0]
 800caf8:	e7dc      	b.n	800cab4 <__ssputs_r+0x58>
 800cafa:	462a      	mov	r2, r5
 800cafc:	f000 fac1 	bl	800d082 <_realloc_r>
 800cb00:	4606      	mov	r6, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1e2      	bne.n	800cacc <__ssputs_r+0x70>
 800cb06:	6921      	ldr	r1, [r4, #16]
 800cb08:	4650      	mov	r0, sl
 800cb0a:	f7ff ff01 	bl	800c910 <_free_r>
 800cb0e:	e7c8      	b.n	800caa2 <__ssputs_r+0x46>

0800cb10 <_svfiprintf_r>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	461d      	mov	r5, r3
 800cb16:	898b      	ldrh	r3, [r1, #12]
 800cb18:	b09d      	sub	sp, #116	; 0x74
 800cb1a:	061f      	lsls	r7, r3, #24
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4616      	mov	r6, r2
 800cb22:	d50f      	bpl.n	800cb44 <_svfiprintf_r+0x34>
 800cb24:	690b      	ldr	r3, [r1, #16]
 800cb26:	b96b      	cbnz	r3, 800cb44 <_svfiprintf_r+0x34>
 800cb28:	2140      	movs	r1, #64	; 0x40
 800cb2a:	f7ff ff3d 	bl	800c9a8 <_malloc_r>
 800cb2e:	6020      	str	r0, [r4, #0]
 800cb30:	6120      	str	r0, [r4, #16]
 800cb32:	b928      	cbnz	r0, 800cb40 <_svfiprintf_r+0x30>
 800cb34:	230c      	movs	r3, #12
 800cb36:	f8c8 3000 	str.w	r3, [r8]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	e0c8      	b.n	800ccd2 <_svfiprintf_r+0x1c2>
 800cb40:	2340      	movs	r3, #64	; 0x40
 800cb42:	6163      	str	r3, [r4, #20]
 800cb44:	2300      	movs	r3, #0
 800cb46:	9309      	str	r3, [sp, #36]	; 0x24
 800cb48:	2320      	movs	r3, #32
 800cb4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb4e:	2330      	movs	r3, #48	; 0x30
 800cb50:	f04f 0b01 	mov.w	fp, #1
 800cb54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb58:	9503      	str	r5, [sp, #12]
 800cb5a:	4637      	mov	r7, r6
 800cb5c:	463d      	mov	r5, r7
 800cb5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb62:	b10b      	cbz	r3, 800cb68 <_svfiprintf_r+0x58>
 800cb64:	2b25      	cmp	r3, #37	; 0x25
 800cb66:	d13e      	bne.n	800cbe6 <_svfiprintf_r+0xd6>
 800cb68:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb6c:	d00b      	beq.n	800cb86 <_svfiprintf_r+0x76>
 800cb6e:	4653      	mov	r3, sl
 800cb70:	4632      	mov	r2, r6
 800cb72:	4621      	mov	r1, r4
 800cb74:	4640      	mov	r0, r8
 800cb76:	f7ff ff71 	bl	800ca5c <__ssputs_r>
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	f000 80a4 	beq.w	800ccc8 <_svfiprintf_r+0x1b8>
 800cb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb82:	4453      	add	r3, sl
 800cb84:	9309      	str	r3, [sp, #36]	; 0x24
 800cb86:	783b      	ldrb	r3, [r7, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 809d 	beq.w	800ccc8 <_svfiprintf_r+0x1b8>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb98:	9304      	str	r3, [sp, #16]
 800cb9a:	9307      	str	r3, [sp, #28]
 800cb9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cba0:	931a      	str	r3, [sp, #104]	; 0x68
 800cba2:	462f      	mov	r7, r5
 800cba4:	2205      	movs	r2, #5
 800cba6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cbaa:	4850      	ldr	r0, [pc, #320]	; (800ccec <_svfiprintf_r+0x1dc>)
 800cbac:	f000 fa40 	bl	800d030 <memchr>
 800cbb0:	9b04      	ldr	r3, [sp, #16]
 800cbb2:	b9d0      	cbnz	r0, 800cbea <_svfiprintf_r+0xda>
 800cbb4:	06d9      	lsls	r1, r3, #27
 800cbb6:	bf44      	itt	mi
 800cbb8:	2220      	movmi	r2, #32
 800cbba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbbe:	071a      	lsls	r2, r3, #28
 800cbc0:	bf44      	itt	mi
 800cbc2:	222b      	movmi	r2, #43	; 0x2b
 800cbc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbc8:	782a      	ldrb	r2, [r5, #0]
 800cbca:	2a2a      	cmp	r2, #42	; 0x2a
 800cbcc:	d015      	beq.n	800cbfa <_svfiprintf_r+0xea>
 800cbce:	462f      	mov	r7, r5
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	250a      	movs	r5, #10
 800cbd4:	9a07      	ldr	r2, [sp, #28]
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbdc:	3b30      	subs	r3, #48	; 0x30
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d94d      	bls.n	800cc7e <_svfiprintf_r+0x16e>
 800cbe2:	b1b8      	cbz	r0, 800cc14 <_svfiprintf_r+0x104>
 800cbe4:	e00f      	b.n	800cc06 <_svfiprintf_r+0xf6>
 800cbe6:	462f      	mov	r7, r5
 800cbe8:	e7b8      	b.n	800cb5c <_svfiprintf_r+0x4c>
 800cbea:	4a40      	ldr	r2, [pc, #256]	; (800ccec <_svfiprintf_r+0x1dc>)
 800cbec:	463d      	mov	r5, r7
 800cbee:	1a80      	subs	r0, r0, r2
 800cbf0:	fa0b f000 	lsl.w	r0, fp, r0
 800cbf4:	4318      	orrs	r0, r3
 800cbf6:	9004      	str	r0, [sp, #16]
 800cbf8:	e7d3      	b.n	800cba2 <_svfiprintf_r+0x92>
 800cbfa:	9a03      	ldr	r2, [sp, #12]
 800cbfc:	1d11      	adds	r1, r2, #4
 800cbfe:	6812      	ldr	r2, [r2, #0]
 800cc00:	9103      	str	r1, [sp, #12]
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	db01      	blt.n	800cc0a <_svfiprintf_r+0xfa>
 800cc06:	9207      	str	r2, [sp, #28]
 800cc08:	e004      	b.n	800cc14 <_svfiprintf_r+0x104>
 800cc0a:	4252      	negs	r2, r2
 800cc0c:	f043 0302 	orr.w	r3, r3, #2
 800cc10:	9207      	str	r2, [sp, #28]
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	783b      	ldrb	r3, [r7, #0]
 800cc16:	2b2e      	cmp	r3, #46	; 0x2e
 800cc18:	d10c      	bne.n	800cc34 <_svfiprintf_r+0x124>
 800cc1a:	787b      	ldrb	r3, [r7, #1]
 800cc1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1e:	d133      	bne.n	800cc88 <_svfiprintf_r+0x178>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	3702      	adds	r7, #2
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	9203      	str	r2, [sp, #12]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bfb8      	it	lt
 800cc2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	4d2e      	ldr	r5, [pc, #184]	; (800ccf0 <_svfiprintf_r+0x1e0>)
 800cc36:	2203      	movs	r2, #3
 800cc38:	7839      	ldrb	r1, [r7, #0]
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f000 f9f8 	bl	800d030 <memchr>
 800cc40:	b138      	cbz	r0, 800cc52 <_svfiprintf_r+0x142>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	1b40      	subs	r0, r0, r5
 800cc46:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4a:	9b04      	ldr	r3, [sp, #16]
 800cc4c:	3701      	adds	r7, #1
 800cc4e:	4303      	orrs	r3, r0
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	7839      	ldrb	r1, [r7, #0]
 800cc54:	2206      	movs	r2, #6
 800cc56:	4827      	ldr	r0, [pc, #156]	; (800ccf4 <_svfiprintf_r+0x1e4>)
 800cc58:	1c7e      	adds	r6, r7, #1
 800cc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc5e:	f000 f9e7 	bl	800d030 <memchr>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d038      	beq.n	800ccd8 <_svfiprintf_r+0x1c8>
 800cc66:	4b24      	ldr	r3, [pc, #144]	; (800ccf8 <_svfiprintf_r+0x1e8>)
 800cc68:	bb13      	cbnz	r3, 800ccb0 <_svfiprintf_r+0x1a0>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	3307      	adds	r3, #7
 800cc6e:	f023 0307 	bic.w	r3, r3, #7
 800cc72:	3308      	adds	r3, #8
 800cc74:	9303      	str	r3, [sp, #12]
 800cc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc78:	444b      	add	r3, r9
 800cc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7c:	e76d      	b.n	800cb5a <_svfiprintf_r+0x4a>
 800cc7e:	fb05 3202 	mla	r2, r5, r2, r3
 800cc82:	2001      	movs	r0, #1
 800cc84:	460f      	mov	r7, r1
 800cc86:	e7a6      	b.n	800cbd6 <_svfiprintf_r+0xc6>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	250a      	movs	r5, #10
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	3701      	adds	r7, #1
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc98:	3a30      	subs	r2, #48	; 0x30
 800cc9a:	2a09      	cmp	r2, #9
 800cc9c:	d903      	bls.n	800cca6 <_svfiprintf_r+0x196>
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0c8      	beq.n	800cc34 <_svfiprintf_r+0x124>
 800cca2:	9105      	str	r1, [sp, #20]
 800cca4:	e7c6      	b.n	800cc34 <_svfiprintf_r+0x124>
 800cca6:	fb05 2101 	mla	r1, r5, r1, r2
 800ccaa:	2301      	movs	r3, #1
 800ccac:	4607      	mov	r7, r0
 800ccae:	e7f0      	b.n	800cc92 <_svfiprintf_r+0x182>
 800ccb0:	ab03      	add	r3, sp, #12
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <_svfiprintf_r+0x1ec>)
 800ccb8:	a904      	add	r1, sp, #16
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ccc4:	4681      	mov	r9, r0
 800ccc6:	d1d6      	bne.n	800cc76 <_svfiprintf_r+0x166>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	065b      	lsls	r3, r3, #25
 800cccc:	f53f af35 	bmi.w	800cb3a <_svfiprintf_r+0x2a>
 800ccd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccd2:	b01d      	add	sp, #116	; 0x74
 800ccd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd8:	ab03      	add	r3, sp, #12
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	4622      	mov	r2, r4
 800ccde:	4b07      	ldr	r3, [pc, #28]	; (800ccfc <_svfiprintf_r+0x1ec>)
 800cce0:	a904      	add	r1, sp, #16
 800cce2:	4640      	mov	r0, r8
 800cce4:	f000 f882 	bl	800cdec <_printf_i>
 800cce8:	e7ea      	b.n	800ccc0 <_svfiprintf_r+0x1b0>
 800ccea:	bf00      	nop
 800ccec:	0800f9c4 	.word	0x0800f9c4
 800ccf0:	0800f9ca 	.word	0x0800f9ca
 800ccf4:	0800f9ce 	.word	0x0800f9ce
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	0800ca5d 	.word	0x0800ca5d

0800cd00 <_printf_common>:
 800cd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd04:	4691      	mov	r9, r2
 800cd06:	461f      	mov	r7, r3
 800cd08:	688a      	ldr	r2, [r1, #8]
 800cd0a:	690b      	ldr	r3, [r1, #16]
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	bfb8      	it	lt
 800cd12:	4613      	movlt	r3, r2
 800cd14:	f8c9 3000 	str.w	r3, [r9]
 800cd18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd22:	b112      	cbz	r2, 800cd2a <_printf_common+0x2a>
 800cd24:	3301      	adds	r3, #1
 800cd26:	f8c9 3000 	str.w	r3, [r9]
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	0699      	lsls	r1, r3, #26
 800cd2e:	bf42      	ittt	mi
 800cd30:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd34:	3302      	addmi	r3, #2
 800cd36:	f8c9 3000 	strmi.w	r3, [r9]
 800cd3a:	6825      	ldr	r5, [r4, #0]
 800cd3c:	f015 0506 	ands.w	r5, r5, #6
 800cd40:	d107      	bne.n	800cd52 <_printf_common+0x52>
 800cd42:	f104 0a19 	add.w	sl, r4, #25
 800cd46:	68e3      	ldr	r3, [r4, #12]
 800cd48:	f8d9 2000 	ldr.w	r2, [r9]
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	42ab      	cmp	r3, r5
 800cd50:	dc29      	bgt.n	800cda6 <_printf_common+0xa6>
 800cd52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd56:	6822      	ldr	r2, [r4, #0]
 800cd58:	3300      	adds	r3, #0
 800cd5a:	bf18      	it	ne
 800cd5c:	2301      	movne	r3, #1
 800cd5e:	0692      	lsls	r2, r2, #26
 800cd60:	d42e      	bmi.n	800cdc0 <_printf_common+0xc0>
 800cd62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd66:	4639      	mov	r1, r7
 800cd68:	4630      	mov	r0, r6
 800cd6a:	47c0      	blx	r8
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d021      	beq.n	800cdb4 <_printf_common+0xb4>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	68e5      	ldr	r5, [r4, #12]
 800cd74:	f003 0306 	and.w	r3, r3, #6
 800cd78:	2b04      	cmp	r3, #4
 800cd7a:	bf18      	it	ne
 800cd7c:	2500      	movne	r5, #0
 800cd7e:	f8d9 2000 	ldr.w	r2, [r9]
 800cd82:	f04f 0900 	mov.w	r9, #0
 800cd86:	bf08      	it	eq
 800cd88:	1aad      	subeq	r5, r5, r2
 800cd8a:	68a3      	ldr	r3, [r4, #8]
 800cd8c:	6922      	ldr	r2, [r4, #16]
 800cd8e:	bf08      	it	eq
 800cd90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd94:	4293      	cmp	r3, r2
 800cd96:	bfc4      	itt	gt
 800cd98:	1a9b      	subgt	r3, r3, r2
 800cd9a:	18ed      	addgt	r5, r5, r3
 800cd9c:	341a      	adds	r4, #26
 800cd9e:	454d      	cmp	r5, r9
 800cda0:	d11a      	bne.n	800cdd8 <_printf_common+0xd8>
 800cda2:	2000      	movs	r0, #0
 800cda4:	e008      	b.n	800cdb8 <_printf_common+0xb8>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4639      	mov	r1, r7
 800cdac:	4630      	mov	r0, r6
 800cdae:	47c0      	blx	r8
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d103      	bne.n	800cdbc <_printf_common+0xbc>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbc:	3501      	adds	r5, #1
 800cdbe:	e7c2      	b.n	800cd46 <_printf_common+0x46>
 800cdc0:	2030      	movs	r0, #48	; 0x30
 800cdc2:	18e1      	adds	r1, r4, r3
 800cdc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdc8:	1c5a      	adds	r2, r3, #1
 800cdca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdce:	4422      	add	r2, r4
 800cdd0:	3302      	adds	r3, #2
 800cdd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdd6:	e7c4      	b.n	800cd62 <_printf_common+0x62>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4622      	mov	r2, r4
 800cddc:	4639      	mov	r1, r7
 800cdde:	4630      	mov	r0, r6
 800cde0:	47c0      	blx	r8
 800cde2:	3001      	adds	r0, #1
 800cde4:	d0e6      	beq.n	800cdb4 <_printf_common+0xb4>
 800cde6:	f109 0901 	add.w	r9, r9, #1
 800cdea:	e7d8      	b.n	800cd9e <_printf_common+0x9e>

0800cdec <_printf_i>:
 800cdec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	7e09      	ldrb	r1, [r1, #24]
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	296e      	cmp	r1, #110	; 0x6e
 800cdfc:	4617      	mov	r7, r2
 800cdfe:	4606      	mov	r6, r0
 800ce00:	4698      	mov	r8, r3
 800ce02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce04:	f000 80b3 	beq.w	800cf6e <_printf_i+0x182>
 800ce08:	d822      	bhi.n	800ce50 <_printf_i+0x64>
 800ce0a:	2963      	cmp	r1, #99	; 0x63
 800ce0c:	d036      	beq.n	800ce7c <_printf_i+0x90>
 800ce0e:	d80a      	bhi.n	800ce26 <_printf_i+0x3a>
 800ce10:	2900      	cmp	r1, #0
 800ce12:	f000 80b9 	beq.w	800cf88 <_printf_i+0x19c>
 800ce16:	2958      	cmp	r1, #88	; 0x58
 800ce18:	f000 8083 	beq.w	800cf22 <_printf_i+0x136>
 800ce1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce24:	e032      	b.n	800ce8c <_printf_i+0xa0>
 800ce26:	2964      	cmp	r1, #100	; 0x64
 800ce28:	d001      	beq.n	800ce2e <_printf_i+0x42>
 800ce2a:	2969      	cmp	r1, #105	; 0x69
 800ce2c:	d1f6      	bne.n	800ce1c <_printf_i+0x30>
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	6813      	ldr	r3, [r2, #0]
 800ce32:	0605      	lsls	r5, r0, #24
 800ce34:	f103 0104 	add.w	r1, r3, #4
 800ce38:	d52a      	bpl.n	800ce90 <_printf_i+0xa4>
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6011      	str	r1, [r2, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	da03      	bge.n	800ce4a <_printf_i+0x5e>
 800ce42:	222d      	movs	r2, #45	; 0x2d
 800ce44:	425b      	negs	r3, r3
 800ce46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce4a:	486f      	ldr	r0, [pc, #444]	; (800d008 <_printf_i+0x21c>)
 800ce4c:	220a      	movs	r2, #10
 800ce4e:	e039      	b.n	800cec4 <_printf_i+0xd8>
 800ce50:	2973      	cmp	r1, #115	; 0x73
 800ce52:	f000 809d 	beq.w	800cf90 <_printf_i+0x1a4>
 800ce56:	d808      	bhi.n	800ce6a <_printf_i+0x7e>
 800ce58:	296f      	cmp	r1, #111	; 0x6f
 800ce5a:	d020      	beq.n	800ce9e <_printf_i+0xb2>
 800ce5c:	2970      	cmp	r1, #112	; 0x70
 800ce5e:	d1dd      	bne.n	800ce1c <_printf_i+0x30>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	f043 0320 	orr.w	r3, r3, #32
 800ce66:	6023      	str	r3, [r4, #0]
 800ce68:	e003      	b.n	800ce72 <_printf_i+0x86>
 800ce6a:	2975      	cmp	r1, #117	; 0x75
 800ce6c:	d017      	beq.n	800ce9e <_printf_i+0xb2>
 800ce6e:	2978      	cmp	r1, #120	; 0x78
 800ce70:	d1d4      	bne.n	800ce1c <_printf_i+0x30>
 800ce72:	2378      	movs	r3, #120	; 0x78
 800ce74:	4865      	ldr	r0, [pc, #404]	; (800d00c <_printf_i+0x220>)
 800ce76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce7a:	e055      	b.n	800cf28 <_printf_i+0x13c>
 800ce7c:	6813      	ldr	r3, [r2, #0]
 800ce7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce82:	1d19      	adds	r1, r3, #4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6011      	str	r1, [r2, #0]
 800ce88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e08c      	b.n	800cfaa <_printf_i+0x1be>
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce96:	6011      	str	r1, [r2, #0]
 800ce98:	bf18      	it	ne
 800ce9a:	b21b      	sxthne	r3, r3
 800ce9c:	e7cf      	b.n	800ce3e <_printf_i+0x52>
 800ce9e:	6813      	ldr	r3, [r2, #0]
 800cea0:	6825      	ldr	r5, [r4, #0]
 800cea2:	1d18      	adds	r0, r3, #4
 800cea4:	6010      	str	r0, [r2, #0]
 800cea6:	0628      	lsls	r0, r5, #24
 800cea8:	d501      	bpl.n	800ceae <_printf_i+0xc2>
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	e002      	b.n	800ceb4 <_printf_i+0xc8>
 800ceae:	0668      	lsls	r0, r5, #25
 800ceb0:	d5fb      	bpl.n	800ceaa <_printf_i+0xbe>
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	296f      	cmp	r1, #111	; 0x6f
 800ceb6:	bf14      	ite	ne
 800ceb8:	220a      	movne	r2, #10
 800ceba:	2208      	moveq	r2, #8
 800cebc:	4852      	ldr	r0, [pc, #328]	; (800d008 <_printf_i+0x21c>)
 800cebe:	2100      	movs	r1, #0
 800cec0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cec4:	6865      	ldr	r5, [r4, #4]
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	60a5      	str	r5, [r4, #8]
 800ceca:	f2c0 8095 	blt.w	800cff8 <_printf_i+0x20c>
 800cece:	6821      	ldr	r1, [r4, #0]
 800ced0:	f021 0104 	bic.w	r1, r1, #4
 800ced4:	6021      	str	r1, [r4, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d13d      	bne.n	800cf56 <_printf_i+0x16a>
 800ceda:	2d00      	cmp	r5, #0
 800cedc:	f040 808e 	bne.w	800cffc <_printf_i+0x210>
 800cee0:	4665      	mov	r5, ip
 800cee2:	2a08      	cmp	r2, #8
 800cee4:	d10b      	bne.n	800cefe <_printf_i+0x112>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	07db      	lsls	r3, r3, #31
 800ceea:	d508      	bpl.n	800cefe <_printf_i+0x112>
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	6862      	ldr	r2, [r4, #4]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bfde      	ittt	le
 800cef4:	2330      	movle	r3, #48	; 0x30
 800cef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cefa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cefe:	ebac 0305 	sub.w	r3, ip, r5
 800cf02:	6123      	str	r3, [r4, #16]
 800cf04:	f8cd 8000 	str.w	r8, [sp]
 800cf08:	463b      	mov	r3, r7
 800cf0a:	aa03      	add	r2, sp, #12
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff fef6 	bl	800cd00 <_printf_common>
 800cf14:	3001      	adds	r0, #1
 800cf16:	d14d      	bne.n	800cfb4 <_printf_i+0x1c8>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1c:	b005      	add	sp, #20
 800cf1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf22:	4839      	ldr	r0, [pc, #228]	; (800d008 <_printf_i+0x21c>)
 800cf24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf28:	6813      	ldr	r3, [r2, #0]
 800cf2a:	6821      	ldr	r1, [r4, #0]
 800cf2c:	1d1d      	adds	r5, r3, #4
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6015      	str	r5, [r2, #0]
 800cf32:	060a      	lsls	r2, r1, #24
 800cf34:	d50b      	bpl.n	800cf4e <_printf_i+0x162>
 800cf36:	07ca      	lsls	r2, r1, #31
 800cf38:	bf44      	itt	mi
 800cf3a:	f041 0120 	orrmi.w	r1, r1, #32
 800cf3e:	6021      	strmi	r1, [r4, #0]
 800cf40:	b91b      	cbnz	r3, 800cf4a <_printf_i+0x15e>
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	f022 0220 	bic.w	r2, r2, #32
 800cf48:	6022      	str	r2, [r4, #0]
 800cf4a:	2210      	movs	r2, #16
 800cf4c:	e7b7      	b.n	800cebe <_printf_i+0xd2>
 800cf4e:	064d      	lsls	r5, r1, #25
 800cf50:	bf48      	it	mi
 800cf52:	b29b      	uxthmi	r3, r3
 800cf54:	e7ef      	b.n	800cf36 <_printf_i+0x14a>
 800cf56:	4665      	mov	r5, ip
 800cf58:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf5c:	fb02 3311 	mls	r3, r2, r1, r3
 800cf60:	5cc3      	ldrb	r3, [r0, r3]
 800cf62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf66:	460b      	mov	r3, r1
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d1f5      	bne.n	800cf58 <_printf_i+0x16c>
 800cf6c:	e7b9      	b.n	800cee2 <_printf_i+0xf6>
 800cf6e:	6813      	ldr	r3, [r2, #0]
 800cf70:	6825      	ldr	r5, [r4, #0]
 800cf72:	1d18      	adds	r0, r3, #4
 800cf74:	6961      	ldr	r1, [r4, #20]
 800cf76:	6010      	str	r0, [r2, #0]
 800cf78:	0628      	lsls	r0, r5, #24
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	d501      	bpl.n	800cf82 <_printf_i+0x196>
 800cf7e:	6019      	str	r1, [r3, #0]
 800cf80:	e002      	b.n	800cf88 <_printf_i+0x19c>
 800cf82:	066a      	lsls	r2, r5, #25
 800cf84:	d5fb      	bpl.n	800cf7e <_printf_i+0x192>
 800cf86:	8019      	strh	r1, [r3, #0]
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4665      	mov	r5, ip
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	e7b9      	b.n	800cf04 <_printf_i+0x118>
 800cf90:	6813      	ldr	r3, [r2, #0]
 800cf92:	1d19      	adds	r1, r3, #4
 800cf94:	6011      	str	r1, [r2, #0]
 800cf96:	681d      	ldr	r5, [r3, #0]
 800cf98:	6862      	ldr	r2, [r4, #4]
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 f847 	bl	800d030 <memchr>
 800cfa2:	b108      	cbz	r0, 800cfa8 <_printf_i+0x1bc>
 800cfa4:	1b40      	subs	r0, r0, r5
 800cfa6:	6060      	str	r0, [r4, #4]
 800cfa8:	6863      	ldr	r3, [r4, #4]
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	2300      	movs	r3, #0
 800cfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfb2:	e7a7      	b.n	800cf04 <_printf_i+0x118>
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4630      	mov	r0, r6
 800cfbc:	47c0      	blx	r8
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	d0aa      	beq.n	800cf18 <_printf_i+0x12c>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	079b      	lsls	r3, r3, #30
 800cfc6:	d413      	bmi.n	800cff0 <_printf_i+0x204>
 800cfc8:	68e0      	ldr	r0, [r4, #12]
 800cfca:	9b03      	ldr	r3, [sp, #12]
 800cfcc:	4298      	cmp	r0, r3
 800cfce:	bfb8      	it	lt
 800cfd0:	4618      	movlt	r0, r3
 800cfd2:	e7a3      	b.n	800cf1c <_printf_i+0x130>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	464a      	mov	r2, r9
 800cfd8:	4639      	mov	r1, r7
 800cfda:	4630      	mov	r0, r6
 800cfdc:	47c0      	blx	r8
 800cfde:	3001      	adds	r0, #1
 800cfe0:	d09a      	beq.n	800cf18 <_printf_i+0x12c>
 800cfe2:	3501      	adds	r5, #1
 800cfe4:	68e3      	ldr	r3, [r4, #12]
 800cfe6:	9a03      	ldr	r2, [sp, #12]
 800cfe8:	1a9b      	subs	r3, r3, r2
 800cfea:	42ab      	cmp	r3, r5
 800cfec:	dcf2      	bgt.n	800cfd4 <_printf_i+0x1e8>
 800cfee:	e7eb      	b.n	800cfc8 <_printf_i+0x1dc>
 800cff0:	2500      	movs	r5, #0
 800cff2:	f104 0919 	add.w	r9, r4, #25
 800cff6:	e7f5      	b.n	800cfe4 <_printf_i+0x1f8>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ac      	bne.n	800cf56 <_printf_i+0x16a>
 800cffc:	7803      	ldrb	r3, [r0, #0]
 800cffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d002:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d006:	e76c      	b.n	800cee2 <_printf_i+0xf6>
 800d008:	0800f9d5 	.word	0x0800f9d5
 800d00c:	0800f9e6 	.word	0x0800f9e6

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	2300      	movs	r3, #0
 800d014:	4c05      	ldr	r4, [pc, #20]	; (800d02c <_sbrk_r+0x1c>)
 800d016:	4605      	mov	r5, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	f7ff f970 	bl	800c300 <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	602b      	str	r3, [r5, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20005440 	.word	0x20005440

0800d030 <memchr>:
 800d030:	b510      	push	{r4, lr}
 800d032:	b2c9      	uxtb	r1, r1
 800d034:	4402      	add	r2, r0
 800d036:	4290      	cmp	r0, r2
 800d038:	4603      	mov	r3, r0
 800d03a:	d101      	bne.n	800d040 <memchr+0x10>
 800d03c:	2300      	movs	r3, #0
 800d03e:	e003      	b.n	800d048 <memchr+0x18>
 800d040:	781c      	ldrb	r4, [r3, #0]
 800d042:	3001      	adds	r0, #1
 800d044:	428c      	cmp	r4, r1
 800d046:	d1f6      	bne.n	800d036 <memchr+0x6>
 800d048:	4618      	mov	r0, r3
 800d04a:	bd10      	pop	{r4, pc}

0800d04c <memmove>:
 800d04c:	4288      	cmp	r0, r1
 800d04e:	b510      	push	{r4, lr}
 800d050:	eb01 0302 	add.w	r3, r1, r2
 800d054:	d807      	bhi.n	800d066 <memmove+0x1a>
 800d056:	1e42      	subs	r2, r0, #1
 800d058:	4299      	cmp	r1, r3
 800d05a:	d00a      	beq.n	800d072 <memmove+0x26>
 800d05c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d060:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d064:	e7f8      	b.n	800d058 <memmove+0xc>
 800d066:	4283      	cmp	r3, r0
 800d068:	d9f5      	bls.n	800d056 <memmove+0xa>
 800d06a:	1881      	adds	r1, r0, r2
 800d06c:	1ad2      	subs	r2, r2, r3
 800d06e:	42d3      	cmn	r3, r2
 800d070:	d100      	bne.n	800d074 <memmove+0x28>
 800d072:	bd10      	pop	{r4, pc}
 800d074:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d078:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d07c:	e7f7      	b.n	800d06e <memmove+0x22>

0800d07e <__malloc_lock>:
 800d07e:	4770      	bx	lr

0800d080 <__malloc_unlock>:
 800d080:	4770      	bx	lr

0800d082 <_realloc_r>:
 800d082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d084:	4607      	mov	r7, r0
 800d086:	4614      	mov	r4, r2
 800d088:	460e      	mov	r6, r1
 800d08a:	b921      	cbnz	r1, 800d096 <_realloc_r+0x14>
 800d08c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d090:	4611      	mov	r1, r2
 800d092:	f7ff bc89 	b.w	800c9a8 <_malloc_r>
 800d096:	b922      	cbnz	r2, 800d0a2 <_realloc_r+0x20>
 800d098:	f7ff fc3a 	bl	800c910 <_free_r>
 800d09c:	4625      	mov	r5, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a2:	f000 f814 	bl	800d0ce <_malloc_usable_size_r>
 800d0a6:	42a0      	cmp	r0, r4
 800d0a8:	d20f      	bcs.n	800d0ca <_realloc_r+0x48>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4638      	mov	r0, r7
 800d0ae:	f7ff fc7b 	bl	800c9a8 <_malloc_r>
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d0f2      	beq.n	800d09e <_realloc_r+0x1c>
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	f7ff fb94 	bl	800c7e8 <memcpy>
 800d0c0:	4631      	mov	r1, r6
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f7ff fc24 	bl	800c910 <_free_r>
 800d0c8:	e7e9      	b.n	800d09e <_realloc_r+0x1c>
 800d0ca:	4635      	mov	r5, r6
 800d0cc:	e7e7      	b.n	800d09e <_realloc_r+0x1c>

0800d0ce <_malloc_usable_size_r>:
 800d0ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0d2:	1f18      	subs	r0, r3, #4
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	bfbc      	itt	lt
 800d0d8:	580b      	ldrlt	r3, [r1, r0]
 800d0da:	18c0      	addlt	r0, r0, r3
 800d0dc:	4770      	bx	lr
	...

0800d0e0 <cos>:
 800d0e0:	b530      	push	{r4, r5, lr}
 800d0e2:	4a18      	ldr	r2, [pc, #96]	; (800d144 <cos+0x64>)
 800d0e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	dc04      	bgt.n	800d0f8 <cos+0x18>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f000 fa55 	bl	800d5a0 <__kernel_cos>
 800d0f6:	e006      	b.n	800d106 <cos+0x26>
 800d0f8:	4a13      	ldr	r2, [pc, #76]	; (800d148 <cos+0x68>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	dd05      	ble.n	800d10a <cos+0x2a>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	f7f3 f895 	bl	8000230 <__aeabi_dsub>
 800d106:	b007      	add	sp, #28
 800d108:	bd30      	pop	{r4, r5, pc}
 800d10a:	aa02      	add	r2, sp, #8
 800d10c:	f000 f858 	bl	800d1c0 <__ieee754_rem_pio2>
 800d110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d114:	f000 0403 	and.w	r4, r0, #3
 800d118:	2c01      	cmp	r4, #1
 800d11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d11e:	d008      	beq.n	800d132 <cos+0x52>
 800d120:	2c02      	cmp	r4, #2
 800d122:	d00c      	beq.n	800d13e <cos+0x5e>
 800d124:	2c00      	cmp	r4, #0
 800d126:	d0e4      	beq.n	800d0f2 <cos+0x12>
 800d128:	2401      	movs	r4, #1
 800d12a:	9400      	str	r4, [sp, #0]
 800d12c:	f000 fe40 	bl	800ddb0 <__kernel_sin>
 800d130:	e7e9      	b.n	800d106 <cos+0x26>
 800d132:	9400      	str	r4, [sp, #0]
 800d134:	f000 fe3c 	bl	800ddb0 <__kernel_sin>
 800d138:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d13c:	e7e3      	b.n	800d106 <cos+0x26>
 800d13e:	f000 fa2f 	bl	800d5a0 <__kernel_cos>
 800d142:	e7f9      	b.n	800d138 <cos+0x58>
 800d144:	3fe921fb 	.word	0x3fe921fb
 800d148:	7fefffff 	.word	0x7fefffff

0800d14c <sin>:
 800d14c:	b530      	push	{r4, r5, lr}
 800d14e:	4a1a      	ldr	r2, [pc, #104]	; (800d1b8 <sin+0x6c>)
 800d150:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d154:	4293      	cmp	r3, r2
 800d156:	b087      	sub	sp, #28
 800d158:	dc06      	bgt.n	800d168 <sin+0x1c>
 800d15a:	2300      	movs	r3, #0
 800d15c:	2200      	movs	r2, #0
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	2300      	movs	r3, #0
 800d162:	f000 fe25 	bl	800ddb0 <__kernel_sin>
 800d166:	e006      	b.n	800d176 <sin+0x2a>
 800d168:	4a14      	ldr	r2, [pc, #80]	; (800d1bc <sin+0x70>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	dd05      	ble.n	800d17a <sin+0x2e>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	f7f3 f85d 	bl	8000230 <__aeabi_dsub>
 800d176:	b007      	add	sp, #28
 800d178:	bd30      	pop	{r4, r5, pc}
 800d17a:	aa02      	add	r2, sp, #8
 800d17c:	f000 f820 	bl	800d1c0 <__ieee754_rem_pio2>
 800d180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d184:	f000 0403 	and.w	r4, r0, #3
 800d188:	2c01      	cmp	r4, #1
 800d18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18e:	d005      	beq.n	800d19c <sin+0x50>
 800d190:	2c02      	cmp	r4, #2
 800d192:	d006      	beq.n	800d1a2 <sin+0x56>
 800d194:	b964      	cbnz	r4, 800d1b0 <sin+0x64>
 800d196:	2401      	movs	r4, #1
 800d198:	9400      	str	r4, [sp, #0]
 800d19a:	e7e2      	b.n	800d162 <sin+0x16>
 800d19c:	f000 fa00 	bl	800d5a0 <__kernel_cos>
 800d1a0:	e7e9      	b.n	800d176 <sin+0x2a>
 800d1a2:	2401      	movs	r4, #1
 800d1a4:	9400      	str	r4, [sp, #0]
 800d1a6:	f000 fe03 	bl	800ddb0 <__kernel_sin>
 800d1aa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d1ae:	e7e2      	b.n	800d176 <sin+0x2a>
 800d1b0:	f000 f9f6 	bl	800d5a0 <__kernel_cos>
 800d1b4:	e7f9      	b.n	800d1aa <sin+0x5e>
 800d1b6:	bf00      	nop
 800d1b8:	3fe921fb 	.word	0x3fe921fb
 800d1bc:	7fefffff 	.word	0x7fefffff

0800d1c0 <__ieee754_rem_pio2>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	4ac2      	ldr	r2, [pc, #776]	; (800d4d0 <__ieee754_rem_pio2+0x310>)
 800d1c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d1cc:	4592      	cmp	sl, r2
 800d1ce:	b08d      	sub	sp, #52	; 0x34
 800d1d0:	468b      	mov	fp, r1
 800d1d2:	dc07      	bgt.n	800d1e4 <__ieee754_rem_pio2+0x24>
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	e9c4 0100 	strd	r0, r1, [r4]
 800d1dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d1e0:	2500      	movs	r5, #0
 800d1e2:	e023      	b.n	800d22c <__ieee754_rem_pio2+0x6c>
 800d1e4:	4abb      	ldr	r2, [pc, #748]	; (800d4d4 <__ieee754_rem_pio2+0x314>)
 800d1e6:	4592      	cmp	sl, r2
 800d1e8:	dc71      	bgt.n	800d2ce <__ieee754_rem_pio2+0x10e>
 800d1ea:	a3ab      	add	r3, pc, #684	; (adr r3, 800d498 <__ieee754_rem_pio2+0x2d8>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	2900      	cmp	r1, #0
 800d1f2:	4db9      	ldr	r5, [pc, #740]	; (800d4d8 <__ieee754_rem_pio2+0x318>)
 800d1f4:	dd36      	ble.n	800d264 <__ieee754_rem_pio2+0xa4>
 800d1f6:	f7f3 f81b 	bl	8000230 <__aeabi_dsub>
 800d1fa:	45aa      	cmp	sl, r5
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	460f      	mov	r7, r1
 800d200:	d018      	beq.n	800d234 <__ieee754_rem_pio2+0x74>
 800d202:	a3a7      	add	r3, pc, #668	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e0>)
 800d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d208:	f7f3 f812 	bl	8000230 <__aeabi_dsub>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4630      	mov	r0, r6
 800d212:	e9c4 2300 	strd	r2, r3, [r4]
 800d216:	4639      	mov	r1, r7
 800d218:	f7f3 f80a 	bl	8000230 <__aeabi_dsub>
 800d21c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e0>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f805 	bl	8000230 <__aeabi_dsub>
 800d226:	2501      	movs	r5, #1
 800d228:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d22c:	4628      	mov	r0, r5
 800d22e:	b00d      	add	sp, #52	; 0x34
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	a39c      	add	r3, pc, #624	; (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2e8>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	f7f2 fff9 	bl	8000230 <__aeabi_dsub>
 800d23e:	a39c      	add	r3, pc, #624	; (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f0>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	4606      	mov	r6, r0
 800d246:	460f      	mov	r7, r1
 800d248:	f7f2 fff2 	bl	8000230 <__aeabi_dsub>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4630      	mov	r0, r6
 800d252:	e9c4 2300 	strd	r2, r3, [r4]
 800d256:	4639      	mov	r1, r7
 800d258:	f7f2 ffea 	bl	8000230 <__aeabi_dsub>
 800d25c:	a394      	add	r3, pc, #592	; (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f0>)
 800d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d262:	e7de      	b.n	800d222 <__ieee754_rem_pio2+0x62>
 800d264:	f7f2 ffe6 	bl	8000234 <__adddf3>
 800d268:	45aa      	cmp	sl, r5
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	d016      	beq.n	800d29e <__ieee754_rem_pio2+0xde>
 800d270:	a38b      	add	r3, pc, #556	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e0>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f7f2 ffdd 	bl	8000234 <__adddf3>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	4630      	mov	r0, r6
 800d280:	e9c4 2300 	strd	r2, r3, [r4]
 800d284:	4639      	mov	r1, r7
 800d286:	f7f2 ffd3 	bl	8000230 <__aeabi_dsub>
 800d28a:	a385      	add	r3, pc, #532	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e0>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	f7f2 ffd0 	bl	8000234 <__adddf3>
 800d294:	f04f 35ff 	mov.w	r5, #4294967295
 800d298:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d29c:	e7c6      	b.n	800d22c <__ieee754_rem_pio2+0x6c>
 800d29e:	a382      	add	r3, pc, #520	; (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2e8>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f7f2 ffc6 	bl	8000234 <__adddf3>
 800d2a8:	a381      	add	r3, pc, #516	; (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f0>)
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	f7f2 ffbf 	bl	8000234 <__adddf3>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	e9c4 2300 	strd	r2, r3, [r4]
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	f7f2 ffb5 	bl	8000230 <__aeabi_dsub>
 800d2c6:	a37a      	add	r3, pc, #488	; (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f0>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	e7e0      	b.n	800d290 <__ieee754_rem_pio2+0xd0>
 800d2ce:	4a83      	ldr	r2, [pc, #524]	; (800d4dc <__ieee754_rem_pio2+0x31c>)
 800d2d0:	4592      	cmp	sl, r2
 800d2d2:	f300 80d2 	bgt.w	800d47a <__ieee754_rem_pio2+0x2ba>
 800d2d6:	f000 fe21 	bl	800df1c <fabs>
 800d2da:	a377      	add	r3, pc, #476	; (adr r3, 800d4b8 <__ieee754_rem_pio2+0x2f8>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	f7f3 f95c 	bl	80005a0 <__aeabi_dmul>
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4b7d      	ldr	r3, [pc, #500]	; (800d4e0 <__ieee754_rem_pio2+0x320>)
 800d2ec:	f7f2 ffa2 	bl	8000234 <__adddf3>
 800d2f0:	f7f3 fbf0 	bl	8000ad4 <__aeabi_d2iz>
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	f7f3 f8e9 	bl	80004cc <__aeabi_i2d>
 800d2fa:	a367      	add	r3, pc, #412	; (adr r3, 800d498 <__ieee754_rem_pio2+0x2d8>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d304:	f7f3 f94c 	bl	80005a0 <__aeabi_dmul>
 800d308:	4602      	mov	r2, r0
 800d30a:	460b      	mov	r3, r1
 800d30c:	4630      	mov	r0, r6
 800d30e:	4639      	mov	r1, r7
 800d310:	f7f2 ff8e 	bl	8000230 <__aeabi_dsub>
 800d314:	a362      	add	r3, pc, #392	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e0>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d322:	f7f3 f93d 	bl	80005a0 <__aeabi_dmul>
 800d326:	2d1f      	cmp	r5, #31
 800d328:	4680      	mov	r8, r0
 800d32a:	4689      	mov	r9, r1
 800d32c:	dc0e      	bgt.n	800d34c <__ieee754_rem_pio2+0x18c>
 800d32e:	4b6d      	ldr	r3, [pc, #436]	; (800d4e4 <__ieee754_rem_pio2+0x324>)
 800d330:	1e6a      	subs	r2, r5, #1
 800d332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d336:	4553      	cmp	r3, sl
 800d338:	d008      	beq.n	800d34c <__ieee754_rem_pio2+0x18c>
 800d33a:	4642      	mov	r2, r8
 800d33c:	464b      	mov	r3, r9
 800d33e:	4630      	mov	r0, r6
 800d340:	4639      	mov	r1, r7
 800d342:	f7f2 ff75 	bl	8000230 <__aeabi_dsub>
 800d346:	e9c4 0100 	strd	r0, r1, [r4]
 800d34a:	e011      	b.n	800d370 <__ieee754_rem_pio2+0x1b0>
 800d34c:	464b      	mov	r3, r9
 800d34e:	4642      	mov	r2, r8
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f7f2 ff6c 	bl	8000230 <__aeabi_dsub>
 800d358:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d35c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d360:	ebaa 0303 	sub.w	r3, sl, r3
 800d364:	2b10      	cmp	r3, #16
 800d366:	dc1f      	bgt.n	800d3a8 <__ieee754_rem_pio2+0x1e8>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	e9c4 2300 	strd	r2, r3, [r4]
 800d370:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d374:	4630      	mov	r0, r6
 800d376:	4653      	mov	r3, sl
 800d378:	4639      	mov	r1, r7
 800d37a:	f7f2 ff59 	bl	8000230 <__aeabi_dsub>
 800d37e:	4642      	mov	r2, r8
 800d380:	464b      	mov	r3, r9
 800d382:	f7f2 ff55 	bl	8000230 <__aeabi_dsub>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	f1bb 0f00 	cmp.w	fp, #0
 800d38e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d392:	f6bf af4b 	bge.w	800d22c <__ieee754_rem_pio2+0x6c>
 800d396:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d39a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800d39e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d3a2:	60e1      	str	r1, [r4, #12]
 800d3a4:	426d      	negs	r5, r5
 800d3a6:	e741      	b.n	800d22c <__ieee754_rem_pio2+0x6c>
 800d3a8:	a33f      	add	r3, pc, #252	; (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2e8>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b2:	f7f3 f8f5 	bl	80005a0 <__aeabi_dmul>
 800d3b6:	4680      	mov	r8, r0
 800d3b8:	4689      	mov	r9, r1
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	4630      	mov	r0, r6
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	f7f2 ff35 	bl	8000230 <__aeabi_dsub>
 800d3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4639      	mov	r1, r7
 800d3d2:	f7f2 ff2d 	bl	8000230 <__aeabi_dsub>
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	464b      	mov	r3, r9
 800d3da:	f7f2 ff29 	bl	8000230 <__aeabi_dsub>
 800d3de:	a334      	add	r3, pc, #208	; (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f0>)
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ec:	f7f3 f8d8 	bl	80005a0 <__aeabi_dmul>
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	f7f2 ff1c 	bl	8000230 <__aeabi_dsub>
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4680      	mov	r8, r0
 800d3fe:	4689      	mov	r9, r1
 800d400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d404:	f7f2 ff14 	bl	8000230 <__aeabi_dsub>
 800d408:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d40c:	ebaa 0a03 	sub.w	sl, sl, r3
 800d410:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d414:	dc06      	bgt.n	800d424 <__ieee754_rem_pio2+0x264>
 800d416:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	e9c4 2300 	strd	r2, r3, [r4]
 800d422:	e7a5      	b.n	800d370 <__ieee754_rem_pio2+0x1b0>
 800d424:	a326      	add	r3, pc, #152	; (adr r3, 800d4c0 <__ieee754_rem_pio2+0x300>)
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d42e:	f7f3 f8b7 	bl	80005a0 <__aeabi_dmul>
 800d432:	4680      	mov	r8, r0
 800d434:	4689      	mov	r9, r1
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d43e:	f7f2 fef7 	bl	8000230 <__aeabi_dsub>
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	4606      	mov	r6, r0
 800d448:	460f      	mov	r7, r1
 800d44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d44e:	f7f2 feef 	bl	8000230 <__aeabi_dsub>
 800d452:	4642      	mov	r2, r8
 800d454:	464b      	mov	r3, r9
 800d456:	f7f2 feeb 	bl	8000230 <__aeabi_dsub>
 800d45a:	a31b      	add	r3, pc, #108	; (adr r3, 800d4c8 <__ieee754_rem_pio2+0x308>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	4680      	mov	r8, r0
 800d462:	4689      	mov	r9, r1
 800d464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d468:	f7f3 f89a 	bl	80005a0 <__aeabi_dmul>
 800d46c:	4642      	mov	r2, r8
 800d46e:	464b      	mov	r3, r9
 800d470:	f7f2 fede 	bl	8000230 <__aeabi_dsub>
 800d474:	4680      	mov	r8, r0
 800d476:	4689      	mov	r9, r1
 800d478:	e75f      	b.n	800d33a <__ieee754_rem_pio2+0x17a>
 800d47a:	4a1b      	ldr	r2, [pc, #108]	; (800d4e8 <__ieee754_rem_pio2+0x328>)
 800d47c:	4592      	cmp	sl, r2
 800d47e:	dd35      	ble.n	800d4ec <__ieee754_rem_pio2+0x32c>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	f7f2 fed4 	bl	8000230 <__aeabi_dsub>
 800d488:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d48c:	e9c4 0100 	strd	r0, r1, [r4]
 800d490:	e6a6      	b.n	800d1e0 <__ieee754_rem_pio2+0x20>
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
 800d498:	54400000 	.word	0x54400000
 800d49c:	3ff921fb 	.word	0x3ff921fb
 800d4a0:	1a626331 	.word	0x1a626331
 800d4a4:	3dd0b461 	.word	0x3dd0b461
 800d4a8:	1a600000 	.word	0x1a600000
 800d4ac:	3dd0b461 	.word	0x3dd0b461
 800d4b0:	2e037073 	.word	0x2e037073
 800d4b4:	3ba3198a 	.word	0x3ba3198a
 800d4b8:	6dc9c883 	.word	0x6dc9c883
 800d4bc:	3fe45f30 	.word	0x3fe45f30
 800d4c0:	2e000000 	.word	0x2e000000
 800d4c4:	3ba3198a 	.word	0x3ba3198a
 800d4c8:	252049c1 	.word	0x252049c1
 800d4cc:	397b839a 	.word	0x397b839a
 800d4d0:	3fe921fb 	.word	0x3fe921fb
 800d4d4:	4002d97b 	.word	0x4002d97b
 800d4d8:	3ff921fb 	.word	0x3ff921fb
 800d4dc:	413921fb 	.word	0x413921fb
 800d4e0:	3fe00000 	.word	0x3fe00000
 800d4e4:	0800f9f8 	.word	0x0800f9f8
 800d4e8:	7fefffff 	.word	0x7fefffff
 800d4ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d4f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d4f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	f7f3 faea 	bl	8000ad4 <__aeabi_d2iz>
 800d500:	f7f2 ffe4 	bl	80004cc <__aeabi_i2d>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d510:	f7f2 fe8e 	bl	8000230 <__aeabi_dsub>
 800d514:	2200      	movs	r2, #0
 800d516:	4b20      	ldr	r3, [pc, #128]	; (800d598 <__ieee754_rem_pio2+0x3d8>)
 800d518:	f7f3 f842 	bl	80005a0 <__aeabi_dmul>
 800d51c:	460f      	mov	r7, r1
 800d51e:	4606      	mov	r6, r0
 800d520:	f7f3 fad8 	bl	8000ad4 <__aeabi_d2iz>
 800d524:	f7f2 ffd2 	bl	80004cc <__aeabi_i2d>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	4630      	mov	r0, r6
 800d52e:	4639      	mov	r1, r7
 800d530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d534:	f7f2 fe7c 	bl	8000230 <__aeabi_dsub>
 800d538:	2200      	movs	r2, #0
 800d53a:	4b17      	ldr	r3, [pc, #92]	; (800d598 <__ieee754_rem_pio2+0x3d8>)
 800d53c:	f7f3 f830 	bl	80005a0 <__aeabi_dmul>
 800d540:	f04f 0803 	mov.w	r8, #3
 800d544:	2600      	movs	r6, #0
 800d546:	2700      	movs	r7, #0
 800d548:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d54c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d550:	4632      	mov	r2, r6
 800d552:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d556:	463b      	mov	r3, r7
 800d558:	f108 3aff 	add.w	sl, r8, #4294967295
 800d55c:	f7f3 fa88 	bl	8000a70 <__aeabi_dcmpeq>
 800d560:	b9b8      	cbnz	r0, 800d592 <__ieee754_rem_pio2+0x3d2>
 800d562:	4b0e      	ldr	r3, [pc, #56]	; (800d59c <__ieee754_rem_pio2+0x3dc>)
 800d564:	462a      	mov	r2, r5
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	2302      	movs	r3, #2
 800d56a:	4621      	mov	r1, r4
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	a806      	add	r0, sp, #24
 800d570:	4643      	mov	r3, r8
 800d572:	f000 f8d3 	bl	800d71c <__kernel_rem_pio2>
 800d576:	f1bb 0f00 	cmp.w	fp, #0
 800d57a:	4605      	mov	r5, r0
 800d57c:	f6bf ae56 	bge.w	800d22c <__ieee754_rem_pio2+0x6c>
 800d580:	6863      	ldr	r3, [r4, #4]
 800d582:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d586:	6063      	str	r3, [r4, #4]
 800d588:	68e3      	ldr	r3, [r4, #12]
 800d58a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d58e:	60e3      	str	r3, [r4, #12]
 800d590:	e708      	b.n	800d3a4 <__ieee754_rem_pio2+0x1e4>
 800d592:	46d0      	mov	r8, sl
 800d594:	e7dc      	b.n	800d550 <__ieee754_rem_pio2+0x390>
 800d596:	bf00      	nop
 800d598:	41700000 	.word	0x41700000
 800d59c:	0800fa78 	.word	0x0800fa78

0800d5a0 <__kernel_cos>:
 800d5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d5a8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	460f      	mov	r7, r1
 800d5b0:	e9cd 2300 	strd	r2, r3, [sp]
 800d5b4:	da04      	bge.n	800d5c0 <__kernel_cos+0x20>
 800d5b6:	f7f3 fa8d 	bl	8000ad4 <__aeabi_d2iz>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f000 8086 	beq.w	800d6cc <__kernel_cos+0x12c>
 800d5c0:	4642      	mov	r2, r8
 800d5c2:	463b      	mov	r3, r7
 800d5c4:	4640      	mov	r0, r8
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	f7f2 ffea 	bl	80005a0 <__aeabi_dmul>
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	4b4e      	ldr	r3, [pc, #312]	; (800d708 <__kernel_cos+0x168>)
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	f7f2 ffe4 	bl	80005a0 <__aeabi_dmul>
 800d5d8:	a33f      	add	r3, pc, #252	; (adr r3, 800d6d8 <__kernel_cos+0x138>)
 800d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5de:	4682      	mov	sl, r0
 800d5e0:	468b      	mov	fp, r1
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7f2 ffdb 	bl	80005a0 <__aeabi_dmul>
 800d5ea:	a33d      	add	r3, pc, #244	; (adr r3, 800d6e0 <__kernel_cos+0x140>)
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f7f2 fe20 	bl	8000234 <__adddf3>
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	f7f2 ffd2 	bl	80005a0 <__aeabi_dmul>
 800d5fc:	a33a      	add	r3, pc, #232	; (adr r3, 800d6e8 <__kernel_cos+0x148>)
 800d5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d602:	f7f2 fe15 	bl	8000230 <__aeabi_dsub>
 800d606:	4622      	mov	r2, r4
 800d608:	462b      	mov	r3, r5
 800d60a:	f7f2 ffc9 	bl	80005a0 <__aeabi_dmul>
 800d60e:	a338      	add	r3, pc, #224	; (adr r3, 800d6f0 <__kernel_cos+0x150>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	f7f2 fe0e 	bl	8000234 <__adddf3>
 800d618:	4622      	mov	r2, r4
 800d61a:	462b      	mov	r3, r5
 800d61c:	f7f2 ffc0 	bl	80005a0 <__aeabi_dmul>
 800d620:	a335      	add	r3, pc, #212	; (adr r3, 800d6f8 <__kernel_cos+0x158>)
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f7f2 fe03 	bl	8000230 <__aeabi_dsub>
 800d62a:	4622      	mov	r2, r4
 800d62c:	462b      	mov	r3, r5
 800d62e:	f7f2 ffb7 	bl	80005a0 <__aeabi_dmul>
 800d632:	a333      	add	r3, pc, #204	; (adr r3, 800d700 <__kernel_cos+0x160>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	f7f2 fdfc 	bl	8000234 <__adddf3>
 800d63c:	4622      	mov	r2, r4
 800d63e:	462b      	mov	r3, r5
 800d640:	f7f2 ffae 	bl	80005a0 <__aeabi_dmul>
 800d644:	4622      	mov	r2, r4
 800d646:	462b      	mov	r3, r5
 800d648:	f7f2 ffaa 	bl	80005a0 <__aeabi_dmul>
 800d64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d650:	4604      	mov	r4, r0
 800d652:	460d      	mov	r5, r1
 800d654:	4640      	mov	r0, r8
 800d656:	4639      	mov	r1, r7
 800d658:	f7f2 ffa2 	bl	80005a0 <__aeabi_dmul>
 800d65c:	460b      	mov	r3, r1
 800d65e:	4602      	mov	r2, r0
 800d660:	4629      	mov	r1, r5
 800d662:	4620      	mov	r0, r4
 800d664:	f7f2 fde4 	bl	8000230 <__aeabi_dsub>
 800d668:	4b28      	ldr	r3, [pc, #160]	; (800d70c <__kernel_cos+0x16c>)
 800d66a:	4680      	mov	r8, r0
 800d66c:	429e      	cmp	r6, r3
 800d66e:	4689      	mov	r9, r1
 800d670:	dc0e      	bgt.n	800d690 <__kernel_cos+0xf0>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4650      	mov	r0, sl
 800d678:	4659      	mov	r1, fp
 800d67a:	f7f2 fdd9 	bl	8000230 <__aeabi_dsub>
 800d67e:	4602      	mov	r2, r0
 800d680:	2000      	movs	r0, #0
 800d682:	460b      	mov	r3, r1
 800d684:	4922      	ldr	r1, [pc, #136]	; (800d710 <__kernel_cos+0x170>)
 800d686:	f7f2 fdd3 	bl	8000230 <__aeabi_dsub>
 800d68a:	b003      	add	sp, #12
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	2400      	movs	r4, #0
 800d692:	4b20      	ldr	r3, [pc, #128]	; (800d714 <__kernel_cos+0x174>)
 800d694:	4622      	mov	r2, r4
 800d696:	429e      	cmp	r6, r3
 800d698:	bfcc      	ite	gt
 800d69a:	4d1f      	ldrgt	r5, [pc, #124]	; (800d718 <__kernel_cos+0x178>)
 800d69c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d6a0:	462b      	mov	r3, r5
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	491a      	ldr	r1, [pc, #104]	; (800d710 <__kernel_cos+0x170>)
 800d6a6:	f7f2 fdc3 	bl	8000230 <__aeabi_dsub>
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	460f      	mov	r7, r1
 800d6b0:	462b      	mov	r3, r5
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	4659      	mov	r1, fp
 800d6b6:	f7f2 fdbb 	bl	8000230 <__aeabi_dsub>
 800d6ba:	4642      	mov	r2, r8
 800d6bc:	464b      	mov	r3, r9
 800d6be:	f7f2 fdb7 	bl	8000230 <__aeabi_dsub>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	4639      	mov	r1, r7
 800d6ca:	e7dc      	b.n	800d686 <__kernel_cos+0xe6>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	4910      	ldr	r1, [pc, #64]	; (800d710 <__kernel_cos+0x170>)
 800d6d0:	e7db      	b.n	800d68a <__kernel_cos+0xea>
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	be8838d4 	.word	0xbe8838d4
 800d6dc:	bda8fae9 	.word	0xbda8fae9
 800d6e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d6e4:	3e21ee9e 	.word	0x3e21ee9e
 800d6e8:	809c52ad 	.word	0x809c52ad
 800d6ec:	3e927e4f 	.word	0x3e927e4f
 800d6f0:	19cb1590 	.word	0x19cb1590
 800d6f4:	3efa01a0 	.word	0x3efa01a0
 800d6f8:	16c15177 	.word	0x16c15177
 800d6fc:	3f56c16c 	.word	0x3f56c16c
 800d700:	5555554c 	.word	0x5555554c
 800d704:	3fa55555 	.word	0x3fa55555
 800d708:	3fe00000 	.word	0x3fe00000
 800d70c:	3fd33332 	.word	0x3fd33332
 800d710:	3ff00000 	.word	0x3ff00000
 800d714:	3fe90000 	.word	0x3fe90000
 800d718:	3fd20000 	.word	0x3fd20000

0800d71c <__kernel_rem_pio2>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d724:	9307      	str	r3, [sp, #28]
 800d726:	9104      	str	r1, [sp, #16]
 800d728:	4bbf      	ldr	r3, [pc, #764]	; (800da28 <__kernel_rem_pio2+0x30c>)
 800d72a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d72c:	1ed4      	subs	r4, r2, #3
 800d72e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d732:	2500      	movs	r5, #0
 800d734:	9302      	str	r3, [sp, #8]
 800d736:	9b07      	ldr	r3, [sp, #28]
 800d738:	9008      	str	r0, [sp, #32]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	9306      	str	r3, [sp, #24]
 800d73e:	2318      	movs	r3, #24
 800d740:	fb94 f4f3 	sdiv	r4, r4, r3
 800d744:	f06f 0317 	mvn.w	r3, #23
 800d748:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d74c:	fb04 3303 	mla	r3, r4, r3, r3
 800d750:	eb03 0a02 	add.w	sl, r3, r2
 800d754:	9a06      	ldr	r2, [sp, #24]
 800d756:	9b02      	ldr	r3, [sp, #8]
 800d758:	1aa7      	subs	r7, r4, r2
 800d75a:	eb03 0802 	add.w	r8, r3, r2
 800d75e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d760:	2200      	movs	r2, #0
 800d762:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d766:	2300      	movs	r3, #0
 800d768:	ae1e      	add	r6, sp, #120	; 0x78
 800d76a:	4545      	cmp	r5, r8
 800d76c:	dd14      	ble.n	800d798 <__kernel_rem_pio2+0x7c>
 800d76e:	2600      	movs	r6, #0
 800d770:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800d774:	9b02      	ldr	r3, [sp, #8]
 800d776:	429e      	cmp	r6, r3
 800d778:	dc39      	bgt.n	800d7ee <__kernel_rem_pio2+0xd2>
 800d77a:	9b08      	ldr	r3, [sp, #32]
 800d77c:	f04f 0800 	mov.w	r8, #0
 800d780:	3b08      	subs	r3, #8
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	9b07      	ldr	r3, [sp, #28]
 800d786:	f04f 0900 	mov.w	r9, #0
 800d78a:	199d      	adds	r5, r3, r6
 800d78c:	ab20      	add	r3, sp, #128	; 0x80
 800d78e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	2700      	movs	r7, #0
 800d796:	e023      	b.n	800d7e0 <__kernel_rem_pio2+0xc4>
 800d798:	42ef      	cmn	r7, r5
 800d79a:	d40b      	bmi.n	800d7b4 <__kernel_rem_pio2+0x98>
 800d79c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d7a0:	e9cd 2300 	strd	r2, r3, [sp]
 800d7a4:	f7f2 fe92 	bl	80004cc <__aeabi_i2d>
 800d7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ac:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800d7b0:	3501      	adds	r5, #1
 800d7b2:	e7da      	b.n	800d76a <__kernel_rem_pio2+0x4e>
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	e7f8      	b.n	800d7ac <__kernel_rem_pio2+0x90>
 800d7ba:	9905      	ldr	r1, [sp, #20]
 800d7bc:	9d00      	ldr	r5, [sp, #0]
 800d7be:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d7c2:	9105      	str	r1, [sp, #20]
 800d7c4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d7c8:	9500      	str	r5, [sp, #0]
 800d7ca:	f7f2 fee9 	bl	80005a0 <__aeabi_dmul>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	f7f2 fd2d 	bl	8000234 <__adddf3>
 800d7da:	4680      	mov	r8, r0
 800d7dc:	4689      	mov	r9, r1
 800d7de:	3701      	adds	r7, #1
 800d7e0:	9b06      	ldr	r3, [sp, #24]
 800d7e2:	429f      	cmp	r7, r3
 800d7e4:	dde9      	ble.n	800d7ba <__kernel_rem_pio2+0x9e>
 800d7e6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800d7ea:	3601      	adds	r6, #1
 800d7ec:	e7c2      	b.n	800d774 <__kernel_rem_pio2+0x58>
 800d7ee:	9b02      	ldr	r3, [sp, #8]
 800d7f0:	aa0c      	add	r2, sp, #48	; 0x30
 800d7f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7f8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d7fa:	9f02      	ldr	r7, [sp, #8]
 800d7fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d800:	930a      	str	r3, [sp, #40]	; 0x28
 800d802:	2600      	movs	r6, #0
 800d804:	ab98      	add	r3, sp, #608	; 0x260
 800d806:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800d80a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d80e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d812:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d816:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d81a:	ab98      	add	r3, sp, #608	; 0x260
 800d81c:	445b      	add	r3, fp
 800d81e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800d822:	1bbb      	subs	r3, r7, r6
 800d824:	2b00      	cmp	r3, #0
 800d826:	dc71      	bgt.n	800d90c <__kernel_rem_pio2+0x1f0>
 800d828:	4652      	mov	r2, sl
 800d82a:	4640      	mov	r0, r8
 800d82c:	4649      	mov	r1, r9
 800d82e:	f000 fbff 	bl	800e030 <scalbn>
 800d832:	2200      	movs	r2, #0
 800d834:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d838:	4604      	mov	r4, r0
 800d83a:	460d      	mov	r5, r1
 800d83c:	f7f2 feb0 	bl	80005a0 <__aeabi_dmul>
 800d840:	f000 fb72 	bl	800df28 <floor>
 800d844:	2200      	movs	r2, #0
 800d846:	4b79      	ldr	r3, [pc, #484]	; (800da2c <__kernel_rem_pio2+0x310>)
 800d848:	f7f2 feaa 	bl	80005a0 <__aeabi_dmul>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4620      	mov	r0, r4
 800d852:	4629      	mov	r1, r5
 800d854:	f7f2 fcec 	bl	8000230 <__aeabi_dsub>
 800d858:	460d      	mov	r5, r1
 800d85a:	4604      	mov	r4, r0
 800d85c:	f7f3 f93a 	bl	8000ad4 <__aeabi_d2iz>
 800d860:	9005      	str	r0, [sp, #20]
 800d862:	f7f2 fe33 	bl	80004cc <__aeabi_i2d>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4620      	mov	r0, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f2 fcdf 	bl	8000230 <__aeabi_dsub>
 800d872:	f1ba 0f00 	cmp.w	sl, #0
 800d876:	4680      	mov	r8, r0
 800d878:	4689      	mov	r9, r1
 800d87a:	dd6c      	ble.n	800d956 <__kernel_rem_pio2+0x23a>
 800d87c:	1e7a      	subs	r2, r7, #1
 800d87e:	ab0c      	add	r3, sp, #48	; 0x30
 800d880:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d884:	f1ca 0118 	rsb	r1, sl, #24
 800d888:	9c05      	ldr	r4, [sp, #20]
 800d88a:	fa40 f301 	asr.w	r3, r0, r1
 800d88e:	441c      	add	r4, r3
 800d890:	408b      	lsls	r3, r1
 800d892:	1ac0      	subs	r0, r0, r3
 800d894:	ab0c      	add	r3, sp, #48	; 0x30
 800d896:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d89a:	f1ca 0317 	rsb	r3, sl, #23
 800d89e:	9405      	str	r4, [sp, #20]
 800d8a0:	fa40 f303 	asr.w	r3, r0, r3
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	9b00      	ldr	r3, [sp, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dd62      	ble.n	800d972 <__kernel_rem_pio2+0x256>
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d8b2:	4614      	mov	r4, r2
 800d8b4:	9b05      	ldr	r3, [sp, #20]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	4297      	cmp	r7, r2
 800d8bc:	f300 809f 	bgt.w	800d9fe <__kernel_rem_pio2+0x2e2>
 800d8c0:	f1ba 0f00 	cmp.w	sl, #0
 800d8c4:	dd07      	ble.n	800d8d6 <__kernel_rem_pio2+0x1ba>
 800d8c6:	f1ba 0f01 	cmp.w	sl, #1
 800d8ca:	f000 80bb 	beq.w	800da44 <__kernel_rem_pio2+0x328>
 800d8ce:	f1ba 0f02 	cmp.w	sl, #2
 800d8d2:	f000 80c1 	beq.w	800da58 <__kernel_rem_pio2+0x33c>
 800d8d6:	9b00      	ldr	r3, [sp, #0]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d14a      	bne.n	800d972 <__kernel_rem_pio2+0x256>
 800d8dc:	4642      	mov	r2, r8
 800d8de:	464b      	mov	r3, r9
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	4953      	ldr	r1, [pc, #332]	; (800da30 <__kernel_rem_pio2+0x314>)
 800d8e4:	f7f2 fca4 	bl	8000230 <__aeabi_dsub>
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	4689      	mov	r9, r1
 800d8ec:	2c00      	cmp	r4, #0
 800d8ee:	d040      	beq.n	800d972 <__kernel_rem_pio2+0x256>
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	494e      	ldr	r1, [pc, #312]	; (800da30 <__kernel_rem_pio2+0x314>)
 800d8f6:	f000 fb9b 	bl	800e030 <scalbn>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4640      	mov	r0, r8
 800d900:	4649      	mov	r1, r9
 800d902:	f7f2 fc95 	bl	8000230 <__aeabi_dsub>
 800d906:	4680      	mov	r8, r0
 800d908:	4689      	mov	r9, r1
 800d90a:	e032      	b.n	800d972 <__kernel_rem_pio2+0x256>
 800d90c:	2200      	movs	r2, #0
 800d90e:	4b49      	ldr	r3, [pc, #292]	; (800da34 <__kernel_rem_pio2+0x318>)
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f2 fe44 	bl	80005a0 <__aeabi_dmul>
 800d918:	f7f3 f8dc 	bl	8000ad4 <__aeabi_d2iz>
 800d91c:	f7f2 fdd6 	bl	80004cc <__aeabi_i2d>
 800d920:	2200      	movs	r2, #0
 800d922:	4b45      	ldr	r3, [pc, #276]	; (800da38 <__kernel_rem_pio2+0x31c>)
 800d924:	e9cd 0100 	strd	r0, r1, [sp]
 800d928:	f7f2 fe3a 	bl	80005a0 <__aeabi_dmul>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4640      	mov	r0, r8
 800d932:	4649      	mov	r1, r9
 800d934:	f7f2 fc7c 	bl	8000230 <__aeabi_dsub>
 800d938:	f7f3 f8cc 	bl	8000ad4 <__aeabi_d2iz>
 800d93c:	ab0c      	add	r3, sp, #48	; 0x30
 800d93e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d942:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d94a:	f7f2 fc73 	bl	8000234 <__adddf3>
 800d94e:	3601      	adds	r6, #1
 800d950:	4680      	mov	r8, r0
 800d952:	4689      	mov	r9, r1
 800d954:	e765      	b.n	800d822 <__kernel_rem_pio2+0x106>
 800d956:	d105      	bne.n	800d964 <__kernel_rem_pio2+0x248>
 800d958:	1e7b      	subs	r3, r7, #1
 800d95a:	aa0c      	add	r2, sp, #48	; 0x30
 800d95c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d960:	15c3      	asrs	r3, r0, #23
 800d962:	e79f      	b.n	800d8a4 <__kernel_rem_pio2+0x188>
 800d964:	2200      	movs	r2, #0
 800d966:	4b35      	ldr	r3, [pc, #212]	; (800da3c <__kernel_rem_pio2+0x320>)
 800d968:	f7f3 f8a0 	bl	8000aac <__aeabi_dcmpge>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d143      	bne.n	800d9f8 <__kernel_rem_pio2+0x2dc>
 800d970:	9000      	str	r0, [sp, #0]
 800d972:	2200      	movs	r2, #0
 800d974:	2300      	movs	r3, #0
 800d976:	4640      	mov	r0, r8
 800d978:	4649      	mov	r1, r9
 800d97a:	f7f3 f879 	bl	8000a70 <__aeabi_dcmpeq>
 800d97e:	2800      	cmp	r0, #0
 800d980:	f000 80c3 	beq.w	800db0a <__kernel_rem_pio2+0x3ee>
 800d984:	1e7c      	subs	r4, r7, #1
 800d986:	4623      	mov	r3, r4
 800d988:	2200      	movs	r2, #0
 800d98a:	9902      	ldr	r1, [sp, #8]
 800d98c:	428b      	cmp	r3, r1
 800d98e:	da6a      	bge.n	800da66 <__kernel_rem_pio2+0x34a>
 800d990:	2a00      	cmp	r2, #0
 800d992:	f000 8084 	beq.w	800da9e <__kernel_rem_pio2+0x382>
 800d996:	ab0c      	add	r3, sp, #48	; 0x30
 800d998:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d99c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 80b0 	beq.w	800db06 <__kernel_rem_pio2+0x3ea>
 800d9a6:	4652      	mov	r2, sl
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	4921      	ldr	r1, [pc, #132]	; (800da30 <__kernel_rem_pio2+0x314>)
 800d9ac:	f000 fb40 	bl	800e030 <scalbn>
 800d9b0:	4625      	mov	r5, r4
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	f04f 0a00 	mov.w	sl, #0
 800d9ba:	00e3      	lsls	r3, r4, #3
 800d9bc:	aa98      	add	r2, sp, #608	; 0x260
 800d9be:	eb02 0803 	add.w	r8, r2, r3
 800d9c2:	f8df b070 	ldr.w	fp, [pc, #112]	; 800da34 <__kernel_rem_pio2+0x318>
 800d9c6:	9306      	str	r3, [sp, #24]
 800d9c8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	f280 80d2 	bge.w	800db76 <__kernel_rem_pio2+0x45a>
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	9a06      	ldr	r2, [sp, #24]
 800d9d6:	ab98      	add	r3, sp, #608	; 0x260
 800d9d8:	189e      	adds	r6, r3, r2
 800d9da:	3ea8      	subs	r6, #168	; 0xa8
 800d9dc:	1b63      	subs	r3, r4, r5
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f2c0 80f9 	blt.w	800dbd6 <__kernel_rem_pio2+0x4ba>
 800d9e4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800da40 <__kernel_rem_pio2+0x324>
 800d9e8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800d9ec:	f04f 0a00 	mov.w	sl, #0
 800d9f0:	f04f 0b00 	mov.w	fp, #0
 800d9f4:	2700      	movs	r7, #0
 800d9f6:	e0e2      	b.n	800dbbe <__kernel_rem_pio2+0x4a2>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	e756      	b.n	800d8ac <__kernel_rem_pio2+0x190>
 800d9fe:	ab0c      	add	r3, sp, #48	; 0x30
 800da00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da04:	b94c      	cbnz	r4, 800da1a <__kernel_rem_pio2+0x2fe>
 800da06:	b12b      	cbz	r3, 800da14 <__kernel_rem_pio2+0x2f8>
 800da08:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800da0c:	a80c      	add	r0, sp, #48	; 0x30
 800da0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800da12:	2301      	movs	r3, #1
 800da14:	3201      	adds	r2, #1
 800da16:	461c      	mov	r4, r3
 800da18:	e74f      	b.n	800d8ba <__kernel_rem_pio2+0x19e>
 800da1a:	1acb      	subs	r3, r1, r3
 800da1c:	a80c      	add	r0, sp, #48	; 0x30
 800da1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800da22:	4623      	mov	r3, r4
 800da24:	e7f6      	b.n	800da14 <__kernel_rem_pio2+0x2f8>
 800da26:	bf00      	nop
 800da28:	0800fbc0 	.word	0x0800fbc0
 800da2c:	40200000 	.word	0x40200000
 800da30:	3ff00000 	.word	0x3ff00000
 800da34:	3e700000 	.word	0x3e700000
 800da38:	41700000 	.word	0x41700000
 800da3c:	3fe00000 	.word	0x3fe00000
 800da40:	0800fb78 	.word	0x0800fb78
 800da44:	1e7a      	subs	r2, r7, #1
 800da46:	ab0c      	add	r3, sp, #48	; 0x30
 800da48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800da50:	a90c      	add	r1, sp, #48	; 0x30
 800da52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800da56:	e73e      	b.n	800d8d6 <__kernel_rem_pio2+0x1ba>
 800da58:	1e7a      	subs	r2, r7, #1
 800da5a:	ab0c      	add	r3, sp, #48	; 0x30
 800da5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da64:	e7f4      	b.n	800da50 <__kernel_rem_pio2+0x334>
 800da66:	a90c      	add	r1, sp, #48	; 0x30
 800da68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	430a      	orrs	r2, r1
 800da70:	e78b      	b.n	800d98a <__kernel_rem_pio2+0x26e>
 800da72:	3401      	adds	r4, #1
 800da74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da78:	2a00      	cmp	r2, #0
 800da7a:	d0fa      	beq.n	800da72 <__kernel_rem_pio2+0x356>
 800da7c:	ab98      	add	r3, sp, #608	; 0x260
 800da7e:	449b      	add	fp, r3
 800da80:	9b07      	ldr	r3, [sp, #28]
 800da82:	1c7e      	adds	r6, r7, #1
 800da84:	19dd      	adds	r5, r3, r7
 800da86:	ab98      	add	r3, sp, #608	; 0x260
 800da88:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800da8c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800da90:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800da94:	443c      	add	r4, r7
 800da96:	42b4      	cmp	r4, r6
 800da98:	da04      	bge.n	800daa4 <__kernel_rem_pio2+0x388>
 800da9a:	4627      	mov	r7, r4
 800da9c:	e6b1      	b.n	800d802 <__kernel_rem_pio2+0xe6>
 800da9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa0:	2401      	movs	r4, #1
 800daa2:	e7e7      	b.n	800da74 <__kernel_rem_pio2+0x358>
 800daa4:	f105 0308 	add.w	r3, r5, #8
 800daa8:	9309      	str	r3, [sp, #36]	; 0x24
 800daaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daac:	2700      	movs	r7, #0
 800daae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dab2:	f7f2 fd0b 	bl	80004cc <__aeabi_i2d>
 800dab6:	f04f 0800 	mov.w	r8, #0
 800daba:	f04f 0900 	mov.w	r9, #0
 800dabe:	9b08      	ldr	r3, [sp, #32]
 800dac0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dac4:	3b08      	subs	r3, #8
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	f105 0310 	add.w	r3, r5, #16
 800dacc:	9305      	str	r3, [sp, #20]
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	429f      	cmp	r7, r3
 800dad2:	dd04      	ble.n	800dade <__kernel_rem_pio2+0x3c2>
 800dad4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800dad8:	3601      	adds	r6, #1
 800dada:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dadc:	e7db      	b.n	800da96 <__kernel_rem_pio2+0x37a>
 800dade:	9905      	ldr	r1, [sp, #20]
 800dae0:	9d00      	ldr	r5, [sp, #0]
 800dae2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dae6:	9105      	str	r1, [sp, #20]
 800dae8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800daec:	9500      	str	r5, [sp, #0]
 800daee:	f7f2 fd57 	bl	80005a0 <__aeabi_dmul>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	4640      	mov	r0, r8
 800daf8:	4649      	mov	r1, r9
 800dafa:	f7f2 fb9b 	bl	8000234 <__adddf3>
 800dafe:	3701      	adds	r7, #1
 800db00:	4680      	mov	r8, r0
 800db02:	4689      	mov	r9, r1
 800db04:	e7e3      	b.n	800dace <__kernel_rem_pio2+0x3b2>
 800db06:	3c01      	subs	r4, #1
 800db08:	e745      	b.n	800d996 <__kernel_rem_pio2+0x27a>
 800db0a:	f1ca 0200 	rsb	r2, sl, #0
 800db0e:	4640      	mov	r0, r8
 800db10:	4649      	mov	r1, r9
 800db12:	f000 fa8d 	bl	800e030 <scalbn>
 800db16:	2200      	movs	r2, #0
 800db18:	4ba3      	ldr	r3, [pc, #652]	; (800dda8 <__kernel_rem_pio2+0x68c>)
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	f7f2 ffc5 	bl	8000aac <__aeabi_dcmpge>
 800db22:	b1f8      	cbz	r0, 800db64 <__kernel_rem_pio2+0x448>
 800db24:	2200      	movs	r2, #0
 800db26:	4ba1      	ldr	r3, [pc, #644]	; (800ddac <__kernel_rem_pio2+0x690>)
 800db28:	4620      	mov	r0, r4
 800db2a:	4629      	mov	r1, r5
 800db2c:	f7f2 fd38 	bl	80005a0 <__aeabi_dmul>
 800db30:	f7f2 ffd0 	bl	8000ad4 <__aeabi_d2iz>
 800db34:	4606      	mov	r6, r0
 800db36:	f7f2 fcc9 	bl	80004cc <__aeabi_i2d>
 800db3a:	2200      	movs	r2, #0
 800db3c:	4b9a      	ldr	r3, [pc, #616]	; (800dda8 <__kernel_rem_pio2+0x68c>)
 800db3e:	f7f2 fd2f 	bl	80005a0 <__aeabi_dmul>
 800db42:	460b      	mov	r3, r1
 800db44:	4602      	mov	r2, r0
 800db46:	4629      	mov	r1, r5
 800db48:	4620      	mov	r0, r4
 800db4a:	f7f2 fb71 	bl	8000230 <__aeabi_dsub>
 800db4e:	f7f2 ffc1 	bl	8000ad4 <__aeabi_d2iz>
 800db52:	1c7c      	adds	r4, r7, #1
 800db54:	ab0c      	add	r3, sp, #48	; 0x30
 800db56:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800db5a:	f10a 0a18 	add.w	sl, sl, #24
 800db5e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800db62:	e720      	b.n	800d9a6 <__kernel_rem_pio2+0x28a>
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 ffb4 	bl	8000ad4 <__aeabi_d2iz>
 800db6c:	ab0c      	add	r3, sp, #48	; 0x30
 800db6e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800db72:	463c      	mov	r4, r7
 800db74:	e717      	b.n	800d9a6 <__kernel_rem_pio2+0x28a>
 800db76:	ab0c      	add	r3, sp, #48	; 0x30
 800db78:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db7c:	f7f2 fca6 	bl	80004cc <__aeabi_i2d>
 800db80:	4632      	mov	r2, r6
 800db82:	463b      	mov	r3, r7
 800db84:	f7f2 fd0c 	bl	80005a0 <__aeabi_dmul>
 800db88:	4652      	mov	r2, sl
 800db8a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800db8e:	465b      	mov	r3, fp
 800db90:	4630      	mov	r0, r6
 800db92:	4639      	mov	r1, r7
 800db94:	f7f2 fd04 	bl	80005a0 <__aeabi_dmul>
 800db98:	3d01      	subs	r5, #1
 800db9a:	4606      	mov	r6, r0
 800db9c:	460f      	mov	r7, r1
 800db9e:	e715      	b.n	800d9cc <__kernel_rem_pio2+0x2b0>
 800dba0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800dba4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800dba8:	f7f2 fcfa 	bl	80005a0 <__aeabi_dmul>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4650      	mov	r0, sl
 800dbb2:	4659      	mov	r1, fp
 800dbb4:	f7f2 fb3e 	bl	8000234 <__adddf3>
 800dbb8:	4682      	mov	sl, r0
 800dbba:	468b      	mov	fp, r1
 800dbbc:	3701      	adds	r7, #1
 800dbbe:	9b02      	ldr	r3, [sp, #8]
 800dbc0:	429f      	cmp	r7, r3
 800dbc2:	dc01      	bgt.n	800dbc8 <__kernel_rem_pio2+0x4ac>
 800dbc4:	42bd      	cmp	r5, r7
 800dbc6:	daeb      	bge.n	800dba0 <__kernel_rem_pio2+0x484>
 800dbc8:	ab48      	add	r3, sp, #288	; 0x120
 800dbca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dbce:	e9c3 ab00 	strd	sl, fp, [r3]
 800dbd2:	3501      	adds	r5, #1
 800dbd4:	e702      	b.n	800d9dc <__kernel_rem_pio2+0x2c0>
 800dbd6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800dbd8:	2b03      	cmp	r3, #3
 800dbda:	d86c      	bhi.n	800dcb6 <__kernel_rem_pio2+0x59a>
 800dbdc:	e8df f003 	tbb	[pc, r3]
 800dbe0:	022f2f59 	.word	0x022f2f59
 800dbe4:	9a06      	ldr	r2, [sp, #24]
 800dbe6:	ab48      	add	r3, sp, #288	; 0x120
 800dbe8:	189d      	adds	r5, r3, r2
 800dbea:	46aa      	mov	sl, r5
 800dbec:	46a3      	mov	fp, r4
 800dbee:	f1bb 0f00 	cmp.w	fp, #0
 800dbf2:	f300 8087 	bgt.w	800dd04 <__kernel_rem_pio2+0x5e8>
 800dbf6:	46a2      	mov	sl, r4
 800dbf8:	f1ba 0f01 	cmp.w	sl, #1
 800dbfc:	f300 809f 	bgt.w	800dd3e <__kernel_rem_pio2+0x622>
 800dc00:	2700      	movs	r7, #0
 800dc02:	463e      	mov	r6, r7
 800dc04:	9d06      	ldr	r5, [sp, #24]
 800dc06:	ab48      	add	r3, sp, #288	; 0x120
 800dc08:	3508      	adds	r5, #8
 800dc0a:	441d      	add	r5, r3
 800dc0c:	2c01      	cmp	r4, #1
 800dc0e:	f300 80b3 	bgt.w	800dd78 <__kernel_rem_pio2+0x65c>
 800dc12:	9b00      	ldr	r3, [sp, #0]
 800dc14:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800dc16:	9849      	ldr	r0, [sp, #292]	; 0x124
 800dc18:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800dc1a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f040 80b5 	bne.w	800dd8c <__kernel_rem_pio2+0x670>
 800dc22:	4603      	mov	r3, r0
 800dc24:	462a      	mov	r2, r5
 800dc26:	9804      	ldr	r0, [sp, #16]
 800dc28:	e9c0 2300 	strd	r2, r3, [r0]
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	460b      	mov	r3, r1
 800dc30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc34:	463a      	mov	r2, r7
 800dc36:	4633      	mov	r3, r6
 800dc38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dc3c:	e03b      	b.n	800dcb6 <__kernel_rem_pio2+0x59a>
 800dc3e:	f04f 0c00 	mov.w	ip, #0
 800dc42:	4626      	mov	r6, r4
 800dc44:	4667      	mov	r7, ip
 800dc46:	9d06      	ldr	r5, [sp, #24]
 800dc48:	ab48      	add	r3, sp, #288	; 0x120
 800dc4a:	3508      	adds	r5, #8
 800dc4c:	441d      	add	r5, r3
 800dc4e:	2e00      	cmp	r6, #0
 800dc50:	da42      	bge.n	800dcd8 <__kernel_rem_pio2+0x5bc>
 800dc52:	9b00      	ldr	r3, [sp, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d049      	beq.n	800dcec <__kernel_rem_pio2+0x5d0>
 800dc58:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800dc5c:	4662      	mov	r2, ip
 800dc5e:	460b      	mov	r3, r1
 800dc60:	9904      	ldr	r1, [sp, #16]
 800dc62:	2601      	movs	r6, #1
 800dc64:	e9c1 2300 	strd	r2, r3, [r1]
 800dc68:	a948      	add	r1, sp, #288	; 0x120
 800dc6a:	463b      	mov	r3, r7
 800dc6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc70:	f7f2 fade 	bl	8000230 <__aeabi_dsub>
 800dc74:	4684      	mov	ip, r0
 800dc76:	460f      	mov	r7, r1
 800dc78:	ad48      	add	r5, sp, #288	; 0x120
 800dc7a:	42b4      	cmp	r4, r6
 800dc7c:	da38      	bge.n	800dcf0 <__kernel_rem_pio2+0x5d4>
 800dc7e:	9b00      	ldr	r3, [sp, #0]
 800dc80:	b10b      	cbz	r3, 800dc86 <__kernel_rem_pio2+0x56a>
 800dc82:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800dc86:	4662      	mov	r2, ip
 800dc88:	463b      	mov	r3, r7
 800dc8a:	9904      	ldr	r1, [sp, #16]
 800dc8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800dc90:	e011      	b.n	800dcb6 <__kernel_rem_pio2+0x59a>
 800dc92:	2700      	movs	r7, #0
 800dc94:	463d      	mov	r5, r7
 800dc96:	9b06      	ldr	r3, [sp, #24]
 800dc98:	aa98      	add	r2, sp, #608	; 0x260
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800dca0:	2c00      	cmp	r4, #0
 800dca2:	da0f      	bge.n	800dcc4 <__kernel_rem_pio2+0x5a8>
 800dca4:	9b00      	ldr	r3, [sp, #0]
 800dca6:	b10b      	cbz	r3, 800dcac <__kernel_rem_pio2+0x590>
 800dca8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800dcac:	463a      	mov	r2, r7
 800dcae:	462b      	mov	r3, r5
 800dcb0:	9904      	ldr	r1, [sp, #16]
 800dcb2:	e9c1 2300 	strd	r2, r3, [r1]
 800dcb6:	9b05      	ldr	r3, [sp, #20]
 800dcb8:	f003 0007 	and.w	r0, r3, #7
 800dcbc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dcca:	4629      	mov	r1, r5
 800dccc:	f7f2 fab2 	bl	8000234 <__adddf3>
 800dcd0:	3c01      	subs	r4, #1
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	e7e3      	b.n	800dca0 <__kernel_rem_pio2+0x584>
 800dcd8:	4660      	mov	r0, ip
 800dcda:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dcde:	4639      	mov	r1, r7
 800dce0:	f7f2 faa8 	bl	8000234 <__adddf3>
 800dce4:	3e01      	subs	r6, #1
 800dce6:	4684      	mov	ip, r0
 800dce8:	460f      	mov	r7, r1
 800dcea:	e7b0      	b.n	800dc4e <__kernel_rem_pio2+0x532>
 800dcec:	4639      	mov	r1, r7
 800dcee:	e7b5      	b.n	800dc5c <__kernel_rem_pio2+0x540>
 800dcf0:	4660      	mov	r0, ip
 800dcf2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 fa9c 	bl	8000234 <__adddf3>
 800dcfc:	3601      	adds	r6, #1
 800dcfe:	4684      	mov	ip, r0
 800dd00:	460f      	mov	r7, r1
 800dd02:	e7ba      	b.n	800dc7a <__kernel_rem_pio2+0x55e>
 800dd04:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800dd08:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	4649      	mov	r1, r9
 800dd10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd14:	f7f2 fa8e 	bl	8000234 <__adddf3>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4606      	mov	r6, r0
 800dd1e:	460f      	mov	r7, r1
 800dd20:	4640      	mov	r0, r8
 800dd22:	4649      	mov	r1, r9
 800dd24:	f7f2 fa84 	bl	8000230 <__aeabi_dsub>
 800dd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd2c:	f7f2 fa82 	bl	8000234 <__adddf3>
 800dd30:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd38:	e9ca 6700 	strd	r6, r7, [sl]
 800dd3c:	e757      	b.n	800dbee <__kernel_rem_pio2+0x4d2>
 800dd3e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800dd42:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800dd46:	4630      	mov	r0, r6
 800dd48:	4639      	mov	r1, r7
 800dd4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd4e:	f7f2 fa71 	bl	8000234 <__adddf3>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4680      	mov	r8, r0
 800dd58:	4689      	mov	r9, r1
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	f7f2 fa67 	bl	8000230 <__aeabi_dsub>
 800dd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd66:	f7f2 fa65 	bl	8000234 <__adddf3>
 800dd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dd72:	e9c5 8900 	strd	r8, r9, [r5]
 800dd76:	e73f      	b.n	800dbf8 <__kernel_rem_pio2+0x4dc>
 800dd78:	4638      	mov	r0, r7
 800dd7a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dd7e:	4631      	mov	r1, r6
 800dd80:	f7f2 fa58 	bl	8000234 <__adddf3>
 800dd84:	3c01      	subs	r4, #1
 800dd86:	4607      	mov	r7, r0
 800dd88:	460e      	mov	r6, r1
 800dd8a:	e73f      	b.n	800dc0c <__kernel_rem_pio2+0x4f0>
 800dd8c:	9b04      	ldr	r3, [sp, #16]
 800dd8e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd92:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dd96:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800dd9a:	601d      	str	r5, [r3, #0]
 800dd9c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800dda0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800dda4:	615e      	str	r6, [r3, #20]
 800dda6:	e786      	b.n	800dcb6 <__kernel_rem_pio2+0x59a>
 800dda8:	41700000 	.word	0x41700000
 800ddac:	3e700000 	.word	0x3e700000

0800ddb0 <__kernel_sin>:
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	b086      	sub	sp, #24
 800ddb6:	e9cd 2300 	strd	r2, r3, [sp]
 800ddba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddbe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ddc2:	4682      	mov	sl, r0
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ddc8:	da03      	bge.n	800ddd2 <__kernel_sin+0x22>
 800ddca:	f7f2 fe83 	bl	8000ad4 <__aeabi_d2iz>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d050      	beq.n	800de74 <__kernel_sin+0xc4>
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	4623      	mov	r3, r4
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	4621      	mov	r1, r4
 800ddda:	f7f2 fbe1 	bl	80005a0 <__aeabi_dmul>
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	4650      	mov	r0, sl
 800dde8:	4621      	mov	r1, r4
 800ddea:	f7f2 fbd9 	bl	80005a0 <__aeabi_dmul>
 800ddee:	a33e      	add	r3, pc, #248	; (adr r3, 800dee8 <__kernel_sin+0x138>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4689      	mov	r9, r1
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 fbd0 	bl	80005a0 <__aeabi_dmul>
 800de00:	a33b      	add	r3, pc, #236	; (adr r3, 800def0 <__kernel_sin+0x140>)
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 fa13 	bl	8000230 <__aeabi_dsub>
 800de0a:	4632      	mov	r2, r6
 800de0c:	463b      	mov	r3, r7
 800de0e:	f7f2 fbc7 	bl	80005a0 <__aeabi_dmul>
 800de12:	a339      	add	r3, pc, #228	; (adr r3, 800def8 <__kernel_sin+0x148>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	f7f2 fa0c 	bl	8000234 <__adddf3>
 800de1c:	4632      	mov	r2, r6
 800de1e:	463b      	mov	r3, r7
 800de20:	f7f2 fbbe 	bl	80005a0 <__aeabi_dmul>
 800de24:	a336      	add	r3, pc, #216	; (adr r3, 800df00 <__kernel_sin+0x150>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 fa01 	bl	8000230 <__aeabi_dsub>
 800de2e:	4632      	mov	r2, r6
 800de30:	463b      	mov	r3, r7
 800de32:	f7f2 fbb5 	bl	80005a0 <__aeabi_dmul>
 800de36:	a334      	add	r3, pc, #208	; (adr r3, 800df08 <__kernel_sin+0x158>)
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f7f2 f9fa 	bl	8000234 <__adddf3>
 800de40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de44:	b9dd      	cbnz	r5, 800de7e <__kernel_sin+0xce>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	f7f2 fba7 	bl	80005a0 <__aeabi_dmul>
 800de52:	a32f      	add	r3, pc, #188	; (adr r3, 800df10 <__kernel_sin+0x160>)
 800de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de58:	f7f2 f9ea 	bl	8000230 <__aeabi_dsub>
 800de5c:	4642      	mov	r2, r8
 800de5e:	464b      	mov	r3, r9
 800de60:	f7f2 fb9e 	bl	80005a0 <__aeabi_dmul>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	4650      	mov	r0, sl
 800de6a:	4621      	mov	r1, r4
 800de6c:	f7f2 f9e2 	bl	8000234 <__adddf3>
 800de70:	4682      	mov	sl, r0
 800de72:	460c      	mov	r4, r1
 800de74:	4650      	mov	r0, sl
 800de76:	4621      	mov	r1, r4
 800de78:	b006      	add	sp, #24
 800de7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7e:	2200      	movs	r2, #0
 800de80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de84:	4b24      	ldr	r3, [pc, #144]	; (800df18 <__kernel_sin+0x168>)
 800de86:	f7f2 fb8b 	bl	80005a0 <__aeabi_dmul>
 800de8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	f7f2 fb83 	bl	80005a0 <__aeabi_dmul>
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dea2:	f7f2 f9c5 	bl	8000230 <__aeabi_dsub>
 800dea6:	4632      	mov	r2, r6
 800dea8:	463b      	mov	r3, r7
 800deaa:	f7f2 fb79 	bl	80005a0 <__aeabi_dmul>
 800deae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800deb2:	f7f2 f9bd 	bl	8000230 <__aeabi_dsub>
 800deb6:	a316      	add	r3, pc, #88	; (adr r3, 800df10 <__kernel_sin+0x160>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	4606      	mov	r6, r0
 800debe:	460f      	mov	r7, r1
 800dec0:	4640      	mov	r0, r8
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 fb6c 	bl	80005a0 <__aeabi_dmul>
 800dec8:	4602      	mov	r2, r0
 800deca:	460b      	mov	r3, r1
 800decc:	4630      	mov	r0, r6
 800dece:	4639      	mov	r1, r7
 800ded0:	f7f2 f9b0 	bl	8000234 <__adddf3>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4650      	mov	r0, sl
 800deda:	4621      	mov	r1, r4
 800dedc:	f7f2 f9a8 	bl	8000230 <__aeabi_dsub>
 800dee0:	e7c6      	b.n	800de70 <__kernel_sin+0xc0>
 800dee2:	bf00      	nop
 800dee4:	f3af 8000 	nop.w
 800dee8:	5acfd57c 	.word	0x5acfd57c
 800deec:	3de5d93a 	.word	0x3de5d93a
 800def0:	8a2b9ceb 	.word	0x8a2b9ceb
 800def4:	3e5ae5e6 	.word	0x3e5ae5e6
 800def8:	57b1fe7d 	.word	0x57b1fe7d
 800defc:	3ec71de3 	.word	0x3ec71de3
 800df00:	19c161d5 	.word	0x19c161d5
 800df04:	3f2a01a0 	.word	0x3f2a01a0
 800df08:	1110f8a6 	.word	0x1110f8a6
 800df0c:	3f811111 	.word	0x3f811111
 800df10:	55555549 	.word	0x55555549
 800df14:	3fc55555 	.word	0x3fc55555
 800df18:	3fe00000 	.word	0x3fe00000

0800df1c <fabs>:
 800df1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df20:	4619      	mov	r1, r3
 800df22:	4770      	bx	lr
 800df24:	0000      	movs	r0, r0
	...

0800df28 <floor>:
 800df28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df2c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800df30:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800df34:	2e13      	cmp	r6, #19
 800df36:	4607      	mov	r7, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	460c      	mov	r4, r1
 800df3c:	4605      	mov	r5, r0
 800df3e:	dc35      	bgt.n	800dfac <floor+0x84>
 800df40:	2e00      	cmp	r6, #0
 800df42:	da16      	bge.n	800df72 <floor+0x4a>
 800df44:	a336      	add	r3, pc, #216	; (adr r3, 800e020 <floor+0xf8>)
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	f7f2 f973 	bl	8000234 <__adddf3>
 800df4e:	2200      	movs	r2, #0
 800df50:	2300      	movs	r3, #0
 800df52:	f7f2 fdb5 	bl	8000ac0 <__aeabi_dcmpgt>
 800df56:	b148      	cbz	r0, 800df6c <floor+0x44>
 800df58:	2c00      	cmp	r4, #0
 800df5a:	da5b      	bge.n	800e014 <floor+0xec>
 800df5c:	2500      	movs	r5, #0
 800df5e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800df62:	4a31      	ldr	r2, [pc, #196]	; (800e028 <floor+0x100>)
 800df64:	433b      	orrs	r3, r7
 800df66:	42ab      	cmp	r3, r5
 800df68:	bf18      	it	ne
 800df6a:	4614      	movne	r4, r2
 800df6c:	4623      	mov	r3, r4
 800df6e:	462f      	mov	r7, r5
 800df70:	e026      	b.n	800dfc0 <floor+0x98>
 800df72:	4a2e      	ldr	r2, [pc, #184]	; (800e02c <floor+0x104>)
 800df74:	fa42 f806 	asr.w	r8, r2, r6
 800df78:	ea01 0208 	and.w	r2, r1, r8
 800df7c:	4302      	orrs	r2, r0
 800df7e:	d01f      	beq.n	800dfc0 <floor+0x98>
 800df80:	a327      	add	r3, pc, #156	; (adr r3, 800e020 <floor+0xf8>)
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	f7f2 f955 	bl	8000234 <__adddf3>
 800df8a:	2200      	movs	r2, #0
 800df8c:	2300      	movs	r3, #0
 800df8e:	f7f2 fd97 	bl	8000ac0 <__aeabi_dcmpgt>
 800df92:	2800      	cmp	r0, #0
 800df94:	d0ea      	beq.n	800df6c <floor+0x44>
 800df96:	2c00      	cmp	r4, #0
 800df98:	bfbe      	ittt	lt
 800df9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800df9e:	fa43 f606 	asrlt.w	r6, r3, r6
 800dfa2:	19a4      	addlt	r4, r4, r6
 800dfa4:	ea24 0408 	bic.w	r4, r4, r8
 800dfa8:	2500      	movs	r5, #0
 800dfaa:	e7df      	b.n	800df6c <floor+0x44>
 800dfac:	2e33      	cmp	r6, #51	; 0x33
 800dfae:	dd0b      	ble.n	800dfc8 <floor+0xa0>
 800dfb0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dfb4:	d104      	bne.n	800dfc0 <floor+0x98>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	f7f2 f93c 	bl	8000234 <__adddf3>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4638      	mov	r0, r7
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfcc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800dfd0:	fa22 f808 	lsr.w	r8, r2, r8
 800dfd4:	ea18 0f00 	tst.w	r8, r0
 800dfd8:	d0f2      	beq.n	800dfc0 <floor+0x98>
 800dfda:	a311      	add	r3, pc, #68	; (adr r3, 800e020 <floor+0xf8>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f7f2 f928 	bl	8000234 <__adddf3>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f7f2 fd6a 	bl	8000ac0 <__aeabi_dcmpgt>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d0bd      	beq.n	800df6c <floor+0x44>
 800dff0:	2c00      	cmp	r4, #0
 800dff2:	da02      	bge.n	800dffa <floor+0xd2>
 800dff4:	2e14      	cmp	r6, #20
 800dff6:	d103      	bne.n	800e000 <floor+0xd8>
 800dff8:	3401      	adds	r4, #1
 800dffa:	ea25 0508 	bic.w	r5, r5, r8
 800dffe:	e7b5      	b.n	800df6c <floor+0x44>
 800e000:	2301      	movs	r3, #1
 800e002:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e006:	fa03 f606 	lsl.w	r6, r3, r6
 800e00a:	4435      	add	r5, r6
 800e00c:	42bd      	cmp	r5, r7
 800e00e:	bf38      	it	cc
 800e010:	18e4      	addcc	r4, r4, r3
 800e012:	e7f2      	b.n	800dffa <floor+0xd2>
 800e014:	2500      	movs	r5, #0
 800e016:	462c      	mov	r4, r5
 800e018:	e7a8      	b.n	800df6c <floor+0x44>
 800e01a:	bf00      	nop
 800e01c:	f3af 8000 	nop.w
 800e020:	8800759c 	.word	0x8800759c
 800e024:	7e37e43c 	.word	0x7e37e43c
 800e028:	bff00000 	.word	0xbff00000
 800e02c:	000fffff 	.word	0x000fffff

0800e030 <scalbn>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	4616      	mov	r6, r2
 800e034:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e038:	4604      	mov	r4, r0
 800e03a:	460d      	mov	r5, r1
 800e03c:	460b      	mov	r3, r1
 800e03e:	b982      	cbnz	r2, 800e062 <scalbn+0x32>
 800e040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e044:	4303      	orrs	r3, r0
 800e046:	d034      	beq.n	800e0b2 <scalbn+0x82>
 800e048:	4b2d      	ldr	r3, [pc, #180]	; (800e100 <scalbn+0xd0>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f7f2 faa8 	bl	80005a0 <__aeabi_dmul>
 800e050:	4b2c      	ldr	r3, [pc, #176]	; (800e104 <scalbn+0xd4>)
 800e052:	4604      	mov	r4, r0
 800e054:	429e      	cmp	r6, r3
 800e056:	460d      	mov	r5, r1
 800e058:	da0d      	bge.n	800e076 <scalbn+0x46>
 800e05a:	a325      	add	r3, pc, #148	; (adr r3, 800e0f0 <scalbn+0xc0>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	e01c      	b.n	800e09c <scalbn+0x6c>
 800e062:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800e066:	42ba      	cmp	r2, r7
 800e068:	d109      	bne.n	800e07e <scalbn+0x4e>
 800e06a:	4602      	mov	r2, r0
 800e06c:	f7f2 f8e2 	bl	8000234 <__adddf3>
 800e070:	4604      	mov	r4, r0
 800e072:	460d      	mov	r5, r1
 800e074:	e01d      	b.n	800e0b2 <scalbn+0x82>
 800e076:	460b      	mov	r3, r1
 800e078:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e07c:	3a36      	subs	r2, #54	; 0x36
 800e07e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e082:	4432      	add	r2, r6
 800e084:	428a      	cmp	r2, r1
 800e086:	dd0c      	ble.n	800e0a2 <scalbn+0x72>
 800e088:	4622      	mov	r2, r4
 800e08a:	462b      	mov	r3, r5
 800e08c:	a11a      	add	r1, pc, #104	; (adr r1, 800e0f8 <scalbn+0xc8>)
 800e08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e092:	f000 f83b 	bl	800e10c <copysign>
 800e096:	a318      	add	r3, pc, #96	; (adr r3, 800e0f8 <scalbn+0xc8>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f7f2 fa80 	bl	80005a0 <__aeabi_dmul>
 800e0a0:	e7e6      	b.n	800e070 <scalbn+0x40>
 800e0a2:	2a00      	cmp	r2, #0
 800e0a4:	dd08      	ble.n	800e0b8 <scalbn+0x88>
 800e0a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0bc:	da0b      	bge.n	800e0d6 <scalbn+0xa6>
 800e0be:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0c2:	429e      	cmp	r6, r3
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	dce0      	bgt.n	800e08c <scalbn+0x5c>
 800e0ca:	a109      	add	r1, pc, #36	; (adr r1, 800e0f0 <scalbn+0xc0>)
 800e0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0d0:	f000 f81c 	bl	800e10c <copysign>
 800e0d4:	e7c1      	b.n	800e05a <scalbn+0x2a>
 800e0d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0da:	3236      	adds	r2, #54	; 0x36
 800e0dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	4b07      	ldr	r3, [pc, #28]	; (800e108 <scalbn+0xd8>)
 800e0ec:	e7d6      	b.n	800e09c <scalbn+0x6c>
 800e0ee:	bf00      	nop
 800e0f0:	c2f8f359 	.word	0xc2f8f359
 800e0f4:	01a56e1f 	.word	0x01a56e1f
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	7e37e43c 	.word	0x7e37e43c
 800e100:	43500000 	.word	0x43500000
 800e104:	ffff3cb0 	.word	0xffff3cb0
 800e108:	3c900000 	.word	0x3c900000

0800e10c <copysign>:
 800e10c:	b530      	push	{r4, r5, lr}
 800e10e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e116:	ea42 0503 	orr.w	r5, r2, r3
 800e11a:	4629      	mov	r1, r5
 800e11c:	bd30      	pop	{r4, r5, pc}
	...

0800e120 <_init>:
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	bf00      	nop
 800e124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e126:	bc08      	pop	{r3}
 800e128:	469e      	mov	lr, r3
 800e12a:	4770      	bx	lr

0800e12c <_fini>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	bf00      	nop
 800e130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e132:	bc08      	pop	{r3}
 800e134:	469e      	mov	lr, r3
 800e136:	4770      	bx	lr
